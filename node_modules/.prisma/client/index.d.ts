
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Place
 * 
 */
export type Place = $Result.DefaultSelection<Prisma.$PlacePayload>
/**
 * Model Well
 * 
 */
export type Well = $Result.DefaultSelection<Prisma.$WellPayload>
/**
 * Model Record
 * 
 */
export type Record = $Result.DefaultSelection<Prisma.$RecordPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Condition
 * 
 */
export type Condition = $Result.DefaultSelection<Prisma.$ConditionPayload>
/**
 * Model RuleCondition
 * 
 */
export type RuleCondition = $Result.DefaultSelection<Prisma.$RuleConditionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const LogicalOperator: {
  AND: 'AND',
  OR: 'OR'
};

export type LogicalOperator = (typeof LogicalOperator)[keyof typeof LogicalOperator]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type LogicalOperator = $Enums.LogicalOperator

export const LogicalOperator: typeof $Enums.LogicalOperator

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.company.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.company.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;

  /**
   * `prisma.place`: Exposes CRUD operations for the **Place** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Places
    * const places = await prisma.place.findMany()
    * ```
    */
  get place(): Prisma.PlaceDelegate<ExtArgs>;

  /**
   * `prisma.well`: Exposes CRUD operations for the **Well** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wells
    * const wells = await prisma.well.findMany()
    * ```
    */
  get well(): Prisma.WellDelegate<ExtArgs>;

  /**
   * `prisma.record`: Exposes CRUD operations for the **Record** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Records
    * const records = await prisma.record.findMany()
    * ```
    */
  get record(): Prisma.RecordDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.condition`: Exposes CRUD operations for the **Condition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conditions
    * const conditions = await prisma.condition.findMany()
    * ```
    */
  get condition(): Prisma.ConditionDelegate<ExtArgs>;

  /**
   * `prisma.ruleCondition`: Exposes CRUD operations for the **RuleCondition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RuleConditions
    * const ruleConditions = await prisma.ruleCondition.findMany()
    * ```
    */
  get ruleCondition(): Prisma.RuleConditionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Company: 'Company',
    Employee: 'Employee',
    Place: 'Place',
    Well: 'Well',
    Record: 'Record',
    Notification: 'Notification',
    Condition: 'Condition',
    RuleCondition: 'RuleCondition'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "company" | "employee" | "place" | "well" | "record" | "notification" | "condition" | "ruleCondition"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Place: {
        payload: Prisma.$PlacePayload<ExtArgs>
        fields: Prisma.PlaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          findFirst: {
            args: Prisma.PlaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          findMany: {
            args: Prisma.PlaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>[]
          }
          create: {
            args: Prisma.PlaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          createMany: {
            args: Prisma.PlaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>[]
          }
          delete: {
            args: Prisma.PlaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          update: {
            args: Prisma.PlaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          deleteMany: {
            args: Prisma.PlaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacePayload>
          }
          aggregate: {
            args: Prisma.PlaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlace>
          }
          groupBy: {
            args: Prisma.PlaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaceCountArgs<ExtArgs>
            result: $Utils.Optional<PlaceCountAggregateOutputType> | number
          }
        }
      }
      Well: {
        payload: Prisma.$WellPayload<ExtArgs>
        fields: Prisma.WellFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WellFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WellFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>
          }
          findFirst: {
            args: Prisma.WellFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WellFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>
          }
          findMany: {
            args: Prisma.WellFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>[]
          }
          create: {
            args: Prisma.WellCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>
          }
          createMany: {
            args: Prisma.WellCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WellCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>[]
          }
          delete: {
            args: Prisma.WellDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>
          }
          update: {
            args: Prisma.WellUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>
          }
          deleteMany: {
            args: Prisma.WellDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WellUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WellUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WellPayload>
          }
          aggregate: {
            args: Prisma.WellAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWell>
          }
          groupBy: {
            args: Prisma.WellGroupByArgs<ExtArgs>
            result: $Utils.Optional<WellGroupByOutputType>[]
          }
          count: {
            args: Prisma.WellCountArgs<ExtArgs>
            result: $Utils.Optional<WellCountAggregateOutputType> | number
          }
        }
      }
      Record: {
        payload: Prisma.$RecordPayload<ExtArgs>
        fields: Prisma.RecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          findFirst: {
            args: Prisma.RecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          findMany: {
            args: Prisma.RecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>[]
          }
          create: {
            args: Prisma.RecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          createMany: {
            args: Prisma.RecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>[]
          }
          delete: {
            args: Prisma.RecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          update: {
            args: Prisma.RecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          deleteMany: {
            args: Prisma.RecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordPayload>
          }
          aggregate: {
            args: Prisma.RecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecord>
          }
          groupBy: {
            args: Prisma.RecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecordCountArgs<ExtArgs>
            result: $Utils.Optional<RecordCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Condition: {
        payload: Prisma.$ConditionPayload<ExtArgs>
        fields: Prisma.ConditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConditionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConditionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          findFirst: {
            args: Prisma.ConditionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConditionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          findMany: {
            args: Prisma.ConditionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>[]
          }
          create: {
            args: Prisma.ConditionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          createMany: {
            args: Prisma.ConditionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConditionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>[]
          }
          delete: {
            args: Prisma.ConditionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          update: {
            args: Prisma.ConditionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          deleteMany: {
            args: Prisma.ConditionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConditionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConditionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          aggregate: {
            args: Prisma.ConditionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCondition>
          }
          groupBy: {
            args: Prisma.ConditionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConditionCountArgs<ExtArgs>
            result: $Utils.Optional<ConditionCountAggregateOutputType> | number
          }
        }
      }
      RuleCondition: {
        payload: Prisma.$RuleConditionPayload<ExtArgs>
        fields: Prisma.RuleConditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RuleConditionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RuleConditionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>
          }
          findFirst: {
            args: Prisma.RuleConditionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RuleConditionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>
          }
          findMany: {
            args: Prisma.RuleConditionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>[]
          }
          create: {
            args: Prisma.RuleConditionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>
          }
          createMany: {
            args: Prisma.RuleConditionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RuleConditionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>[]
          }
          delete: {
            args: Prisma.RuleConditionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>
          }
          update: {
            args: Prisma.RuleConditionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>
          }
          deleteMany: {
            args: Prisma.RuleConditionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RuleConditionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RuleConditionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RuleConditionPayload>
          }
          aggregate: {
            args: Prisma.RuleConditionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRuleCondition>
          }
          groupBy: {
            args: Prisma.RuleConditionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RuleConditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RuleConditionCountArgs<ExtArgs>
            result: $Utils.Optional<RuleConditionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    Employee: number
    Place: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Employee?: boolean | CompanyCountOutputTypeCountEmployeeArgs
    Place?: boolean | CompanyCountOutputTypeCountPlaceArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountEmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountPlaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaceWhereInput
  }


  /**
   * Count Type PlaceCountOutputType
   */

  export type PlaceCountOutputType = {
    Well: number
  }

  export type PlaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Well?: boolean | PlaceCountOutputTypeCountWellArgs
  }

  // Custom InputTypes
  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaceCountOutputType
     */
    select?: PlaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlaceCountOutputType without action
   */
  export type PlaceCountOutputTypeCountWellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WellWhereInput
  }


  /**
   * Count Type WellCountOutputType
   */

  export type WellCountOutputType = {
    Condition: number
    Record: number
    Notification: number
  }

  export type WellCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Condition?: boolean | WellCountOutputTypeCountConditionArgs
    Record?: boolean | WellCountOutputTypeCountRecordArgs
    Notification?: boolean | WellCountOutputTypeCountNotificationArgs
  }

  // Custom InputTypes
  /**
   * WellCountOutputType without action
   */
  export type WellCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WellCountOutputType
     */
    select?: WellCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WellCountOutputType without action
   */
  export type WellCountOutputTypeCountConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConditionWhereInput
  }

  /**
   * WellCountOutputType without action
   */
  export type WellCountOutputTypeCountRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordWhereInput
  }

  /**
   * WellCountOutputType without action
   */
  export type WellCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type ConditionCountOutputType
   */

  export type ConditionCountOutputType = {
    rules: number
  }

  export type ConditionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rules?: boolean | ConditionCountOutputTypeCountRulesArgs
  }

  // Custom InputTypes
  /**
   * ConditionCountOutputType without action
   */
  export type ConditionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConditionCountOutputType
     */
    select?: ConditionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConditionCountOutputType without action
   */
  export type ConditionCountOutputTypeCountRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RuleConditionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    address: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    address: string | null
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    Employee?: boolean | Company$EmployeeArgs<ExtArgs>
    Place?: boolean | Company$PlaceArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Employee?: boolean | Company$EmployeeArgs<ExtArgs>
    Place?: boolean | Company$PlaceArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      Employee: Prisma.$EmployeePayload<ExtArgs>[]
      Place: Prisma.$PlacePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Employee<T extends Company$EmployeeArgs<ExtArgs> = {}>(args?: Subset<T, Company$EmployeeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany"> | Null>
    Place<T extends Company$PlaceArgs<ExtArgs> = {}>(args?: Subset<T, Company$PlaceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.Employee
   */
  export type Company$EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Company.Place
   */
  export type Company$PlaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    where?: PlaceWhereInput
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    cursor?: PlaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    role: $Enums.Role | null
    password: string | null
    companyId: string | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    role: $Enums.Role | null
    password: string | null
    companyId: string | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    name: number
    email: number
    role: number
    password: number
    companyId: number
    _all: number
  }


  export type EmployeeMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    role?: true
    password?: true
    companyId?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    role?: true
    password?: true
    companyId?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    role?: true
    password?: true
    companyId?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    name: string
    email: string
    role: $Enums.Role
    password: string
    companyId: string | null
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    role?: boolean
    password?: boolean
    companyId?: boolean
    company?: boolean | Employee$companyArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    role?: boolean
    password?: boolean
    companyId?: boolean
    company?: boolean | Employee$companyArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    role?: boolean
    password?: boolean
    companyId?: boolean
  }

  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Employee$companyArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Employee$companyArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      role: $Enums.Role
      password: string
      companyId: string | null
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends Employee$companyArgs<ExtArgs> = {}>(args?: Subset<T, Employee$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly role: FieldRef<"Employee", 'Role'>
    readonly password: FieldRef<"Employee", 'String'>
    readonly companyId: FieldRef<"Employee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee.company
   */
  export type Employee$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Place
   */

  export type AggregatePlace = {
    _count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
  }

  export type PlaceAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type PlaceSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type PlaceMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    companyId: string | null
  }

  export type PlaceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    companyId: string | null
  }

  export type PlaceCountAggregateOutputType = {
    id: number
    name: number
    address: number
    latitude: number
    longitude: number
    companyId: number
    _all: number
  }


  export type PlaceAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type PlaceSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type PlaceMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    companyId?: true
  }

  export type PlaceMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    companyId?: true
  }

  export type PlaceCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    companyId?: true
    _all?: true
  }

  export type PlaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Place to aggregate.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Places
    **/
    _count?: true | PlaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaceMaxAggregateInputType
  }

  export type GetPlaceAggregateType<T extends PlaceAggregateArgs> = {
        [P in keyof T & keyof AggregatePlace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlace[P]>
      : GetScalarType<T[P], AggregatePlace[P]>
  }




  export type PlaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaceWhereInput
    orderBy?: PlaceOrderByWithAggregationInput | PlaceOrderByWithAggregationInput[]
    by: PlaceScalarFieldEnum[] | PlaceScalarFieldEnum
    having?: PlaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaceCountAggregateInputType | true
    _avg?: PlaceAvgAggregateInputType
    _sum?: PlaceSumAggregateInputType
    _min?: PlaceMinAggregateInputType
    _max?: PlaceMaxAggregateInputType
  }

  export type PlaceGroupByOutputType = {
    id: string
    name: string
    address: string | null
    latitude: number | null
    longitude: number | null
    companyId: string
    _count: PlaceCountAggregateOutputType | null
    _avg: PlaceAvgAggregateOutputType | null
    _sum: PlaceSumAggregateOutputType | null
    _min: PlaceMinAggregateOutputType | null
    _max: PlaceMaxAggregateOutputType | null
  }

  type GetPlaceGroupByPayload<T extends PlaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaceGroupByOutputType[P]>
            : GetScalarType<T[P], PlaceGroupByOutputType[P]>
        }
      >
    >


  export type PlaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    Well?: boolean | Place$WellArgs<ExtArgs>
    _count?: boolean | PlaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["place"]>

  export type PlaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["place"]>

  export type PlaceSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    companyId?: boolean
  }

  export type PlaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    Well?: boolean | Place$WellArgs<ExtArgs>
    _count?: boolean | PlaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $PlacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Place"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      Well: Prisma.$WellPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      latitude: number | null
      longitude: number | null
      companyId: string
    }, ExtArgs["result"]["place"]>
    composites: {}
  }

  type PlaceGetPayload<S extends boolean | null | undefined | PlaceDefaultArgs> = $Result.GetResult<Prisma.$PlacePayload, S>

  type PlaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlaceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlaceCountAggregateInputType | true
    }

  export interface PlaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Place'], meta: { name: 'Place' } }
    /**
     * Find zero or one Place that matches the filter.
     * @param {PlaceFindUniqueArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlaceFindUniqueArgs>(args: SelectSubset<T, PlaceFindUniqueArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Place that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlaceFindUniqueOrThrowArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlaceFindUniqueOrThrowArgs>(args: SelectSubset<T, PlaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Place that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceFindFirstArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlaceFindFirstArgs>(args?: SelectSubset<T, PlaceFindFirstArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Place that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceFindFirstOrThrowArgs} args - Arguments to find a Place
     * @example
     * // Get one Place
     * const place = await prisma.place.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlaceFindFirstOrThrowArgs>(args?: SelectSubset<T, PlaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Places that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Places
     * const places = await prisma.place.findMany()
     * 
     * // Get first 10 Places
     * const places = await prisma.place.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const placeWithIdOnly = await prisma.place.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlaceFindManyArgs>(args?: SelectSubset<T, PlaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Place.
     * @param {PlaceCreateArgs} args - Arguments to create a Place.
     * @example
     * // Create one Place
     * const Place = await prisma.place.create({
     *   data: {
     *     // ... data to create a Place
     *   }
     * })
     * 
     */
    create<T extends PlaceCreateArgs>(args: SelectSubset<T, PlaceCreateArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Places.
     * @param {PlaceCreateManyArgs} args - Arguments to create many Places.
     * @example
     * // Create many Places
     * const place = await prisma.place.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlaceCreateManyArgs>(args?: SelectSubset<T, PlaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Places and returns the data saved in the database.
     * @param {PlaceCreateManyAndReturnArgs} args - Arguments to create many Places.
     * @example
     * // Create many Places
     * const place = await prisma.place.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Places and only return the `id`
     * const placeWithIdOnly = await prisma.place.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlaceCreateManyAndReturnArgs>(args?: SelectSubset<T, PlaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Place.
     * @param {PlaceDeleteArgs} args - Arguments to delete one Place.
     * @example
     * // Delete one Place
     * const Place = await prisma.place.delete({
     *   where: {
     *     // ... filter to delete one Place
     *   }
     * })
     * 
     */
    delete<T extends PlaceDeleteArgs>(args: SelectSubset<T, PlaceDeleteArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Place.
     * @param {PlaceUpdateArgs} args - Arguments to update one Place.
     * @example
     * // Update one Place
     * const place = await prisma.place.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlaceUpdateArgs>(args: SelectSubset<T, PlaceUpdateArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Places.
     * @param {PlaceDeleteManyArgs} args - Arguments to filter Places to delete.
     * @example
     * // Delete a few Places
     * const { count } = await prisma.place.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlaceDeleteManyArgs>(args?: SelectSubset<T, PlaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Places
     * const place = await prisma.place.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlaceUpdateManyArgs>(args: SelectSubset<T, PlaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Place.
     * @param {PlaceUpsertArgs} args - Arguments to update or create a Place.
     * @example
     * // Update or create a Place
     * const place = await prisma.place.upsert({
     *   create: {
     *     // ... data to create a Place
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Place we want to update
     *   }
     * })
     */
    upsert<T extends PlaceUpsertArgs>(args: SelectSubset<T, PlaceUpsertArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Places.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceCountArgs} args - Arguments to filter Places to count.
     * @example
     * // Count the number of Places
     * const count = await prisma.place.count({
     *   where: {
     *     // ... the filter for the Places we want to count
     *   }
     * })
    **/
    count<T extends PlaceCountArgs>(
      args?: Subset<T, PlaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaceAggregateArgs>(args: Subset<T, PlaceAggregateArgs>): Prisma.PrismaPromise<GetPlaceAggregateType<T>>

    /**
     * Group by Place.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaceGroupByArgs['orderBy'] }
        : { orderBy?: PlaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Place model
   */
  readonly fields: PlaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Place.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Well<T extends Place$WellArgs<ExtArgs> = {}>(args?: Subset<T, Place$WellArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Place model
   */ 
  interface PlaceFieldRefs {
    readonly id: FieldRef<"Place", 'String'>
    readonly name: FieldRef<"Place", 'String'>
    readonly address: FieldRef<"Place", 'String'>
    readonly latitude: FieldRef<"Place", 'Float'>
    readonly longitude: FieldRef<"Place", 'Float'>
    readonly companyId: FieldRef<"Place", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Place findUnique
   */
  export type PlaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place findUniqueOrThrow
   */
  export type PlaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place findFirst
   */
  export type PlaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Places.
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Places.
     */
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * Place findFirstOrThrow
   */
  export type PlaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Place to fetch.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Places.
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Places.
     */
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * Place findMany
   */
  export type PlaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter, which Places to fetch.
     */
    where?: PlaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Places to fetch.
     */
    orderBy?: PlaceOrderByWithRelationInput | PlaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Places.
     */
    cursor?: PlaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Places from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Places.
     */
    skip?: number
    distinct?: PlaceScalarFieldEnum | PlaceScalarFieldEnum[]
  }

  /**
   * Place create
   */
  export type PlaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Place.
     */
    data: XOR<PlaceCreateInput, PlaceUncheckedCreateInput>
  }

  /**
   * Place createMany
   */
  export type PlaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Places.
     */
    data: PlaceCreateManyInput | PlaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Place createManyAndReturn
   */
  export type PlaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Places.
     */
    data: PlaceCreateManyInput | PlaceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Place update
   */
  export type PlaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Place.
     */
    data: XOR<PlaceUpdateInput, PlaceUncheckedUpdateInput>
    /**
     * Choose, which Place to update.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place updateMany
   */
  export type PlaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Places.
     */
    data: XOR<PlaceUpdateManyMutationInput, PlaceUncheckedUpdateManyInput>
    /**
     * Filter which Places to update
     */
    where?: PlaceWhereInput
  }

  /**
   * Place upsert
   */
  export type PlaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Place to update in case it exists.
     */
    where: PlaceWhereUniqueInput
    /**
     * In case the Place found by the `where` argument doesn't exist, create a new Place with this data.
     */
    create: XOR<PlaceCreateInput, PlaceUncheckedCreateInput>
    /**
     * In case the Place was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaceUpdateInput, PlaceUncheckedUpdateInput>
  }

  /**
   * Place delete
   */
  export type PlaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
    /**
     * Filter which Place to delete.
     */
    where: PlaceWhereUniqueInput
  }

  /**
   * Place deleteMany
   */
  export type PlaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Places to delete
     */
    where?: PlaceWhereInput
  }

  /**
   * Place.Well
   */
  export type Place$WellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    where?: WellWhereInput
    orderBy?: WellOrderByWithRelationInput | WellOrderByWithRelationInput[]
    cursor?: WellWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WellScalarFieldEnum | WellScalarFieldEnum[]
  }

  /**
   * Place without action
   */
  export type PlaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
  }


  /**
   * Model Well
   */

  export type AggregateWell = {
    _count: WellCountAggregateOutputType | null
    _avg: WellAvgAggregateOutputType | null
    _sum: WellSumAggregateOutputType | null
    _min: WellMinAggregateOutputType | null
    _max: WellMaxAggregateOutputType | null
  }

  export type WellAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type WellSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type WellMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    topic: string | null
    placeId: string | null
  }

  export type WellMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    topic: string | null
    placeId: string | null
  }

  export type WellCountAggregateOutputType = {
    id: number
    name: number
    address: number
    latitude: number
    longitude: number
    topic: number
    placeId: number
    _all: number
  }


  export type WellAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type WellSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type WellMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    topic?: true
    placeId?: true
  }

  export type WellMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    topic?: true
    placeId?: true
  }

  export type WellCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    topic?: true
    placeId?: true
    _all?: true
  }

  export type WellAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Well to aggregate.
     */
    where?: WellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wells to fetch.
     */
    orderBy?: WellOrderByWithRelationInput | WellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wells
    **/
    _count?: true | WellCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WellAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WellSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WellMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WellMaxAggregateInputType
  }

  export type GetWellAggregateType<T extends WellAggregateArgs> = {
        [P in keyof T & keyof AggregateWell]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWell[P]>
      : GetScalarType<T[P], AggregateWell[P]>
  }




  export type WellGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WellWhereInput
    orderBy?: WellOrderByWithAggregationInput | WellOrderByWithAggregationInput[]
    by: WellScalarFieldEnum[] | WellScalarFieldEnum
    having?: WellScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WellCountAggregateInputType | true
    _avg?: WellAvgAggregateInputType
    _sum?: WellSumAggregateInputType
    _min?: WellMinAggregateInputType
    _max?: WellMaxAggregateInputType
  }

  export type WellGroupByOutputType = {
    id: string
    name: string
    address: string | null
    latitude: number | null
    longitude: number | null
    topic: string
    placeId: string
    _count: WellCountAggregateOutputType | null
    _avg: WellAvgAggregateOutputType | null
    _sum: WellSumAggregateOutputType | null
    _min: WellMinAggregateOutputType | null
    _max: WellMaxAggregateOutputType | null
  }

  type GetWellGroupByPayload<T extends WellGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WellGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WellGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WellGroupByOutputType[P]>
            : GetScalarType<T[P], WellGroupByOutputType[P]>
        }
      >
    >


  export type WellSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    topic?: boolean
    placeId?: boolean
    place?: boolean | PlaceDefaultArgs<ExtArgs>
    Condition?: boolean | Well$ConditionArgs<ExtArgs>
    Record?: boolean | Well$RecordArgs<ExtArgs>
    Notification?: boolean | Well$NotificationArgs<ExtArgs>
    _count?: boolean | WellCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["well"]>

  export type WellSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    topic?: boolean
    placeId?: boolean
    place?: boolean | PlaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["well"]>

  export type WellSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    topic?: boolean
    placeId?: boolean
  }

  export type WellInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place?: boolean | PlaceDefaultArgs<ExtArgs>
    Condition?: boolean | Well$ConditionArgs<ExtArgs>
    Record?: boolean | Well$RecordArgs<ExtArgs>
    Notification?: boolean | Well$NotificationArgs<ExtArgs>
    _count?: boolean | WellCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WellIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    place?: boolean | PlaceDefaultArgs<ExtArgs>
  }

  export type $WellPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Well"
    objects: {
      place: Prisma.$PlacePayload<ExtArgs>
      Condition: Prisma.$ConditionPayload<ExtArgs>[]
      Record: Prisma.$RecordPayload<ExtArgs>[]
      Notification: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      latitude: number | null
      longitude: number | null
      topic: string
      placeId: string
    }, ExtArgs["result"]["well"]>
    composites: {}
  }

  type WellGetPayload<S extends boolean | null | undefined | WellDefaultArgs> = $Result.GetResult<Prisma.$WellPayload, S>

  type WellCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WellFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WellCountAggregateInputType | true
    }

  export interface WellDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Well'], meta: { name: 'Well' } }
    /**
     * Find zero or one Well that matches the filter.
     * @param {WellFindUniqueArgs} args - Arguments to find a Well
     * @example
     * // Get one Well
     * const well = await prisma.well.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WellFindUniqueArgs>(args: SelectSubset<T, WellFindUniqueArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Well that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WellFindUniqueOrThrowArgs} args - Arguments to find a Well
     * @example
     * // Get one Well
     * const well = await prisma.well.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WellFindUniqueOrThrowArgs>(args: SelectSubset<T, WellFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Well that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WellFindFirstArgs} args - Arguments to find a Well
     * @example
     * // Get one Well
     * const well = await prisma.well.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WellFindFirstArgs>(args?: SelectSubset<T, WellFindFirstArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Well that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WellFindFirstOrThrowArgs} args - Arguments to find a Well
     * @example
     * // Get one Well
     * const well = await prisma.well.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WellFindFirstOrThrowArgs>(args?: SelectSubset<T, WellFindFirstOrThrowArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Wells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WellFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wells
     * const wells = await prisma.well.findMany()
     * 
     * // Get first 10 Wells
     * const wells = await prisma.well.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wellWithIdOnly = await prisma.well.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WellFindManyArgs>(args?: SelectSubset<T, WellFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Well.
     * @param {WellCreateArgs} args - Arguments to create a Well.
     * @example
     * // Create one Well
     * const Well = await prisma.well.create({
     *   data: {
     *     // ... data to create a Well
     *   }
     * })
     * 
     */
    create<T extends WellCreateArgs>(args: SelectSubset<T, WellCreateArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Wells.
     * @param {WellCreateManyArgs} args - Arguments to create many Wells.
     * @example
     * // Create many Wells
     * const well = await prisma.well.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WellCreateManyArgs>(args?: SelectSubset<T, WellCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wells and returns the data saved in the database.
     * @param {WellCreateManyAndReturnArgs} args - Arguments to create many Wells.
     * @example
     * // Create many Wells
     * const well = await prisma.well.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wells and only return the `id`
     * const wellWithIdOnly = await prisma.well.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WellCreateManyAndReturnArgs>(args?: SelectSubset<T, WellCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Well.
     * @param {WellDeleteArgs} args - Arguments to delete one Well.
     * @example
     * // Delete one Well
     * const Well = await prisma.well.delete({
     *   where: {
     *     // ... filter to delete one Well
     *   }
     * })
     * 
     */
    delete<T extends WellDeleteArgs>(args: SelectSubset<T, WellDeleteArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Well.
     * @param {WellUpdateArgs} args - Arguments to update one Well.
     * @example
     * // Update one Well
     * const well = await prisma.well.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WellUpdateArgs>(args: SelectSubset<T, WellUpdateArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Wells.
     * @param {WellDeleteManyArgs} args - Arguments to filter Wells to delete.
     * @example
     * // Delete a few Wells
     * const { count } = await prisma.well.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WellDeleteManyArgs>(args?: SelectSubset<T, WellDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WellUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wells
     * const well = await prisma.well.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WellUpdateManyArgs>(args: SelectSubset<T, WellUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Well.
     * @param {WellUpsertArgs} args - Arguments to update or create a Well.
     * @example
     * // Update or create a Well
     * const well = await prisma.well.upsert({
     *   create: {
     *     // ... data to create a Well
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Well we want to update
     *   }
     * })
     */
    upsert<T extends WellUpsertArgs>(args: SelectSubset<T, WellUpsertArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Wells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WellCountArgs} args - Arguments to filter Wells to count.
     * @example
     * // Count the number of Wells
     * const count = await prisma.well.count({
     *   where: {
     *     // ... the filter for the Wells we want to count
     *   }
     * })
    **/
    count<T extends WellCountArgs>(
      args?: Subset<T, WellCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WellCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Well.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WellAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WellAggregateArgs>(args: Subset<T, WellAggregateArgs>): Prisma.PrismaPromise<GetWellAggregateType<T>>

    /**
     * Group by Well.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WellGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WellGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WellGroupByArgs['orderBy'] }
        : { orderBy?: WellGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WellGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWellGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Well model
   */
  readonly fields: WellFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Well.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WellClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    place<T extends PlaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaceDefaultArgs<ExtArgs>>): Prisma__PlaceClient<$Result.GetResult<Prisma.$PlacePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Condition<T extends Well$ConditionArgs<ExtArgs> = {}>(args?: Subset<T, Well$ConditionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "findMany"> | Null>
    Record<T extends Well$RecordArgs<ExtArgs> = {}>(args?: Subset<T, Well$RecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findMany"> | Null>
    Notification<T extends Well$NotificationArgs<ExtArgs> = {}>(args?: Subset<T, Well$NotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Well model
   */ 
  interface WellFieldRefs {
    readonly id: FieldRef<"Well", 'String'>
    readonly name: FieldRef<"Well", 'String'>
    readonly address: FieldRef<"Well", 'String'>
    readonly latitude: FieldRef<"Well", 'Float'>
    readonly longitude: FieldRef<"Well", 'Float'>
    readonly topic: FieldRef<"Well", 'String'>
    readonly placeId: FieldRef<"Well", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Well findUnique
   */
  export type WellFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * Filter, which Well to fetch.
     */
    where: WellWhereUniqueInput
  }

  /**
   * Well findUniqueOrThrow
   */
  export type WellFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * Filter, which Well to fetch.
     */
    where: WellWhereUniqueInput
  }

  /**
   * Well findFirst
   */
  export type WellFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * Filter, which Well to fetch.
     */
    where?: WellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wells to fetch.
     */
    orderBy?: WellOrderByWithRelationInput | WellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wells.
     */
    cursor?: WellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wells.
     */
    distinct?: WellScalarFieldEnum | WellScalarFieldEnum[]
  }

  /**
   * Well findFirstOrThrow
   */
  export type WellFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * Filter, which Well to fetch.
     */
    where?: WellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wells to fetch.
     */
    orderBy?: WellOrderByWithRelationInput | WellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wells.
     */
    cursor?: WellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wells.
     */
    distinct?: WellScalarFieldEnum | WellScalarFieldEnum[]
  }

  /**
   * Well findMany
   */
  export type WellFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * Filter, which Wells to fetch.
     */
    where?: WellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wells to fetch.
     */
    orderBy?: WellOrderByWithRelationInput | WellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wells.
     */
    cursor?: WellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wells.
     */
    skip?: number
    distinct?: WellScalarFieldEnum | WellScalarFieldEnum[]
  }

  /**
   * Well create
   */
  export type WellCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * The data needed to create a Well.
     */
    data: XOR<WellCreateInput, WellUncheckedCreateInput>
  }

  /**
   * Well createMany
   */
  export type WellCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wells.
     */
    data: WellCreateManyInput | WellCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Well createManyAndReturn
   */
  export type WellCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Wells.
     */
    data: WellCreateManyInput | WellCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Well update
   */
  export type WellUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * The data needed to update a Well.
     */
    data: XOR<WellUpdateInput, WellUncheckedUpdateInput>
    /**
     * Choose, which Well to update.
     */
    where: WellWhereUniqueInput
  }

  /**
   * Well updateMany
   */
  export type WellUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wells.
     */
    data: XOR<WellUpdateManyMutationInput, WellUncheckedUpdateManyInput>
    /**
     * Filter which Wells to update
     */
    where?: WellWhereInput
  }

  /**
   * Well upsert
   */
  export type WellUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * The filter to search for the Well to update in case it exists.
     */
    where: WellWhereUniqueInput
    /**
     * In case the Well found by the `where` argument doesn't exist, create a new Well with this data.
     */
    create: XOR<WellCreateInput, WellUncheckedCreateInput>
    /**
     * In case the Well was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WellUpdateInput, WellUncheckedUpdateInput>
  }

  /**
   * Well delete
   */
  export type WellDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
    /**
     * Filter which Well to delete.
     */
    where: WellWhereUniqueInput
  }

  /**
   * Well deleteMany
   */
  export type WellDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wells to delete
     */
    where?: WellWhereInput
  }

  /**
   * Well.Condition
   */
  export type Well$ConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    where?: ConditionWhereInput
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    cursor?: ConditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }

  /**
   * Well.Record
   */
  export type Well$RecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    where?: RecordWhereInput
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    cursor?: RecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Well.Notification
   */
  export type Well$NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Well without action
   */
  export type WellDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Well
     */
    select?: WellSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WellInclude<ExtArgs> | null
  }


  /**
   * Model Record
   */

  export type AggregateRecord = {
    _count: RecordCountAggregateOutputType | null
    _min: RecordMinAggregateOutputType | null
    _max: RecordMaxAggregateOutputType | null
  }

  export type RecordMinAggregateOutputType = {
    id: string | null
    dt: Date | null
    wid: string | null
    sid: string | null
    recid: string | null
    seqid: string | null
    date: string | null
    time: string | null
    actcode: string | null
    blockpos: string | null
    bitdepth: string | null
    deptbitv: string | null
    md: string | null
    tvd: string | null
    logdepth: string | null
    speedup: string | null
    speeddown: string | null
    rop: string | null
    ropi: string | null
    timeropi: string | null
    hklda: string | null
    hkldx: string | null
    hkldpu: string | null
    hkldso: string | null
    woba: string | null
    wobx: string | null
    torqa: string | null
    torqx: string | null
    torqp: string | null
    torqb: string | null
    rpm: string | null
    rpmm: string | null
    totrpm: string | null
    stppress: string | null
    csgpress: string | null
    mudflowine: string | null
    mudflowin: string | null
    mudflowoute: string | null
    mudflowout: string | null
    mudflowoutp: string | null
    diffflow: string | null
    klflow: string | null
    muddensin: string | null
    muddensout: string | null
    mudtempin: string | null
    mudtempout: string | null
    mudcondin: string | null
    mudcondout: string | null
    mfiann: string | null
    mfianne: string | null
    surfrev: string | null
    drillrev: string | null
    reamrev: string | null
    circrev: string | null
    totrev: string | null
    drilltime: string | null
    reamtime: string | null
    circtime: string | null
    pumptime: string | null
    rotatingtime: string | null
    drilldist: string | null
    stroke1: string | null
    stroke2: string | null
    stroke3: string | null
    stroke4: string | null
    totstks: string | null
    totstksa: string | null
    spm1: string | null
    spm2: string | null
    spm3: string | null
    spm4: string | null
    spm5: string | null
    totspm: string | null
    totspma: string | null
    totpumpede: string | null
    totpumpvol: string | null
    totpumpvolan: string | null
    totpumpedea: string | null
    tankvoltot: string | null
    tankvolact: string | null
    tankvoltt: string | null
    tankvolchgtot: string | null
    tankvolchgact: string | null
    tankvolchgtt: string | null
    plbit: string | null
    plstr: string | null
    plann: string | null
    plsurf: string | null
    plmtr: string | null
    plmwd: string | null
    bithydpwr: string | null
    bithydpwra: string | null
    jif: string | null
    jetvel: string | null
    annveln: string | null
    annvelx: string | null
    ecddpt: string | null
    ecdbit: string | null
    ecdshoe: string | null
    phydpwr: string | null
    deptretm: string | null
    lagstks: string | null
    lagtime: string | null
    dnhstroke: string | null
    dnhtime: string | null
    mse: string | null
    doc: string | null
    gas: string | null
    dstrength: string | null
    mseds: string | null
    clcontent: string | null
    in_slips: string | null
    bht: string | null
    scfm: string | null
    airflin: string | null
    airfline: string | null
    airfloutp: string | null
    airflout: string | null
    airpress: string | null
    airtemp: string | null
    whp: string | null
    wht: string | null
    h2s1: string | null
    h2s2: string | null
    h2s3: string | null
    h2s4: string | null
    co21: string | null
    co22: string | null
    co23: string | null
    co24: string | null
    bitsize: string | null
    foamrate: string | null
    spare_1: string | null
    spare_2: string | null
    spare_3: string | null
    spare_4: string | null
    spare_5: string | null
    spare_6: string | null
    spare_7: string | null
    spare_8: string | null
    spare_9: string | null
    spare_10: string | null
    spare_50: string | null
    spare_51: string | null
    spare_52: string | null
    spare_53: string | null
    spare_54: string | null
    spare_55: string | null
    spare_56: string | null
    label: string | null
    posisiy: string | null
    tipenote: string | null
    idnote: string | null
    wellId: string | null
  }

  export type RecordMaxAggregateOutputType = {
    id: string | null
    dt: Date | null
    wid: string | null
    sid: string | null
    recid: string | null
    seqid: string | null
    date: string | null
    time: string | null
    actcode: string | null
    blockpos: string | null
    bitdepth: string | null
    deptbitv: string | null
    md: string | null
    tvd: string | null
    logdepth: string | null
    speedup: string | null
    speeddown: string | null
    rop: string | null
    ropi: string | null
    timeropi: string | null
    hklda: string | null
    hkldx: string | null
    hkldpu: string | null
    hkldso: string | null
    woba: string | null
    wobx: string | null
    torqa: string | null
    torqx: string | null
    torqp: string | null
    torqb: string | null
    rpm: string | null
    rpmm: string | null
    totrpm: string | null
    stppress: string | null
    csgpress: string | null
    mudflowine: string | null
    mudflowin: string | null
    mudflowoute: string | null
    mudflowout: string | null
    mudflowoutp: string | null
    diffflow: string | null
    klflow: string | null
    muddensin: string | null
    muddensout: string | null
    mudtempin: string | null
    mudtempout: string | null
    mudcondin: string | null
    mudcondout: string | null
    mfiann: string | null
    mfianne: string | null
    surfrev: string | null
    drillrev: string | null
    reamrev: string | null
    circrev: string | null
    totrev: string | null
    drilltime: string | null
    reamtime: string | null
    circtime: string | null
    pumptime: string | null
    rotatingtime: string | null
    drilldist: string | null
    stroke1: string | null
    stroke2: string | null
    stroke3: string | null
    stroke4: string | null
    totstks: string | null
    totstksa: string | null
    spm1: string | null
    spm2: string | null
    spm3: string | null
    spm4: string | null
    spm5: string | null
    totspm: string | null
    totspma: string | null
    totpumpede: string | null
    totpumpvol: string | null
    totpumpvolan: string | null
    totpumpedea: string | null
    tankvoltot: string | null
    tankvolact: string | null
    tankvoltt: string | null
    tankvolchgtot: string | null
    tankvolchgact: string | null
    tankvolchgtt: string | null
    plbit: string | null
    plstr: string | null
    plann: string | null
    plsurf: string | null
    plmtr: string | null
    plmwd: string | null
    bithydpwr: string | null
    bithydpwra: string | null
    jif: string | null
    jetvel: string | null
    annveln: string | null
    annvelx: string | null
    ecddpt: string | null
    ecdbit: string | null
    ecdshoe: string | null
    phydpwr: string | null
    deptretm: string | null
    lagstks: string | null
    lagtime: string | null
    dnhstroke: string | null
    dnhtime: string | null
    mse: string | null
    doc: string | null
    gas: string | null
    dstrength: string | null
    mseds: string | null
    clcontent: string | null
    in_slips: string | null
    bht: string | null
    scfm: string | null
    airflin: string | null
    airfline: string | null
    airfloutp: string | null
    airflout: string | null
    airpress: string | null
    airtemp: string | null
    whp: string | null
    wht: string | null
    h2s1: string | null
    h2s2: string | null
    h2s3: string | null
    h2s4: string | null
    co21: string | null
    co22: string | null
    co23: string | null
    co24: string | null
    bitsize: string | null
    foamrate: string | null
    spare_1: string | null
    spare_2: string | null
    spare_3: string | null
    spare_4: string | null
    spare_5: string | null
    spare_6: string | null
    spare_7: string | null
    spare_8: string | null
    spare_9: string | null
    spare_10: string | null
    spare_50: string | null
    spare_51: string | null
    spare_52: string | null
    spare_53: string | null
    spare_54: string | null
    spare_55: string | null
    spare_56: string | null
    label: string | null
    posisiy: string | null
    tipenote: string | null
    idnote: string | null
    wellId: string | null
  }

  export type RecordCountAggregateOutputType = {
    id: number
    dt: number
    wid: number
    sid: number
    recid: number
    seqid: number
    date: number
    time: number
    actcode: number
    blockpos: number
    bitdepth: number
    deptbitv: number
    md: number
    tvd: number
    logdepth: number
    speedup: number
    speeddown: number
    rop: number
    ropi: number
    timeropi: number
    hklda: number
    hkldx: number
    hkldpu: number
    hkldso: number
    woba: number
    wobx: number
    torqa: number
    torqx: number
    torqp: number
    torqb: number
    rpm: number
    rpmm: number
    totrpm: number
    stppress: number
    csgpress: number
    mudflowine: number
    mudflowin: number
    mudflowoute: number
    mudflowout: number
    mudflowoutp: number
    diffflow: number
    klflow: number
    muddensin: number
    muddensout: number
    mudtempin: number
    mudtempout: number
    mudcondin: number
    mudcondout: number
    mfiann: number
    mfianne: number
    surfrev: number
    drillrev: number
    reamrev: number
    circrev: number
    totrev: number
    drilltime: number
    reamtime: number
    circtime: number
    pumptime: number
    rotatingtime: number
    drilldist: number
    stroke1: number
    stroke2: number
    stroke3: number
    stroke4: number
    totstks: number
    totstksa: number
    spm1: number
    spm2: number
    spm3: number
    spm4: number
    spm5: number
    totspm: number
    totspma: number
    totpumpede: number
    totpumpvol: number
    totpumpvolan: number
    totpumpedea: number
    tankvoltot: number
    tankvolact: number
    tankvoltt: number
    tankvolchgtot: number
    tankvolchgact: number
    tankvolchgtt: number
    plbit: number
    plstr: number
    plann: number
    plsurf: number
    plmtr: number
    plmwd: number
    bithydpwr: number
    bithydpwra: number
    jif: number
    jetvel: number
    annveln: number
    annvelx: number
    ecddpt: number
    ecdbit: number
    ecdshoe: number
    phydpwr: number
    deptretm: number
    lagstks: number
    lagtime: number
    dnhstroke: number
    dnhtime: number
    mse: number
    doc: number
    gas: number
    dstrength: number
    mseds: number
    clcontent: number
    in_slips: number
    bht: number
    scfm: number
    airflin: number
    airfline: number
    airfloutp: number
    airflout: number
    airpress: number
    airtemp: number
    whp: number
    wht: number
    h2s1: number
    h2s2: number
    h2s3: number
    h2s4: number
    co21: number
    co22: number
    co23: number
    co24: number
    bitsize: number
    foamrate: number
    spare_1: number
    spare_2: number
    spare_3: number
    spare_4: number
    spare_5: number
    spare_6: number
    spare_7: number
    spare_8: number
    spare_9: number
    spare_10: number
    spare_50: number
    spare_51: number
    spare_52: number
    spare_53: number
    spare_54: number
    spare_55: number
    spare_56: number
    label: number
    posisiy: number
    tipenote: number
    idnote: number
    wellId: number
    _all: number
  }


  export type RecordMinAggregateInputType = {
    id?: true
    dt?: true
    wid?: true
    sid?: true
    recid?: true
    seqid?: true
    date?: true
    time?: true
    actcode?: true
    blockpos?: true
    bitdepth?: true
    deptbitv?: true
    md?: true
    tvd?: true
    logdepth?: true
    speedup?: true
    speeddown?: true
    rop?: true
    ropi?: true
    timeropi?: true
    hklda?: true
    hkldx?: true
    hkldpu?: true
    hkldso?: true
    woba?: true
    wobx?: true
    torqa?: true
    torqx?: true
    torqp?: true
    torqb?: true
    rpm?: true
    rpmm?: true
    totrpm?: true
    stppress?: true
    csgpress?: true
    mudflowine?: true
    mudflowin?: true
    mudflowoute?: true
    mudflowout?: true
    mudflowoutp?: true
    diffflow?: true
    klflow?: true
    muddensin?: true
    muddensout?: true
    mudtempin?: true
    mudtempout?: true
    mudcondin?: true
    mudcondout?: true
    mfiann?: true
    mfianne?: true
    surfrev?: true
    drillrev?: true
    reamrev?: true
    circrev?: true
    totrev?: true
    drilltime?: true
    reamtime?: true
    circtime?: true
    pumptime?: true
    rotatingtime?: true
    drilldist?: true
    stroke1?: true
    stroke2?: true
    stroke3?: true
    stroke4?: true
    totstks?: true
    totstksa?: true
    spm1?: true
    spm2?: true
    spm3?: true
    spm4?: true
    spm5?: true
    totspm?: true
    totspma?: true
    totpumpede?: true
    totpumpvol?: true
    totpumpvolan?: true
    totpumpedea?: true
    tankvoltot?: true
    tankvolact?: true
    tankvoltt?: true
    tankvolchgtot?: true
    tankvolchgact?: true
    tankvolchgtt?: true
    plbit?: true
    plstr?: true
    plann?: true
    plsurf?: true
    plmtr?: true
    plmwd?: true
    bithydpwr?: true
    bithydpwra?: true
    jif?: true
    jetvel?: true
    annveln?: true
    annvelx?: true
    ecddpt?: true
    ecdbit?: true
    ecdshoe?: true
    phydpwr?: true
    deptretm?: true
    lagstks?: true
    lagtime?: true
    dnhstroke?: true
    dnhtime?: true
    mse?: true
    doc?: true
    gas?: true
    dstrength?: true
    mseds?: true
    clcontent?: true
    in_slips?: true
    bht?: true
    scfm?: true
    airflin?: true
    airfline?: true
    airfloutp?: true
    airflout?: true
    airpress?: true
    airtemp?: true
    whp?: true
    wht?: true
    h2s1?: true
    h2s2?: true
    h2s3?: true
    h2s4?: true
    co21?: true
    co22?: true
    co23?: true
    co24?: true
    bitsize?: true
    foamrate?: true
    spare_1?: true
    spare_2?: true
    spare_3?: true
    spare_4?: true
    spare_5?: true
    spare_6?: true
    spare_7?: true
    spare_8?: true
    spare_9?: true
    spare_10?: true
    spare_50?: true
    spare_51?: true
    spare_52?: true
    spare_53?: true
    spare_54?: true
    spare_55?: true
    spare_56?: true
    label?: true
    posisiy?: true
    tipenote?: true
    idnote?: true
    wellId?: true
  }

  export type RecordMaxAggregateInputType = {
    id?: true
    dt?: true
    wid?: true
    sid?: true
    recid?: true
    seqid?: true
    date?: true
    time?: true
    actcode?: true
    blockpos?: true
    bitdepth?: true
    deptbitv?: true
    md?: true
    tvd?: true
    logdepth?: true
    speedup?: true
    speeddown?: true
    rop?: true
    ropi?: true
    timeropi?: true
    hklda?: true
    hkldx?: true
    hkldpu?: true
    hkldso?: true
    woba?: true
    wobx?: true
    torqa?: true
    torqx?: true
    torqp?: true
    torqb?: true
    rpm?: true
    rpmm?: true
    totrpm?: true
    stppress?: true
    csgpress?: true
    mudflowine?: true
    mudflowin?: true
    mudflowoute?: true
    mudflowout?: true
    mudflowoutp?: true
    diffflow?: true
    klflow?: true
    muddensin?: true
    muddensout?: true
    mudtempin?: true
    mudtempout?: true
    mudcondin?: true
    mudcondout?: true
    mfiann?: true
    mfianne?: true
    surfrev?: true
    drillrev?: true
    reamrev?: true
    circrev?: true
    totrev?: true
    drilltime?: true
    reamtime?: true
    circtime?: true
    pumptime?: true
    rotatingtime?: true
    drilldist?: true
    stroke1?: true
    stroke2?: true
    stroke3?: true
    stroke4?: true
    totstks?: true
    totstksa?: true
    spm1?: true
    spm2?: true
    spm3?: true
    spm4?: true
    spm5?: true
    totspm?: true
    totspma?: true
    totpumpede?: true
    totpumpvol?: true
    totpumpvolan?: true
    totpumpedea?: true
    tankvoltot?: true
    tankvolact?: true
    tankvoltt?: true
    tankvolchgtot?: true
    tankvolchgact?: true
    tankvolchgtt?: true
    plbit?: true
    plstr?: true
    plann?: true
    plsurf?: true
    plmtr?: true
    plmwd?: true
    bithydpwr?: true
    bithydpwra?: true
    jif?: true
    jetvel?: true
    annveln?: true
    annvelx?: true
    ecddpt?: true
    ecdbit?: true
    ecdshoe?: true
    phydpwr?: true
    deptretm?: true
    lagstks?: true
    lagtime?: true
    dnhstroke?: true
    dnhtime?: true
    mse?: true
    doc?: true
    gas?: true
    dstrength?: true
    mseds?: true
    clcontent?: true
    in_slips?: true
    bht?: true
    scfm?: true
    airflin?: true
    airfline?: true
    airfloutp?: true
    airflout?: true
    airpress?: true
    airtemp?: true
    whp?: true
    wht?: true
    h2s1?: true
    h2s2?: true
    h2s3?: true
    h2s4?: true
    co21?: true
    co22?: true
    co23?: true
    co24?: true
    bitsize?: true
    foamrate?: true
    spare_1?: true
    spare_2?: true
    spare_3?: true
    spare_4?: true
    spare_5?: true
    spare_6?: true
    spare_7?: true
    spare_8?: true
    spare_9?: true
    spare_10?: true
    spare_50?: true
    spare_51?: true
    spare_52?: true
    spare_53?: true
    spare_54?: true
    spare_55?: true
    spare_56?: true
    label?: true
    posisiy?: true
    tipenote?: true
    idnote?: true
    wellId?: true
  }

  export type RecordCountAggregateInputType = {
    id?: true
    dt?: true
    wid?: true
    sid?: true
    recid?: true
    seqid?: true
    date?: true
    time?: true
    actcode?: true
    blockpos?: true
    bitdepth?: true
    deptbitv?: true
    md?: true
    tvd?: true
    logdepth?: true
    speedup?: true
    speeddown?: true
    rop?: true
    ropi?: true
    timeropi?: true
    hklda?: true
    hkldx?: true
    hkldpu?: true
    hkldso?: true
    woba?: true
    wobx?: true
    torqa?: true
    torqx?: true
    torqp?: true
    torqb?: true
    rpm?: true
    rpmm?: true
    totrpm?: true
    stppress?: true
    csgpress?: true
    mudflowine?: true
    mudflowin?: true
    mudflowoute?: true
    mudflowout?: true
    mudflowoutp?: true
    diffflow?: true
    klflow?: true
    muddensin?: true
    muddensout?: true
    mudtempin?: true
    mudtempout?: true
    mudcondin?: true
    mudcondout?: true
    mfiann?: true
    mfianne?: true
    surfrev?: true
    drillrev?: true
    reamrev?: true
    circrev?: true
    totrev?: true
    drilltime?: true
    reamtime?: true
    circtime?: true
    pumptime?: true
    rotatingtime?: true
    drilldist?: true
    stroke1?: true
    stroke2?: true
    stroke3?: true
    stroke4?: true
    totstks?: true
    totstksa?: true
    spm1?: true
    spm2?: true
    spm3?: true
    spm4?: true
    spm5?: true
    totspm?: true
    totspma?: true
    totpumpede?: true
    totpumpvol?: true
    totpumpvolan?: true
    totpumpedea?: true
    tankvoltot?: true
    tankvolact?: true
    tankvoltt?: true
    tankvolchgtot?: true
    tankvolchgact?: true
    tankvolchgtt?: true
    plbit?: true
    plstr?: true
    plann?: true
    plsurf?: true
    plmtr?: true
    plmwd?: true
    bithydpwr?: true
    bithydpwra?: true
    jif?: true
    jetvel?: true
    annveln?: true
    annvelx?: true
    ecddpt?: true
    ecdbit?: true
    ecdshoe?: true
    phydpwr?: true
    deptretm?: true
    lagstks?: true
    lagtime?: true
    dnhstroke?: true
    dnhtime?: true
    mse?: true
    doc?: true
    gas?: true
    dstrength?: true
    mseds?: true
    clcontent?: true
    in_slips?: true
    bht?: true
    scfm?: true
    airflin?: true
    airfline?: true
    airfloutp?: true
    airflout?: true
    airpress?: true
    airtemp?: true
    whp?: true
    wht?: true
    h2s1?: true
    h2s2?: true
    h2s3?: true
    h2s4?: true
    co21?: true
    co22?: true
    co23?: true
    co24?: true
    bitsize?: true
    foamrate?: true
    spare_1?: true
    spare_2?: true
    spare_3?: true
    spare_4?: true
    spare_5?: true
    spare_6?: true
    spare_7?: true
    spare_8?: true
    spare_9?: true
    spare_10?: true
    spare_50?: true
    spare_51?: true
    spare_52?: true
    spare_53?: true
    spare_54?: true
    spare_55?: true
    spare_56?: true
    label?: true
    posisiy?: true
    tipenote?: true
    idnote?: true
    wellId?: true
    _all?: true
  }

  export type RecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Record to aggregate.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Records
    **/
    _count?: true | RecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordMaxAggregateInputType
  }

  export type GetRecordAggregateType<T extends RecordAggregateArgs> = {
        [P in keyof T & keyof AggregateRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecord[P]>
      : GetScalarType<T[P], AggregateRecord[P]>
  }




  export type RecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordWhereInput
    orderBy?: RecordOrderByWithAggregationInput | RecordOrderByWithAggregationInput[]
    by: RecordScalarFieldEnum[] | RecordScalarFieldEnum
    having?: RecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordCountAggregateInputType | true
    _min?: RecordMinAggregateInputType
    _max?: RecordMaxAggregateInputType
  }

  export type RecordGroupByOutputType = {
    id: string
    dt: Date
    wid: string
    sid: string
    recid: string
    seqid: string
    date: string
    time: string
    actcode: string
    blockpos: string
    bitdepth: string
    deptbitv: string
    md: string
    tvd: string
    logdepth: string
    speedup: string
    speeddown: string
    rop: string
    ropi: string
    timeropi: string
    hklda: string
    hkldx: string
    hkldpu: string
    hkldso: string
    woba: string
    wobx: string
    torqa: string
    torqx: string
    torqp: string
    torqb: string
    rpm: string
    rpmm: string
    totrpm: string
    stppress: string
    csgpress: string
    mudflowine: string
    mudflowin: string
    mudflowoute: string
    mudflowout: string
    mudflowoutp: string
    diffflow: string
    klflow: string
    muddensin: string
    muddensout: string
    mudtempin: string
    mudtempout: string
    mudcondin: string
    mudcondout: string
    mfiann: string
    mfianne: string
    surfrev: string
    drillrev: string
    reamrev: string
    circrev: string
    totrev: string
    drilltime: string
    reamtime: string
    circtime: string
    pumptime: string
    rotatingtime: string
    drilldist: string
    stroke1: string
    stroke2: string
    stroke3: string
    stroke4: string
    totstks: string
    totstksa: string
    spm1: string
    spm2: string
    spm3: string
    spm4: string
    spm5: string
    totspm: string
    totspma: string
    totpumpede: string
    totpumpvol: string
    totpumpvolan: string
    totpumpedea: string
    tankvoltot: string
    tankvolact: string
    tankvoltt: string
    tankvolchgtot: string
    tankvolchgact: string
    tankvolchgtt: string
    plbit: string
    plstr: string
    plann: string
    plsurf: string
    plmtr: string
    plmwd: string
    bithydpwr: string
    bithydpwra: string
    jif: string
    jetvel: string
    annveln: string
    annvelx: string
    ecddpt: string
    ecdbit: string
    ecdshoe: string
    phydpwr: string
    deptretm: string
    lagstks: string
    lagtime: string
    dnhstroke: string
    dnhtime: string
    mse: string
    doc: string
    gas: string
    dstrength: string
    mseds: string
    clcontent: string
    in_slips: string | null
    bht: string
    scfm: string
    airflin: string
    airfline: string
    airfloutp: string
    airflout: string
    airpress: string
    airtemp: string
    whp: string
    wht: string
    h2s1: string
    h2s2: string
    h2s3: string
    h2s4: string
    co21: string
    co22: string
    co23: string
    co24: string
    bitsize: string
    foamrate: string
    spare_1: string
    spare_2: string
    spare_3: string
    spare_4: string
    spare_5: string
    spare_6: string
    spare_7: string
    spare_8: string
    spare_9: string
    spare_10: string
    spare_50: string
    spare_51: string
    spare_52: string
    spare_53: string
    spare_54: string
    spare_55: string
    spare_56: string
    label: string | null
    posisiy: string | null
    tipenote: string | null
    idnote: string | null
    wellId: string
    _count: RecordCountAggregateOutputType | null
    _min: RecordMinAggregateOutputType | null
    _max: RecordMaxAggregateOutputType | null
  }

  type GetRecordGroupByPayload<T extends RecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordGroupByOutputType[P]>
            : GetScalarType<T[P], RecordGroupByOutputType[P]>
        }
      >
    >


  export type RecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dt?: boolean
    wid?: boolean
    sid?: boolean
    recid?: boolean
    seqid?: boolean
    date?: boolean
    time?: boolean
    actcode?: boolean
    blockpos?: boolean
    bitdepth?: boolean
    deptbitv?: boolean
    md?: boolean
    tvd?: boolean
    logdepth?: boolean
    speedup?: boolean
    speeddown?: boolean
    rop?: boolean
    ropi?: boolean
    timeropi?: boolean
    hklda?: boolean
    hkldx?: boolean
    hkldpu?: boolean
    hkldso?: boolean
    woba?: boolean
    wobx?: boolean
    torqa?: boolean
    torqx?: boolean
    torqp?: boolean
    torqb?: boolean
    rpm?: boolean
    rpmm?: boolean
    totrpm?: boolean
    stppress?: boolean
    csgpress?: boolean
    mudflowine?: boolean
    mudflowin?: boolean
    mudflowoute?: boolean
    mudflowout?: boolean
    mudflowoutp?: boolean
    diffflow?: boolean
    klflow?: boolean
    muddensin?: boolean
    muddensout?: boolean
    mudtempin?: boolean
    mudtempout?: boolean
    mudcondin?: boolean
    mudcondout?: boolean
    mfiann?: boolean
    mfianne?: boolean
    surfrev?: boolean
    drillrev?: boolean
    reamrev?: boolean
    circrev?: boolean
    totrev?: boolean
    drilltime?: boolean
    reamtime?: boolean
    circtime?: boolean
    pumptime?: boolean
    rotatingtime?: boolean
    drilldist?: boolean
    stroke1?: boolean
    stroke2?: boolean
    stroke3?: boolean
    stroke4?: boolean
    totstks?: boolean
    totstksa?: boolean
    spm1?: boolean
    spm2?: boolean
    spm3?: boolean
    spm4?: boolean
    spm5?: boolean
    totspm?: boolean
    totspma?: boolean
    totpumpede?: boolean
    totpumpvol?: boolean
    totpumpvolan?: boolean
    totpumpedea?: boolean
    tankvoltot?: boolean
    tankvolact?: boolean
    tankvoltt?: boolean
    tankvolchgtot?: boolean
    tankvolchgact?: boolean
    tankvolchgtt?: boolean
    plbit?: boolean
    plstr?: boolean
    plann?: boolean
    plsurf?: boolean
    plmtr?: boolean
    plmwd?: boolean
    bithydpwr?: boolean
    bithydpwra?: boolean
    jif?: boolean
    jetvel?: boolean
    annveln?: boolean
    annvelx?: boolean
    ecddpt?: boolean
    ecdbit?: boolean
    ecdshoe?: boolean
    phydpwr?: boolean
    deptretm?: boolean
    lagstks?: boolean
    lagtime?: boolean
    dnhstroke?: boolean
    dnhtime?: boolean
    mse?: boolean
    doc?: boolean
    gas?: boolean
    dstrength?: boolean
    mseds?: boolean
    clcontent?: boolean
    in_slips?: boolean
    bht?: boolean
    scfm?: boolean
    airflin?: boolean
    airfline?: boolean
    airfloutp?: boolean
    airflout?: boolean
    airpress?: boolean
    airtemp?: boolean
    whp?: boolean
    wht?: boolean
    h2s1?: boolean
    h2s2?: boolean
    h2s3?: boolean
    h2s4?: boolean
    co21?: boolean
    co22?: boolean
    co23?: boolean
    co24?: boolean
    bitsize?: boolean
    foamrate?: boolean
    spare_1?: boolean
    spare_2?: boolean
    spare_3?: boolean
    spare_4?: boolean
    spare_5?: boolean
    spare_6?: boolean
    spare_7?: boolean
    spare_8?: boolean
    spare_9?: boolean
    spare_10?: boolean
    spare_50?: boolean
    spare_51?: boolean
    spare_52?: boolean
    spare_53?: boolean
    spare_54?: boolean
    spare_55?: boolean
    spare_56?: boolean
    label?: boolean
    posisiy?: boolean
    tipenote?: boolean
    idnote?: boolean
    wellId?: boolean
    well?: boolean | WellDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["record"]>

  export type RecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dt?: boolean
    wid?: boolean
    sid?: boolean
    recid?: boolean
    seqid?: boolean
    date?: boolean
    time?: boolean
    actcode?: boolean
    blockpos?: boolean
    bitdepth?: boolean
    deptbitv?: boolean
    md?: boolean
    tvd?: boolean
    logdepth?: boolean
    speedup?: boolean
    speeddown?: boolean
    rop?: boolean
    ropi?: boolean
    timeropi?: boolean
    hklda?: boolean
    hkldx?: boolean
    hkldpu?: boolean
    hkldso?: boolean
    woba?: boolean
    wobx?: boolean
    torqa?: boolean
    torqx?: boolean
    torqp?: boolean
    torqb?: boolean
    rpm?: boolean
    rpmm?: boolean
    totrpm?: boolean
    stppress?: boolean
    csgpress?: boolean
    mudflowine?: boolean
    mudflowin?: boolean
    mudflowoute?: boolean
    mudflowout?: boolean
    mudflowoutp?: boolean
    diffflow?: boolean
    klflow?: boolean
    muddensin?: boolean
    muddensout?: boolean
    mudtempin?: boolean
    mudtempout?: boolean
    mudcondin?: boolean
    mudcondout?: boolean
    mfiann?: boolean
    mfianne?: boolean
    surfrev?: boolean
    drillrev?: boolean
    reamrev?: boolean
    circrev?: boolean
    totrev?: boolean
    drilltime?: boolean
    reamtime?: boolean
    circtime?: boolean
    pumptime?: boolean
    rotatingtime?: boolean
    drilldist?: boolean
    stroke1?: boolean
    stroke2?: boolean
    stroke3?: boolean
    stroke4?: boolean
    totstks?: boolean
    totstksa?: boolean
    spm1?: boolean
    spm2?: boolean
    spm3?: boolean
    spm4?: boolean
    spm5?: boolean
    totspm?: boolean
    totspma?: boolean
    totpumpede?: boolean
    totpumpvol?: boolean
    totpumpvolan?: boolean
    totpumpedea?: boolean
    tankvoltot?: boolean
    tankvolact?: boolean
    tankvoltt?: boolean
    tankvolchgtot?: boolean
    tankvolchgact?: boolean
    tankvolchgtt?: boolean
    plbit?: boolean
    plstr?: boolean
    plann?: boolean
    plsurf?: boolean
    plmtr?: boolean
    plmwd?: boolean
    bithydpwr?: boolean
    bithydpwra?: boolean
    jif?: boolean
    jetvel?: boolean
    annveln?: boolean
    annvelx?: boolean
    ecddpt?: boolean
    ecdbit?: boolean
    ecdshoe?: boolean
    phydpwr?: boolean
    deptretm?: boolean
    lagstks?: boolean
    lagtime?: boolean
    dnhstroke?: boolean
    dnhtime?: boolean
    mse?: boolean
    doc?: boolean
    gas?: boolean
    dstrength?: boolean
    mseds?: boolean
    clcontent?: boolean
    in_slips?: boolean
    bht?: boolean
    scfm?: boolean
    airflin?: boolean
    airfline?: boolean
    airfloutp?: boolean
    airflout?: boolean
    airpress?: boolean
    airtemp?: boolean
    whp?: boolean
    wht?: boolean
    h2s1?: boolean
    h2s2?: boolean
    h2s3?: boolean
    h2s4?: boolean
    co21?: boolean
    co22?: boolean
    co23?: boolean
    co24?: boolean
    bitsize?: boolean
    foamrate?: boolean
    spare_1?: boolean
    spare_2?: boolean
    spare_3?: boolean
    spare_4?: boolean
    spare_5?: boolean
    spare_6?: boolean
    spare_7?: boolean
    spare_8?: boolean
    spare_9?: boolean
    spare_10?: boolean
    spare_50?: boolean
    spare_51?: boolean
    spare_52?: boolean
    spare_53?: boolean
    spare_54?: boolean
    spare_55?: boolean
    spare_56?: boolean
    label?: boolean
    posisiy?: boolean
    tipenote?: boolean
    idnote?: boolean
    wellId?: boolean
    well?: boolean | WellDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["record"]>

  export type RecordSelectScalar = {
    id?: boolean
    dt?: boolean
    wid?: boolean
    sid?: boolean
    recid?: boolean
    seqid?: boolean
    date?: boolean
    time?: boolean
    actcode?: boolean
    blockpos?: boolean
    bitdepth?: boolean
    deptbitv?: boolean
    md?: boolean
    tvd?: boolean
    logdepth?: boolean
    speedup?: boolean
    speeddown?: boolean
    rop?: boolean
    ropi?: boolean
    timeropi?: boolean
    hklda?: boolean
    hkldx?: boolean
    hkldpu?: boolean
    hkldso?: boolean
    woba?: boolean
    wobx?: boolean
    torqa?: boolean
    torqx?: boolean
    torqp?: boolean
    torqb?: boolean
    rpm?: boolean
    rpmm?: boolean
    totrpm?: boolean
    stppress?: boolean
    csgpress?: boolean
    mudflowine?: boolean
    mudflowin?: boolean
    mudflowoute?: boolean
    mudflowout?: boolean
    mudflowoutp?: boolean
    diffflow?: boolean
    klflow?: boolean
    muddensin?: boolean
    muddensout?: boolean
    mudtempin?: boolean
    mudtempout?: boolean
    mudcondin?: boolean
    mudcondout?: boolean
    mfiann?: boolean
    mfianne?: boolean
    surfrev?: boolean
    drillrev?: boolean
    reamrev?: boolean
    circrev?: boolean
    totrev?: boolean
    drilltime?: boolean
    reamtime?: boolean
    circtime?: boolean
    pumptime?: boolean
    rotatingtime?: boolean
    drilldist?: boolean
    stroke1?: boolean
    stroke2?: boolean
    stroke3?: boolean
    stroke4?: boolean
    totstks?: boolean
    totstksa?: boolean
    spm1?: boolean
    spm2?: boolean
    spm3?: boolean
    spm4?: boolean
    spm5?: boolean
    totspm?: boolean
    totspma?: boolean
    totpumpede?: boolean
    totpumpvol?: boolean
    totpumpvolan?: boolean
    totpumpedea?: boolean
    tankvoltot?: boolean
    tankvolact?: boolean
    tankvoltt?: boolean
    tankvolchgtot?: boolean
    tankvolchgact?: boolean
    tankvolchgtt?: boolean
    plbit?: boolean
    plstr?: boolean
    plann?: boolean
    plsurf?: boolean
    plmtr?: boolean
    plmwd?: boolean
    bithydpwr?: boolean
    bithydpwra?: boolean
    jif?: boolean
    jetvel?: boolean
    annveln?: boolean
    annvelx?: boolean
    ecddpt?: boolean
    ecdbit?: boolean
    ecdshoe?: boolean
    phydpwr?: boolean
    deptretm?: boolean
    lagstks?: boolean
    lagtime?: boolean
    dnhstroke?: boolean
    dnhtime?: boolean
    mse?: boolean
    doc?: boolean
    gas?: boolean
    dstrength?: boolean
    mseds?: boolean
    clcontent?: boolean
    in_slips?: boolean
    bht?: boolean
    scfm?: boolean
    airflin?: boolean
    airfline?: boolean
    airfloutp?: boolean
    airflout?: boolean
    airpress?: boolean
    airtemp?: boolean
    whp?: boolean
    wht?: boolean
    h2s1?: boolean
    h2s2?: boolean
    h2s3?: boolean
    h2s4?: boolean
    co21?: boolean
    co22?: boolean
    co23?: boolean
    co24?: boolean
    bitsize?: boolean
    foamrate?: boolean
    spare_1?: boolean
    spare_2?: boolean
    spare_3?: boolean
    spare_4?: boolean
    spare_5?: boolean
    spare_6?: boolean
    spare_7?: boolean
    spare_8?: boolean
    spare_9?: boolean
    spare_10?: boolean
    spare_50?: boolean
    spare_51?: boolean
    spare_52?: boolean
    spare_53?: boolean
    spare_54?: boolean
    spare_55?: boolean
    spare_56?: boolean
    label?: boolean
    posisiy?: boolean
    tipenote?: boolean
    idnote?: boolean
    wellId?: boolean
  }

  export type RecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    well?: boolean | WellDefaultArgs<ExtArgs>
  }
  export type RecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    well?: boolean | WellDefaultArgs<ExtArgs>
  }

  export type $RecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Record"
    objects: {
      well: Prisma.$WellPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dt: Date
      wid: string
      sid: string
      recid: string
      seqid: string
      date: string
      time: string
      actcode: string
      blockpos: string
      bitdepth: string
      deptbitv: string
      md: string
      tvd: string
      logdepth: string
      speedup: string
      speeddown: string
      rop: string
      ropi: string
      timeropi: string
      hklda: string
      hkldx: string
      hkldpu: string
      hkldso: string
      woba: string
      wobx: string
      torqa: string
      torqx: string
      torqp: string
      torqb: string
      rpm: string
      rpmm: string
      totrpm: string
      stppress: string
      csgpress: string
      mudflowine: string
      mudflowin: string
      mudflowoute: string
      mudflowout: string
      mudflowoutp: string
      diffflow: string
      klflow: string
      muddensin: string
      muddensout: string
      mudtempin: string
      mudtempout: string
      mudcondin: string
      mudcondout: string
      mfiann: string
      mfianne: string
      surfrev: string
      drillrev: string
      reamrev: string
      circrev: string
      totrev: string
      drilltime: string
      reamtime: string
      circtime: string
      pumptime: string
      rotatingtime: string
      drilldist: string
      stroke1: string
      stroke2: string
      stroke3: string
      stroke4: string
      totstks: string
      totstksa: string
      spm1: string
      spm2: string
      spm3: string
      spm4: string
      spm5: string
      totspm: string
      totspma: string
      totpumpede: string
      totpumpvol: string
      totpumpvolan: string
      totpumpedea: string
      tankvoltot: string
      tankvolact: string
      tankvoltt: string
      tankvolchgtot: string
      tankvolchgact: string
      tankvolchgtt: string
      plbit: string
      plstr: string
      plann: string
      plsurf: string
      plmtr: string
      plmwd: string
      bithydpwr: string
      bithydpwra: string
      jif: string
      jetvel: string
      annveln: string
      annvelx: string
      ecddpt: string
      ecdbit: string
      ecdshoe: string
      phydpwr: string
      deptretm: string
      lagstks: string
      lagtime: string
      dnhstroke: string
      dnhtime: string
      mse: string
      doc: string
      gas: string
      dstrength: string
      mseds: string
      clcontent: string
      in_slips: string | null
      bht: string
      scfm: string
      airflin: string
      airfline: string
      airfloutp: string
      airflout: string
      airpress: string
      airtemp: string
      whp: string
      wht: string
      h2s1: string
      h2s2: string
      h2s3: string
      h2s4: string
      co21: string
      co22: string
      co23: string
      co24: string
      bitsize: string
      foamrate: string
      spare_1: string
      spare_2: string
      spare_3: string
      spare_4: string
      spare_5: string
      spare_6: string
      spare_7: string
      spare_8: string
      spare_9: string
      spare_10: string
      spare_50: string
      spare_51: string
      spare_52: string
      spare_53: string
      spare_54: string
      spare_55: string
      spare_56: string
      label: string | null
      posisiy: string | null
      tipenote: string | null
      idnote: string | null
      wellId: string
    }, ExtArgs["result"]["record"]>
    composites: {}
  }

  type RecordGetPayload<S extends boolean | null | undefined | RecordDefaultArgs> = $Result.GetResult<Prisma.$RecordPayload, S>

  type RecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecordCountAggregateInputType | true
    }

  export interface RecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Record'], meta: { name: 'Record' } }
    /**
     * Find zero or one Record that matches the filter.
     * @param {RecordFindUniqueArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecordFindUniqueArgs>(args: SelectSubset<T, RecordFindUniqueArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Record that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecordFindUniqueOrThrowArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecordFindUniqueOrThrowArgs>(args: SelectSubset<T, RecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Record that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordFindFirstArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecordFindFirstArgs>(args?: SelectSubset<T, RecordFindFirstArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Record that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordFindFirstOrThrowArgs} args - Arguments to find a Record
     * @example
     * // Get one Record
     * const record = await prisma.record.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecordFindFirstOrThrowArgs>(args?: SelectSubset<T, RecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Records
     * const records = await prisma.record.findMany()
     * 
     * // Get first 10 Records
     * const records = await prisma.record.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordWithIdOnly = await prisma.record.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecordFindManyArgs>(args?: SelectSubset<T, RecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Record.
     * @param {RecordCreateArgs} args - Arguments to create a Record.
     * @example
     * // Create one Record
     * const Record = await prisma.record.create({
     *   data: {
     *     // ... data to create a Record
     *   }
     * })
     * 
     */
    create<T extends RecordCreateArgs>(args: SelectSubset<T, RecordCreateArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Records.
     * @param {RecordCreateManyArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const record = await prisma.record.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecordCreateManyArgs>(args?: SelectSubset<T, RecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Records and returns the data saved in the database.
     * @param {RecordCreateManyAndReturnArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const record = await prisma.record.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Records and only return the `id`
     * const recordWithIdOnly = await prisma.record.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecordCreateManyAndReturnArgs>(args?: SelectSubset<T, RecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Record.
     * @param {RecordDeleteArgs} args - Arguments to delete one Record.
     * @example
     * // Delete one Record
     * const Record = await prisma.record.delete({
     *   where: {
     *     // ... filter to delete one Record
     *   }
     * })
     * 
     */
    delete<T extends RecordDeleteArgs>(args: SelectSubset<T, RecordDeleteArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Record.
     * @param {RecordUpdateArgs} args - Arguments to update one Record.
     * @example
     * // Update one Record
     * const record = await prisma.record.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecordUpdateArgs>(args: SelectSubset<T, RecordUpdateArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Records.
     * @param {RecordDeleteManyArgs} args - Arguments to filter Records to delete.
     * @example
     * // Delete a few Records
     * const { count } = await prisma.record.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecordDeleteManyArgs>(args?: SelectSubset<T, RecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Records
     * const record = await prisma.record.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecordUpdateManyArgs>(args: SelectSubset<T, RecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Record.
     * @param {RecordUpsertArgs} args - Arguments to update or create a Record.
     * @example
     * // Update or create a Record
     * const record = await prisma.record.upsert({
     *   create: {
     *     // ... data to create a Record
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Record we want to update
     *   }
     * })
     */
    upsert<T extends RecordUpsertArgs>(args: SelectSubset<T, RecordUpsertArgs<ExtArgs>>): Prisma__RecordClient<$Result.GetResult<Prisma.$RecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordCountArgs} args - Arguments to filter Records to count.
     * @example
     * // Count the number of Records
     * const count = await prisma.record.count({
     *   where: {
     *     // ... the filter for the Records we want to count
     *   }
     * })
    **/
    count<T extends RecordCountArgs>(
      args?: Subset<T, RecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordAggregateArgs>(args: Subset<T, RecordAggregateArgs>): Prisma.PrismaPromise<GetRecordAggregateType<T>>

    /**
     * Group by Record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordGroupByArgs['orderBy'] }
        : { orderBy?: RecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Record model
   */
  readonly fields: RecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Record.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    well<T extends WellDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WellDefaultArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Record model
   */ 
  interface RecordFieldRefs {
    readonly id: FieldRef<"Record", 'String'>
    readonly dt: FieldRef<"Record", 'DateTime'>
    readonly wid: FieldRef<"Record", 'String'>
    readonly sid: FieldRef<"Record", 'String'>
    readonly recid: FieldRef<"Record", 'String'>
    readonly seqid: FieldRef<"Record", 'String'>
    readonly date: FieldRef<"Record", 'String'>
    readonly time: FieldRef<"Record", 'String'>
    readonly actcode: FieldRef<"Record", 'String'>
    readonly blockpos: FieldRef<"Record", 'String'>
    readonly bitdepth: FieldRef<"Record", 'String'>
    readonly deptbitv: FieldRef<"Record", 'String'>
    readonly md: FieldRef<"Record", 'String'>
    readonly tvd: FieldRef<"Record", 'String'>
    readonly logdepth: FieldRef<"Record", 'String'>
    readonly speedup: FieldRef<"Record", 'String'>
    readonly speeddown: FieldRef<"Record", 'String'>
    readonly rop: FieldRef<"Record", 'String'>
    readonly ropi: FieldRef<"Record", 'String'>
    readonly timeropi: FieldRef<"Record", 'String'>
    readonly hklda: FieldRef<"Record", 'String'>
    readonly hkldx: FieldRef<"Record", 'String'>
    readonly hkldpu: FieldRef<"Record", 'String'>
    readonly hkldso: FieldRef<"Record", 'String'>
    readonly woba: FieldRef<"Record", 'String'>
    readonly wobx: FieldRef<"Record", 'String'>
    readonly torqa: FieldRef<"Record", 'String'>
    readonly torqx: FieldRef<"Record", 'String'>
    readonly torqp: FieldRef<"Record", 'String'>
    readonly torqb: FieldRef<"Record", 'String'>
    readonly rpm: FieldRef<"Record", 'String'>
    readonly rpmm: FieldRef<"Record", 'String'>
    readonly totrpm: FieldRef<"Record", 'String'>
    readonly stppress: FieldRef<"Record", 'String'>
    readonly csgpress: FieldRef<"Record", 'String'>
    readonly mudflowine: FieldRef<"Record", 'String'>
    readonly mudflowin: FieldRef<"Record", 'String'>
    readonly mudflowoute: FieldRef<"Record", 'String'>
    readonly mudflowout: FieldRef<"Record", 'String'>
    readonly mudflowoutp: FieldRef<"Record", 'String'>
    readonly diffflow: FieldRef<"Record", 'String'>
    readonly klflow: FieldRef<"Record", 'String'>
    readonly muddensin: FieldRef<"Record", 'String'>
    readonly muddensout: FieldRef<"Record", 'String'>
    readonly mudtempin: FieldRef<"Record", 'String'>
    readonly mudtempout: FieldRef<"Record", 'String'>
    readonly mudcondin: FieldRef<"Record", 'String'>
    readonly mudcondout: FieldRef<"Record", 'String'>
    readonly mfiann: FieldRef<"Record", 'String'>
    readonly mfianne: FieldRef<"Record", 'String'>
    readonly surfrev: FieldRef<"Record", 'String'>
    readonly drillrev: FieldRef<"Record", 'String'>
    readonly reamrev: FieldRef<"Record", 'String'>
    readonly circrev: FieldRef<"Record", 'String'>
    readonly totrev: FieldRef<"Record", 'String'>
    readonly drilltime: FieldRef<"Record", 'String'>
    readonly reamtime: FieldRef<"Record", 'String'>
    readonly circtime: FieldRef<"Record", 'String'>
    readonly pumptime: FieldRef<"Record", 'String'>
    readonly rotatingtime: FieldRef<"Record", 'String'>
    readonly drilldist: FieldRef<"Record", 'String'>
    readonly stroke1: FieldRef<"Record", 'String'>
    readonly stroke2: FieldRef<"Record", 'String'>
    readonly stroke3: FieldRef<"Record", 'String'>
    readonly stroke4: FieldRef<"Record", 'String'>
    readonly totstks: FieldRef<"Record", 'String'>
    readonly totstksa: FieldRef<"Record", 'String'>
    readonly spm1: FieldRef<"Record", 'String'>
    readonly spm2: FieldRef<"Record", 'String'>
    readonly spm3: FieldRef<"Record", 'String'>
    readonly spm4: FieldRef<"Record", 'String'>
    readonly spm5: FieldRef<"Record", 'String'>
    readonly totspm: FieldRef<"Record", 'String'>
    readonly totspma: FieldRef<"Record", 'String'>
    readonly totpumpede: FieldRef<"Record", 'String'>
    readonly totpumpvol: FieldRef<"Record", 'String'>
    readonly totpumpvolan: FieldRef<"Record", 'String'>
    readonly totpumpedea: FieldRef<"Record", 'String'>
    readonly tankvoltot: FieldRef<"Record", 'String'>
    readonly tankvolact: FieldRef<"Record", 'String'>
    readonly tankvoltt: FieldRef<"Record", 'String'>
    readonly tankvolchgtot: FieldRef<"Record", 'String'>
    readonly tankvolchgact: FieldRef<"Record", 'String'>
    readonly tankvolchgtt: FieldRef<"Record", 'String'>
    readonly plbit: FieldRef<"Record", 'String'>
    readonly plstr: FieldRef<"Record", 'String'>
    readonly plann: FieldRef<"Record", 'String'>
    readonly plsurf: FieldRef<"Record", 'String'>
    readonly plmtr: FieldRef<"Record", 'String'>
    readonly plmwd: FieldRef<"Record", 'String'>
    readonly bithydpwr: FieldRef<"Record", 'String'>
    readonly bithydpwra: FieldRef<"Record", 'String'>
    readonly jif: FieldRef<"Record", 'String'>
    readonly jetvel: FieldRef<"Record", 'String'>
    readonly annveln: FieldRef<"Record", 'String'>
    readonly annvelx: FieldRef<"Record", 'String'>
    readonly ecddpt: FieldRef<"Record", 'String'>
    readonly ecdbit: FieldRef<"Record", 'String'>
    readonly ecdshoe: FieldRef<"Record", 'String'>
    readonly phydpwr: FieldRef<"Record", 'String'>
    readonly deptretm: FieldRef<"Record", 'String'>
    readonly lagstks: FieldRef<"Record", 'String'>
    readonly lagtime: FieldRef<"Record", 'String'>
    readonly dnhstroke: FieldRef<"Record", 'String'>
    readonly dnhtime: FieldRef<"Record", 'String'>
    readonly mse: FieldRef<"Record", 'String'>
    readonly doc: FieldRef<"Record", 'String'>
    readonly gas: FieldRef<"Record", 'String'>
    readonly dstrength: FieldRef<"Record", 'String'>
    readonly mseds: FieldRef<"Record", 'String'>
    readonly clcontent: FieldRef<"Record", 'String'>
    readonly in_slips: FieldRef<"Record", 'String'>
    readonly bht: FieldRef<"Record", 'String'>
    readonly scfm: FieldRef<"Record", 'String'>
    readonly airflin: FieldRef<"Record", 'String'>
    readonly airfline: FieldRef<"Record", 'String'>
    readonly airfloutp: FieldRef<"Record", 'String'>
    readonly airflout: FieldRef<"Record", 'String'>
    readonly airpress: FieldRef<"Record", 'String'>
    readonly airtemp: FieldRef<"Record", 'String'>
    readonly whp: FieldRef<"Record", 'String'>
    readonly wht: FieldRef<"Record", 'String'>
    readonly h2s1: FieldRef<"Record", 'String'>
    readonly h2s2: FieldRef<"Record", 'String'>
    readonly h2s3: FieldRef<"Record", 'String'>
    readonly h2s4: FieldRef<"Record", 'String'>
    readonly co21: FieldRef<"Record", 'String'>
    readonly co22: FieldRef<"Record", 'String'>
    readonly co23: FieldRef<"Record", 'String'>
    readonly co24: FieldRef<"Record", 'String'>
    readonly bitsize: FieldRef<"Record", 'String'>
    readonly foamrate: FieldRef<"Record", 'String'>
    readonly spare_1: FieldRef<"Record", 'String'>
    readonly spare_2: FieldRef<"Record", 'String'>
    readonly spare_3: FieldRef<"Record", 'String'>
    readonly spare_4: FieldRef<"Record", 'String'>
    readonly spare_5: FieldRef<"Record", 'String'>
    readonly spare_6: FieldRef<"Record", 'String'>
    readonly spare_7: FieldRef<"Record", 'String'>
    readonly spare_8: FieldRef<"Record", 'String'>
    readonly spare_9: FieldRef<"Record", 'String'>
    readonly spare_10: FieldRef<"Record", 'String'>
    readonly spare_50: FieldRef<"Record", 'String'>
    readonly spare_51: FieldRef<"Record", 'String'>
    readonly spare_52: FieldRef<"Record", 'String'>
    readonly spare_53: FieldRef<"Record", 'String'>
    readonly spare_54: FieldRef<"Record", 'String'>
    readonly spare_55: FieldRef<"Record", 'String'>
    readonly spare_56: FieldRef<"Record", 'String'>
    readonly label: FieldRef<"Record", 'String'>
    readonly posisiy: FieldRef<"Record", 'String'>
    readonly tipenote: FieldRef<"Record", 'String'>
    readonly idnote: FieldRef<"Record", 'String'>
    readonly wellId: FieldRef<"Record", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Record findUnique
   */
  export type RecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record findUniqueOrThrow
   */
  export type RecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record findFirst
   */
  export type RecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Records.
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Records.
     */
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Record findFirstOrThrow
   */
  export type RecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Record to fetch.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Records.
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Records.
     */
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Record findMany
   */
  export type RecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter, which Records to fetch.
     */
    where?: RecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordOrderByWithRelationInput | RecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Records.
     */
    cursor?: RecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    distinct?: RecordScalarFieldEnum | RecordScalarFieldEnum[]
  }

  /**
   * Record create
   */
  export type RecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * The data needed to create a Record.
     */
    data: XOR<RecordCreateInput, RecordUncheckedCreateInput>
  }

  /**
   * Record createMany
   */
  export type RecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Records.
     */
    data: RecordCreateManyInput | RecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Record createManyAndReturn
   */
  export type RecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Records.
     */
    data: RecordCreateManyInput | RecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Record update
   */
  export type RecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * The data needed to update a Record.
     */
    data: XOR<RecordUpdateInput, RecordUncheckedUpdateInput>
    /**
     * Choose, which Record to update.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record updateMany
   */
  export type RecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Records.
     */
    data: XOR<RecordUpdateManyMutationInput, RecordUncheckedUpdateManyInput>
    /**
     * Filter which Records to update
     */
    where?: RecordWhereInput
  }

  /**
   * Record upsert
   */
  export type RecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * The filter to search for the Record to update in case it exists.
     */
    where: RecordWhereUniqueInput
    /**
     * In case the Record found by the `where` argument doesn't exist, create a new Record with this data.
     */
    create: XOR<RecordCreateInput, RecordUncheckedCreateInput>
    /**
     * In case the Record was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecordUpdateInput, RecordUncheckedUpdateInput>
  }

  /**
   * Record delete
   */
  export type RecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
    /**
     * Filter which Record to delete.
     */
    where: RecordWhereUniqueInput
  }

  /**
   * Record deleteMany
   */
  export type RecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Records to delete
     */
    where?: RecordWhereInput
  }

  /**
   * Record without action
   */
  export type RecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Record
     */
    select?: RecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    seen: boolean | null
    wellId: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    seen: boolean | null
    wellId: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    seen: number
    wellId: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    seen?: true
    wellId?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    seen?: true
    wellId?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    seen?: true
    wellId?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    message: string | null
    seen: boolean
    wellId: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    seen?: boolean
    wellId?: boolean
    createdAt?: boolean
    well?: boolean | WellDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    seen?: boolean
    wellId?: boolean
    createdAt?: boolean
    well?: boolean | WellDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    seen?: boolean
    wellId?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    well?: boolean | WellDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    well?: boolean | WellDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      well: Prisma.$WellPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      message: string | null
      seen: boolean
      wellId: string
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    well<T extends WellDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WellDefaultArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly seen: FieldRef<"Notification", 'Boolean'>
    readonly wellId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Condition
   */

  export type AggregateCondition = {
    _count: ConditionCountAggregateOutputType | null
    _min: ConditionMinAggregateOutputType | null
    _max: ConditionMaxAggregateOutputType | null
  }

  export type ConditionMinAggregateOutputType = {
    id: string | null
    name: string | null
    wellId: string | null
  }

  export type ConditionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    wellId: string | null
  }

  export type ConditionCountAggregateOutputType = {
    id: number
    name: number
    wellId: number
    _all: number
  }


  export type ConditionMinAggregateInputType = {
    id?: true
    name?: true
    wellId?: true
  }

  export type ConditionMaxAggregateInputType = {
    id?: true
    name?: true
    wellId?: true
  }

  export type ConditionCountAggregateInputType = {
    id?: true
    name?: true
    wellId?: true
    _all?: true
  }

  export type ConditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Condition to aggregate.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conditions
    **/
    _count?: true | ConditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConditionMaxAggregateInputType
  }

  export type GetConditionAggregateType<T extends ConditionAggregateArgs> = {
        [P in keyof T & keyof AggregateCondition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCondition[P]>
      : GetScalarType<T[P], AggregateCondition[P]>
  }




  export type ConditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConditionWhereInput
    orderBy?: ConditionOrderByWithAggregationInput | ConditionOrderByWithAggregationInput[]
    by: ConditionScalarFieldEnum[] | ConditionScalarFieldEnum
    having?: ConditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConditionCountAggregateInputType | true
    _min?: ConditionMinAggregateInputType
    _max?: ConditionMaxAggregateInputType
  }

  export type ConditionGroupByOutputType = {
    id: string
    name: string
    wellId: string
    _count: ConditionCountAggregateOutputType | null
    _min: ConditionMinAggregateOutputType | null
    _max: ConditionMaxAggregateOutputType | null
  }

  type GetConditionGroupByPayload<T extends ConditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConditionGroupByOutputType[P]>
            : GetScalarType<T[P], ConditionGroupByOutputType[P]>
        }
      >
    >


  export type ConditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    wellId?: boolean
    rules?: boolean | Condition$rulesArgs<ExtArgs>
    well?: boolean | WellDefaultArgs<ExtArgs>
    _count?: boolean | ConditionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["condition"]>

  export type ConditionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    wellId?: boolean
    well?: boolean | WellDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["condition"]>

  export type ConditionSelectScalar = {
    id?: boolean
    name?: boolean
    wellId?: boolean
  }

  export type ConditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rules?: boolean | Condition$rulesArgs<ExtArgs>
    well?: boolean | WellDefaultArgs<ExtArgs>
    _count?: boolean | ConditionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConditionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    well?: boolean | WellDefaultArgs<ExtArgs>
  }

  export type $ConditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Condition"
    objects: {
      rules: Prisma.$RuleConditionPayload<ExtArgs>[]
      well: Prisma.$WellPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      wellId: string
    }, ExtArgs["result"]["condition"]>
    composites: {}
  }

  type ConditionGetPayload<S extends boolean | null | undefined | ConditionDefaultArgs> = $Result.GetResult<Prisma.$ConditionPayload, S>

  type ConditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConditionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConditionCountAggregateInputType | true
    }

  export interface ConditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Condition'], meta: { name: 'Condition' } }
    /**
     * Find zero or one Condition that matches the filter.
     * @param {ConditionFindUniqueArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConditionFindUniqueArgs>(args: SelectSubset<T, ConditionFindUniqueArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Condition that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConditionFindUniqueOrThrowArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConditionFindUniqueOrThrowArgs>(args: SelectSubset<T, ConditionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Condition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionFindFirstArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConditionFindFirstArgs>(args?: SelectSubset<T, ConditionFindFirstArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Condition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionFindFirstOrThrowArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConditionFindFirstOrThrowArgs>(args?: SelectSubset<T, ConditionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Conditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conditions
     * const conditions = await prisma.condition.findMany()
     * 
     * // Get first 10 Conditions
     * const conditions = await prisma.condition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conditionWithIdOnly = await prisma.condition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConditionFindManyArgs>(args?: SelectSubset<T, ConditionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Condition.
     * @param {ConditionCreateArgs} args - Arguments to create a Condition.
     * @example
     * // Create one Condition
     * const Condition = await prisma.condition.create({
     *   data: {
     *     // ... data to create a Condition
     *   }
     * })
     * 
     */
    create<T extends ConditionCreateArgs>(args: SelectSubset<T, ConditionCreateArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Conditions.
     * @param {ConditionCreateManyArgs} args - Arguments to create many Conditions.
     * @example
     * // Create many Conditions
     * const condition = await prisma.condition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConditionCreateManyArgs>(args?: SelectSubset<T, ConditionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conditions and returns the data saved in the database.
     * @param {ConditionCreateManyAndReturnArgs} args - Arguments to create many Conditions.
     * @example
     * // Create many Conditions
     * const condition = await prisma.condition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conditions and only return the `id`
     * const conditionWithIdOnly = await prisma.condition.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConditionCreateManyAndReturnArgs>(args?: SelectSubset<T, ConditionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Condition.
     * @param {ConditionDeleteArgs} args - Arguments to delete one Condition.
     * @example
     * // Delete one Condition
     * const Condition = await prisma.condition.delete({
     *   where: {
     *     // ... filter to delete one Condition
     *   }
     * })
     * 
     */
    delete<T extends ConditionDeleteArgs>(args: SelectSubset<T, ConditionDeleteArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Condition.
     * @param {ConditionUpdateArgs} args - Arguments to update one Condition.
     * @example
     * // Update one Condition
     * const condition = await prisma.condition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConditionUpdateArgs>(args: SelectSubset<T, ConditionUpdateArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Conditions.
     * @param {ConditionDeleteManyArgs} args - Arguments to filter Conditions to delete.
     * @example
     * // Delete a few Conditions
     * const { count } = await prisma.condition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConditionDeleteManyArgs>(args?: SelectSubset<T, ConditionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conditions
     * const condition = await prisma.condition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConditionUpdateManyArgs>(args: SelectSubset<T, ConditionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Condition.
     * @param {ConditionUpsertArgs} args - Arguments to update or create a Condition.
     * @example
     * // Update or create a Condition
     * const condition = await prisma.condition.upsert({
     *   create: {
     *     // ... data to create a Condition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Condition we want to update
     *   }
     * })
     */
    upsert<T extends ConditionUpsertArgs>(args: SelectSubset<T, ConditionUpsertArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Conditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionCountArgs} args - Arguments to filter Conditions to count.
     * @example
     * // Count the number of Conditions
     * const count = await prisma.condition.count({
     *   where: {
     *     // ... the filter for the Conditions we want to count
     *   }
     * })
    **/
    count<T extends ConditionCountArgs>(
      args?: Subset<T, ConditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Condition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConditionAggregateArgs>(args: Subset<T, ConditionAggregateArgs>): Prisma.PrismaPromise<GetConditionAggregateType<T>>

    /**
     * Group by Condition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConditionGroupByArgs['orderBy'] }
        : { orderBy?: ConditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Condition model
   */
  readonly fields: ConditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Condition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rules<T extends Condition$rulesArgs<ExtArgs> = {}>(args?: Subset<T, Condition$rulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "findMany"> | Null>
    well<T extends WellDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WellDefaultArgs<ExtArgs>>): Prisma__WellClient<$Result.GetResult<Prisma.$WellPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Condition model
   */ 
  interface ConditionFieldRefs {
    readonly id: FieldRef<"Condition", 'String'>
    readonly name: FieldRef<"Condition", 'String'>
    readonly wellId: FieldRef<"Condition", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Condition findUnique
   */
  export type ConditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where: ConditionWhereUniqueInput
  }

  /**
   * Condition findUniqueOrThrow
   */
  export type ConditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where: ConditionWhereUniqueInput
  }

  /**
   * Condition findFirst
   */
  export type ConditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conditions.
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conditions.
     */
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }

  /**
   * Condition findFirstOrThrow
   */
  export type ConditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conditions.
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conditions.
     */
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }

  /**
   * Condition findMany
   */
  export type ConditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Conditions to fetch.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conditions.
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }

  /**
   * Condition create
   */
  export type ConditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * The data needed to create a Condition.
     */
    data: XOR<ConditionCreateInput, ConditionUncheckedCreateInput>
  }

  /**
   * Condition createMany
   */
  export type ConditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conditions.
     */
    data: ConditionCreateManyInput | ConditionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Condition createManyAndReturn
   */
  export type ConditionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Conditions.
     */
    data: ConditionCreateManyInput | ConditionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Condition update
   */
  export type ConditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * The data needed to update a Condition.
     */
    data: XOR<ConditionUpdateInput, ConditionUncheckedUpdateInput>
    /**
     * Choose, which Condition to update.
     */
    where: ConditionWhereUniqueInput
  }

  /**
   * Condition updateMany
   */
  export type ConditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conditions.
     */
    data: XOR<ConditionUpdateManyMutationInput, ConditionUncheckedUpdateManyInput>
    /**
     * Filter which Conditions to update
     */
    where?: ConditionWhereInput
  }

  /**
   * Condition upsert
   */
  export type ConditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * The filter to search for the Condition to update in case it exists.
     */
    where: ConditionWhereUniqueInput
    /**
     * In case the Condition found by the `where` argument doesn't exist, create a new Condition with this data.
     */
    create: XOR<ConditionCreateInput, ConditionUncheckedCreateInput>
    /**
     * In case the Condition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConditionUpdateInput, ConditionUncheckedUpdateInput>
  }

  /**
   * Condition delete
   */
  export type ConditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter which Condition to delete.
     */
    where: ConditionWhereUniqueInput
  }

  /**
   * Condition deleteMany
   */
  export type ConditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conditions to delete
     */
    where?: ConditionWhereInput
  }

  /**
   * Condition.rules
   */
  export type Condition$rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    where?: RuleConditionWhereInput
    orderBy?: RuleConditionOrderByWithRelationInput | RuleConditionOrderByWithRelationInput[]
    cursor?: RuleConditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RuleConditionScalarFieldEnum | RuleConditionScalarFieldEnum[]
  }

  /**
   * Condition without action
   */
  export type ConditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConditionInclude<ExtArgs> | null
  }


  /**
   * Model RuleCondition
   */

  export type AggregateRuleCondition = {
    _count: RuleConditionCountAggregateOutputType | null
    _avg: RuleConditionAvgAggregateOutputType | null
    _sum: RuleConditionSumAggregateOutputType | null
    _min: RuleConditionMinAggregateOutputType | null
    _max: RuleConditionMaxAggregateOutputType | null
  }

  export type RuleConditionAvgAggregateOutputType = {
    thresholdValue: number | null
  }

  export type RuleConditionSumAggregateOutputType = {
    thresholdValue: number | null
  }

  export type RuleConditionMinAggregateOutputType = {
    id: string | null
    conditionId: string | null
    parameter: string | null
    operator: string | null
    thresholdValue: number | null
    logicalOperator: $Enums.LogicalOperator | null
  }

  export type RuleConditionMaxAggregateOutputType = {
    id: string | null
    conditionId: string | null
    parameter: string | null
    operator: string | null
    thresholdValue: number | null
    logicalOperator: $Enums.LogicalOperator | null
  }

  export type RuleConditionCountAggregateOutputType = {
    id: number
    conditionId: number
    parameter: number
    operator: number
    thresholdValue: number
    logicalOperator: number
    _all: number
  }


  export type RuleConditionAvgAggregateInputType = {
    thresholdValue?: true
  }

  export type RuleConditionSumAggregateInputType = {
    thresholdValue?: true
  }

  export type RuleConditionMinAggregateInputType = {
    id?: true
    conditionId?: true
    parameter?: true
    operator?: true
    thresholdValue?: true
    logicalOperator?: true
  }

  export type RuleConditionMaxAggregateInputType = {
    id?: true
    conditionId?: true
    parameter?: true
    operator?: true
    thresholdValue?: true
    logicalOperator?: true
  }

  export type RuleConditionCountAggregateInputType = {
    id?: true
    conditionId?: true
    parameter?: true
    operator?: true
    thresholdValue?: true
    logicalOperator?: true
    _all?: true
  }

  export type RuleConditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RuleCondition to aggregate.
     */
    where?: RuleConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RuleConditions to fetch.
     */
    orderBy?: RuleConditionOrderByWithRelationInput | RuleConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RuleConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RuleConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RuleConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RuleConditions
    **/
    _count?: true | RuleConditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RuleConditionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RuleConditionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RuleConditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RuleConditionMaxAggregateInputType
  }

  export type GetRuleConditionAggregateType<T extends RuleConditionAggregateArgs> = {
        [P in keyof T & keyof AggregateRuleCondition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRuleCondition[P]>
      : GetScalarType<T[P], AggregateRuleCondition[P]>
  }




  export type RuleConditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RuleConditionWhereInput
    orderBy?: RuleConditionOrderByWithAggregationInput | RuleConditionOrderByWithAggregationInput[]
    by: RuleConditionScalarFieldEnum[] | RuleConditionScalarFieldEnum
    having?: RuleConditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RuleConditionCountAggregateInputType | true
    _avg?: RuleConditionAvgAggregateInputType
    _sum?: RuleConditionSumAggregateInputType
    _min?: RuleConditionMinAggregateInputType
    _max?: RuleConditionMaxAggregateInputType
  }

  export type RuleConditionGroupByOutputType = {
    id: string
    conditionId: string
    parameter: string
    operator: string
    thresholdValue: number
    logicalOperator: $Enums.LogicalOperator
    _count: RuleConditionCountAggregateOutputType | null
    _avg: RuleConditionAvgAggregateOutputType | null
    _sum: RuleConditionSumAggregateOutputType | null
    _min: RuleConditionMinAggregateOutputType | null
    _max: RuleConditionMaxAggregateOutputType | null
  }

  type GetRuleConditionGroupByPayload<T extends RuleConditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RuleConditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RuleConditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RuleConditionGroupByOutputType[P]>
            : GetScalarType<T[P], RuleConditionGroupByOutputType[P]>
        }
      >
    >


  export type RuleConditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conditionId?: boolean
    parameter?: boolean
    operator?: boolean
    thresholdValue?: boolean
    logicalOperator?: boolean
    condition?: boolean | ConditionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ruleCondition"]>

  export type RuleConditionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conditionId?: boolean
    parameter?: boolean
    operator?: boolean
    thresholdValue?: boolean
    logicalOperator?: boolean
    condition?: boolean | ConditionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ruleCondition"]>

  export type RuleConditionSelectScalar = {
    id?: boolean
    conditionId?: boolean
    parameter?: boolean
    operator?: boolean
    thresholdValue?: boolean
    logicalOperator?: boolean
  }

  export type RuleConditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    condition?: boolean | ConditionDefaultArgs<ExtArgs>
  }
  export type RuleConditionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    condition?: boolean | ConditionDefaultArgs<ExtArgs>
  }

  export type $RuleConditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RuleCondition"
    objects: {
      condition: Prisma.$ConditionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conditionId: string
      parameter: string
      operator: string
      thresholdValue: number
      logicalOperator: $Enums.LogicalOperator
    }, ExtArgs["result"]["ruleCondition"]>
    composites: {}
  }

  type RuleConditionGetPayload<S extends boolean | null | undefined | RuleConditionDefaultArgs> = $Result.GetResult<Prisma.$RuleConditionPayload, S>

  type RuleConditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RuleConditionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RuleConditionCountAggregateInputType | true
    }

  export interface RuleConditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RuleCondition'], meta: { name: 'RuleCondition' } }
    /**
     * Find zero or one RuleCondition that matches the filter.
     * @param {RuleConditionFindUniqueArgs} args - Arguments to find a RuleCondition
     * @example
     * // Get one RuleCondition
     * const ruleCondition = await prisma.ruleCondition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RuleConditionFindUniqueArgs>(args: SelectSubset<T, RuleConditionFindUniqueArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RuleCondition that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RuleConditionFindUniqueOrThrowArgs} args - Arguments to find a RuleCondition
     * @example
     * // Get one RuleCondition
     * const ruleCondition = await prisma.ruleCondition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RuleConditionFindUniqueOrThrowArgs>(args: SelectSubset<T, RuleConditionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RuleCondition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleConditionFindFirstArgs} args - Arguments to find a RuleCondition
     * @example
     * // Get one RuleCondition
     * const ruleCondition = await prisma.ruleCondition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RuleConditionFindFirstArgs>(args?: SelectSubset<T, RuleConditionFindFirstArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RuleCondition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleConditionFindFirstOrThrowArgs} args - Arguments to find a RuleCondition
     * @example
     * // Get one RuleCondition
     * const ruleCondition = await prisma.ruleCondition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RuleConditionFindFirstOrThrowArgs>(args?: SelectSubset<T, RuleConditionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RuleConditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleConditionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RuleConditions
     * const ruleConditions = await prisma.ruleCondition.findMany()
     * 
     * // Get first 10 RuleConditions
     * const ruleConditions = await prisma.ruleCondition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ruleConditionWithIdOnly = await prisma.ruleCondition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RuleConditionFindManyArgs>(args?: SelectSubset<T, RuleConditionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RuleCondition.
     * @param {RuleConditionCreateArgs} args - Arguments to create a RuleCondition.
     * @example
     * // Create one RuleCondition
     * const RuleCondition = await prisma.ruleCondition.create({
     *   data: {
     *     // ... data to create a RuleCondition
     *   }
     * })
     * 
     */
    create<T extends RuleConditionCreateArgs>(args: SelectSubset<T, RuleConditionCreateArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RuleConditions.
     * @param {RuleConditionCreateManyArgs} args - Arguments to create many RuleConditions.
     * @example
     * // Create many RuleConditions
     * const ruleCondition = await prisma.ruleCondition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RuleConditionCreateManyArgs>(args?: SelectSubset<T, RuleConditionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RuleConditions and returns the data saved in the database.
     * @param {RuleConditionCreateManyAndReturnArgs} args - Arguments to create many RuleConditions.
     * @example
     * // Create many RuleConditions
     * const ruleCondition = await prisma.ruleCondition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RuleConditions and only return the `id`
     * const ruleConditionWithIdOnly = await prisma.ruleCondition.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RuleConditionCreateManyAndReturnArgs>(args?: SelectSubset<T, RuleConditionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RuleCondition.
     * @param {RuleConditionDeleteArgs} args - Arguments to delete one RuleCondition.
     * @example
     * // Delete one RuleCondition
     * const RuleCondition = await prisma.ruleCondition.delete({
     *   where: {
     *     // ... filter to delete one RuleCondition
     *   }
     * })
     * 
     */
    delete<T extends RuleConditionDeleteArgs>(args: SelectSubset<T, RuleConditionDeleteArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RuleCondition.
     * @param {RuleConditionUpdateArgs} args - Arguments to update one RuleCondition.
     * @example
     * // Update one RuleCondition
     * const ruleCondition = await prisma.ruleCondition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RuleConditionUpdateArgs>(args: SelectSubset<T, RuleConditionUpdateArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RuleConditions.
     * @param {RuleConditionDeleteManyArgs} args - Arguments to filter RuleConditions to delete.
     * @example
     * // Delete a few RuleConditions
     * const { count } = await prisma.ruleCondition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RuleConditionDeleteManyArgs>(args?: SelectSubset<T, RuleConditionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RuleConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleConditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RuleConditions
     * const ruleCondition = await prisma.ruleCondition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RuleConditionUpdateManyArgs>(args: SelectSubset<T, RuleConditionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RuleCondition.
     * @param {RuleConditionUpsertArgs} args - Arguments to update or create a RuleCondition.
     * @example
     * // Update or create a RuleCondition
     * const ruleCondition = await prisma.ruleCondition.upsert({
     *   create: {
     *     // ... data to create a RuleCondition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RuleCondition we want to update
     *   }
     * })
     */
    upsert<T extends RuleConditionUpsertArgs>(args: SelectSubset<T, RuleConditionUpsertArgs<ExtArgs>>): Prisma__RuleConditionClient<$Result.GetResult<Prisma.$RuleConditionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RuleConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleConditionCountArgs} args - Arguments to filter RuleConditions to count.
     * @example
     * // Count the number of RuleConditions
     * const count = await prisma.ruleCondition.count({
     *   where: {
     *     // ... the filter for the RuleConditions we want to count
     *   }
     * })
    **/
    count<T extends RuleConditionCountArgs>(
      args?: Subset<T, RuleConditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RuleConditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RuleCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RuleConditionAggregateArgs>(args: Subset<T, RuleConditionAggregateArgs>): Prisma.PrismaPromise<GetRuleConditionAggregateType<T>>

    /**
     * Group by RuleCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleConditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RuleConditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RuleConditionGroupByArgs['orderBy'] }
        : { orderBy?: RuleConditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RuleConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRuleConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RuleCondition model
   */
  readonly fields: RuleConditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RuleCondition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RuleConditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    condition<T extends ConditionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConditionDefaultArgs<ExtArgs>>): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RuleCondition model
   */ 
  interface RuleConditionFieldRefs {
    readonly id: FieldRef<"RuleCondition", 'String'>
    readonly conditionId: FieldRef<"RuleCondition", 'String'>
    readonly parameter: FieldRef<"RuleCondition", 'String'>
    readonly operator: FieldRef<"RuleCondition", 'String'>
    readonly thresholdValue: FieldRef<"RuleCondition", 'Float'>
    readonly logicalOperator: FieldRef<"RuleCondition", 'LogicalOperator'>
  }
    

  // Custom InputTypes
  /**
   * RuleCondition findUnique
   */
  export type RuleConditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * Filter, which RuleCondition to fetch.
     */
    where: RuleConditionWhereUniqueInput
  }

  /**
   * RuleCondition findUniqueOrThrow
   */
  export type RuleConditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * Filter, which RuleCondition to fetch.
     */
    where: RuleConditionWhereUniqueInput
  }

  /**
   * RuleCondition findFirst
   */
  export type RuleConditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * Filter, which RuleCondition to fetch.
     */
    where?: RuleConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RuleConditions to fetch.
     */
    orderBy?: RuleConditionOrderByWithRelationInput | RuleConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RuleConditions.
     */
    cursor?: RuleConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RuleConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RuleConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RuleConditions.
     */
    distinct?: RuleConditionScalarFieldEnum | RuleConditionScalarFieldEnum[]
  }

  /**
   * RuleCondition findFirstOrThrow
   */
  export type RuleConditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * Filter, which RuleCondition to fetch.
     */
    where?: RuleConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RuleConditions to fetch.
     */
    orderBy?: RuleConditionOrderByWithRelationInput | RuleConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RuleConditions.
     */
    cursor?: RuleConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RuleConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RuleConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RuleConditions.
     */
    distinct?: RuleConditionScalarFieldEnum | RuleConditionScalarFieldEnum[]
  }

  /**
   * RuleCondition findMany
   */
  export type RuleConditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * Filter, which RuleConditions to fetch.
     */
    where?: RuleConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RuleConditions to fetch.
     */
    orderBy?: RuleConditionOrderByWithRelationInput | RuleConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RuleConditions.
     */
    cursor?: RuleConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RuleConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RuleConditions.
     */
    skip?: number
    distinct?: RuleConditionScalarFieldEnum | RuleConditionScalarFieldEnum[]
  }

  /**
   * RuleCondition create
   */
  export type RuleConditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * The data needed to create a RuleCondition.
     */
    data: XOR<RuleConditionCreateInput, RuleConditionUncheckedCreateInput>
  }

  /**
   * RuleCondition createMany
   */
  export type RuleConditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RuleConditions.
     */
    data: RuleConditionCreateManyInput | RuleConditionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RuleCondition createManyAndReturn
   */
  export type RuleConditionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RuleConditions.
     */
    data: RuleConditionCreateManyInput | RuleConditionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RuleCondition update
   */
  export type RuleConditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * The data needed to update a RuleCondition.
     */
    data: XOR<RuleConditionUpdateInput, RuleConditionUncheckedUpdateInput>
    /**
     * Choose, which RuleCondition to update.
     */
    where: RuleConditionWhereUniqueInput
  }

  /**
   * RuleCondition updateMany
   */
  export type RuleConditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RuleConditions.
     */
    data: XOR<RuleConditionUpdateManyMutationInput, RuleConditionUncheckedUpdateManyInput>
    /**
     * Filter which RuleConditions to update
     */
    where?: RuleConditionWhereInput
  }

  /**
   * RuleCondition upsert
   */
  export type RuleConditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * The filter to search for the RuleCondition to update in case it exists.
     */
    where: RuleConditionWhereUniqueInput
    /**
     * In case the RuleCondition found by the `where` argument doesn't exist, create a new RuleCondition with this data.
     */
    create: XOR<RuleConditionCreateInput, RuleConditionUncheckedCreateInput>
    /**
     * In case the RuleCondition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RuleConditionUpdateInput, RuleConditionUncheckedUpdateInput>
  }

  /**
   * RuleCondition delete
   */
  export type RuleConditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
    /**
     * Filter which RuleCondition to delete.
     */
    where: RuleConditionWhereUniqueInput
  }

  /**
   * RuleCondition deleteMany
   */
  export type RuleConditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RuleConditions to delete
     */
    where?: RuleConditionWhereInput
  }

  /**
   * RuleCondition without action
   */
  export type RuleConditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RuleCondition
     */
    select?: RuleConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RuleConditionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    role: 'role',
    password: 'password',
    companyId: 'companyId'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const PlaceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    companyId: 'companyId'
  };

  export type PlaceScalarFieldEnum = (typeof PlaceScalarFieldEnum)[keyof typeof PlaceScalarFieldEnum]


  export const WellScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    topic: 'topic',
    placeId: 'placeId'
  };

  export type WellScalarFieldEnum = (typeof WellScalarFieldEnum)[keyof typeof WellScalarFieldEnum]


  export const RecordScalarFieldEnum: {
    id: 'id',
    dt: 'dt',
    wid: 'wid',
    sid: 'sid',
    recid: 'recid',
    seqid: 'seqid',
    date: 'date',
    time: 'time',
    actcode: 'actcode',
    blockpos: 'blockpos',
    bitdepth: 'bitdepth',
    deptbitv: 'deptbitv',
    md: 'md',
    tvd: 'tvd',
    logdepth: 'logdepth',
    speedup: 'speedup',
    speeddown: 'speeddown',
    rop: 'rop',
    ropi: 'ropi',
    timeropi: 'timeropi',
    hklda: 'hklda',
    hkldx: 'hkldx',
    hkldpu: 'hkldpu',
    hkldso: 'hkldso',
    woba: 'woba',
    wobx: 'wobx',
    torqa: 'torqa',
    torqx: 'torqx',
    torqp: 'torqp',
    torqb: 'torqb',
    rpm: 'rpm',
    rpmm: 'rpmm',
    totrpm: 'totrpm',
    stppress: 'stppress',
    csgpress: 'csgpress',
    mudflowine: 'mudflowine',
    mudflowin: 'mudflowin',
    mudflowoute: 'mudflowoute',
    mudflowout: 'mudflowout',
    mudflowoutp: 'mudflowoutp',
    diffflow: 'diffflow',
    klflow: 'klflow',
    muddensin: 'muddensin',
    muddensout: 'muddensout',
    mudtempin: 'mudtempin',
    mudtempout: 'mudtempout',
    mudcondin: 'mudcondin',
    mudcondout: 'mudcondout',
    mfiann: 'mfiann',
    mfianne: 'mfianne',
    surfrev: 'surfrev',
    drillrev: 'drillrev',
    reamrev: 'reamrev',
    circrev: 'circrev',
    totrev: 'totrev',
    drilltime: 'drilltime',
    reamtime: 'reamtime',
    circtime: 'circtime',
    pumptime: 'pumptime',
    rotatingtime: 'rotatingtime',
    drilldist: 'drilldist',
    stroke1: 'stroke1',
    stroke2: 'stroke2',
    stroke3: 'stroke3',
    stroke4: 'stroke4',
    totstks: 'totstks',
    totstksa: 'totstksa',
    spm1: 'spm1',
    spm2: 'spm2',
    spm3: 'spm3',
    spm4: 'spm4',
    spm5: 'spm5',
    totspm: 'totspm',
    totspma: 'totspma',
    totpumpede: 'totpumpede',
    totpumpvol: 'totpumpvol',
    totpumpvolan: 'totpumpvolan',
    totpumpedea: 'totpumpedea',
    tankvoltot: 'tankvoltot',
    tankvolact: 'tankvolact',
    tankvoltt: 'tankvoltt',
    tankvolchgtot: 'tankvolchgtot',
    tankvolchgact: 'tankvolchgact',
    tankvolchgtt: 'tankvolchgtt',
    plbit: 'plbit',
    plstr: 'plstr',
    plann: 'plann',
    plsurf: 'plsurf',
    plmtr: 'plmtr',
    plmwd: 'plmwd',
    bithydpwr: 'bithydpwr',
    bithydpwra: 'bithydpwra',
    jif: 'jif',
    jetvel: 'jetvel',
    annveln: 'annveln',
    annvelx: 'annvelx',
    ecddpt: 'ecddpt',
    ecdbit: 'ecdbit',
    ecdshoe: 'ecdshoe',
    phydpwr: 'phydpwr',
    deptretm: 'deptretm',
    lagstks: 'lagstks',
    lagtime: 'lagtime',
    dnhstroke: 'dnhstroke',
    dnhtime: 'dnhtime',
    mse: 'mse',
    doc: 'doc',
    gas: 'gas',
    dstrength: 'dstrength',
    mseds: 'mseds',
    clcontent: 'clcontent',
    in_slips: 'in_slips',
    bht: 'bht',
    scfm: 'scfm',
    airflin: 'airflin',
    airfline: 'airfline',
    airfloutp: 'airfloutp',
    airflout: 'airflout',
    airpress: 'airpress',
    airtemp: 'airtemp',
    whp: 'whp',
    wht: 'wht',
    h2s1: 'h2s1',
    h2s2: 'h2s2',
    h2s3: 'h2s3',
    h2s4: 'h2s4',
    co21: 'co21',
    co22: 'co22',
    co23: 'co23',
    co24: 'co24',
    bitsize: 'bitsize',
    foamrate: 'foamrate',
    spare_1: 'spare_1',
    spare_2: 'spare_2',
    spare_3: 'spare_3',
    spare_4: 'spare_4',
    spare_5: 'spare_5',
    spare_6: 'spare_6',
    spare_7: 'spare_7',
    spare_8: 'spare_8',
    spare_9: 'spare_9',
    spare_10: 'spare_10',
    spare_50: 'spare_50',
    spare_51: 'spare_51',
    spare_52: 'spare_52',
    spare_53: 'spare_53',
    spare_54: 'spare_54',
    spare_55: 'spare_55',
    spare_56: 'spare_56',
    label: 'label',
    posisiy: 'posisiy',
    tipenote: 'tipenote',
    idnote: 'idnote',
    wellId: 'wellId'
  };

  export type RecordScalarFieldEnum = (typeof RecordScalarFieldEnum)[keyof typeof RecordScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    seen: 'seen',
    wellId: 'wellId',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ConditionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    wellId: 'wellId'
  };

  export type ConditionScalarFieldEnum = (typeof ConditionScalarFieldEnum)[keyof typeof ConditionScalarFieldEnum]


  export const RuleConditionScalarFieldEnum: {
    id: 'id',
    conditionId: 'conditionId',
    parameter: 'parameter',
    operator: 'operator',
    thresholdValue: 'thresholdValue',
    logicalOperator: 'logicalOperator'
  };

  export type RuleConditionScalarFieldEnum = (typeof RuleConditionScalarFieldEnum)[keyof typeof RuleConditionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'LogicalOperator'
   */
  export type EnumLogicalOperatorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogicalOperator'>
    


  /**
   * Reference to a field of type 'LogicalOperator[]'
   */
  export type ListEnumLogicalOperatorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LogicalOperator[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    address?: StringNullableFilter<"Company"> | string | null
    Employee?: EmployeeListRelationFilter
    Place?: PlaceListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    Employee?: EmployeeOrderByRelationAggregateInput
    Place?: PlaceOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    address?: StringNullableFilter<"Company"> | string | null
    Employee?: EmployeeListRelationFilter
    Place?: PlaceListRelationFilter
  }, "id" | "name">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    password?: StringFilter<"Employee"> | string
    companyId?: StringNullableFilter<"Employee"> | string | null
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    password?: SortOrder
    companyId?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    name?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    password?: StringFilter<"Employee"> | string
    companyId?: StringNullableFilter<"Employee"> | string | null
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
  }, "id" | "email">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    password?: SortOrder
    companyId?: SortOrderInput | SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    name?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    role?: EnumRoleWithAggregatesFilter<"Employee"> | $Enums.Role
    password?: StringWithAggregatesFilter<"Employee"> | string
    companyId?: StringNullableWithAggregatesFilter<"Employee"> | string | null
  }

  export type PlaceWhereInput = {
    AND?: PlaceWhereInput | PlaceWhereInput[]
    OR?: PlaceWhereInput[]
    NOT?: PlaceWhereInput | PlaceWhereInput[]
    id?: StringFilter<"Place"> | string
    name?: StringFilter<"Place"> | string
    address?: StringNullableFilter<"Place"> | string | null
    latitude?: FloatNullableFilter<"Place"> | number | null
    longitude?: FloatNullableFilter<"Place"> | number | null
    companyId?: StringFilter<"Place"> | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    Well?: WellListRelationFilter
  }

  export type PlaceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    companyId?: SortOrder
    company?: CompanyOrderByWithRelationInput
    Well?: WellOrderByRelationAggregateInput
  }

  export type PlaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlaceWhereInput | PlaceWhereInput[]
    OR?: PlaceWhereInput[]
    NOT?: PlaceWhereInput | PlaceWhereInput[]
    name?: StringFilter<"Place"> | string
    address?: StringNullableFilter<"Place"> | string | null
    latitude?: FloatNullableFilter<"Place"> | number | null
    longitude?: FloatNullableFilter<"Place"> | number | null
    companyId?: StringFilter<"Place"> | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    Well?: WellListRelationFilter
  }, "id">

  export type PlaceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    companyId?: SortOrder
    _count?: PlaceCountOrderByAggregateInput
    _avg?: PlaceAvgOrderByAggregateInput
    _max?: PlaceMaxOrderByAggregateInput
    _min?: PlaceMinOrderByAggregateInput
    _sum?: PlaceSumOrderByAggregateInput
  }

  export type PlaceScalarWhereWithAggregatesInput = {
    AND?: PlaceScalarWhereWithAggregatesInput | PlaceScalarWhereWithAggregatesInput[]
    OR?: PlaceScalarWhereWithAggregatesInput[]
    NOT?: PlaceScalarWhereWithAggregatesInput | PlaceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Place"> | string
    name?: StringWithAggregatesFilter<"Place"> | string
    address?: StringNullableWithAggregatesFilter<"Place"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"Place"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Place"> | number | null
    companyId?: StringWithAggregatesFilter<"Place"> | string
  }

  export type WellWhereInput = {
    AND?: WellWhereInput | WellWhereInput[]
    OR?: WellWhereInput[]
    NOT?: WellWhereInput | WellWhereInput[]
    id?: StringFilter<"Well"> | string
    name?: StringFilter<"Well"> | string
    address?: StringNullableFilter<"Well"> | string | null
    latitude?: FloatNullableFilter<"Well"> | number | null
    longitude?: FloatNullableFilter<"Well"> | number | null
    topic?: StringFilter<"Well"> | string
    placeId?: StringFilter<"Well"> | string
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
    Condition?: ConditionListRelationFilter
    Record?: RecordListRelationFilter
    Notification?: NotificationListRelationFilter
  }

  export type WellOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    topic?: SortOrder
    placeId?: SortOrder
    place?: PlaceOrderByWithRelationInput
    Condition?: ConditionOrderByRelationAggregateInput
    Record?: RecordOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
  }

  export type WellWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    topic?: string
    AND?: WellWhereInput | WellWhereInput[]
    OR?: WellWhereInput[]
    NOT?: WellWhereInput | WellWhereInput[]
    name?: StringFilter<"Well"> | string
    address?: StringNullableFilter<"Well"> | string | null
    latitude?: FloatNullableFilter<"Well"> | number | null
    longitude?: FloatNullableFilter<"Well"> | number | null
    placeId?: StringFilter<"Well"> | string
    place?: XOR<PlaceRelationFilter, PlaceWhereInput>
    Condition?: ConditionListRelationFilter
    Record?: RecordListRelationFilter
    Notification?: NotificationListRelationFilter
  }, "id" | "topic">

  export type WellOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    topic?: SortOrder
    placeId?: SortOrder
    _count?: WellCountOrderByAggregateInput
    _avg?: WellAvgOrderByAggregateInput
    _max?: WellMaxOrderByAggregateInput
    _min?: WellMinOrderByAggregateInput
    _sum?: WellSumOrderByAggregateInput
  }

  export type WellScalarWhereWithAggregatesInput = {
    AND?: WellScalarWhereWithAggregatesInput | WellScalarWhereWithAggregatesInput[]
    OR?: WellScalarWhereWithAggregatesInput[]
    NOT?: WellScalarWhereWithAggregatesInput | WellScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Well"> | string
    name?: StringWithAggregatesFilter<"Well"> | string
    address?: StringNullableWithAggregatesFilter<"Well"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"Well"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Well"> | number | null
    topic?: StringWithAggregatesFilter<"Well"> | string
    placeId?: StringWithAggregatesFilter<"Well"> | string
  }

  export type RecordWhereInput = {
    AND?: RecordWhereInput | RecordWhereInput[]
    OR?: RecordWhereInput[]
    NOT?: RecordWhereInput | RecordWhereInput[]
    id?: StringFilter<"Record"> | string
    dt?: DateTimeFilter<"Record"> | Date | string
    wid?: StringFilter<"Record"> | string
    sid?: StringFilter<"Record"> | string
    recid?: StringFilter<"Record"> | string
    seqid?: StringFilter<"Record"> | string
    date?: StringFilter<"Record"> | string
    time?: StringFilter<"Record"> | string
    actcode?: StringFilter<"Record"> | string
    blockpos?: StringFilter<"Record"> | string
    bitdepth?: StringFilter<"Record"> | string
    deptbitv?: StringFilter<"Record"> | string
    md?: StringFilter<"Record"> | string
    tvd?: StringFilter<"Record"> | string
    logdepth?: StringFilter<"Record"> | string
    speedup?: StringFilter<"Record"> | string
    speeddown?: StringFilter<"Record"> | string
    rop?: StringFilter<"Record"> | string
    ropi?: StringFilter<"Record"> | string
    timeropi?: StringFilter<"Record"> | string
    hklda?: StringFilter<"Record"> | string
    hkldx?: StringFilter<"Record"> | string
    hkldpu?: StringFilter<"Record"> | string
    hkldso?: StringFilter<"Record"> | string
    woba?: StringFilter<"Record"> | string
    wobx?: StringFilter<"Record"> | string
    torqa?: StringFilter<"Record"> | string
    torqx?: StringFilter<"Record"> | string
    torqp?: StringFilter<"Record"> | string
    torqb?: StringFilter<"Record"> | string
    rpm?: StringFilter<"Record"> | string
    rpmm?: StringFilter<"Record"> | string
    totrpm?: StringFilter<"Record"> | string
    stppress?: StringFilter<"Record"> | string
    csgpress?: StringFilter<"Record"> | string
    mudflowine?: StringFilter<"Record"> | string
    mudflowin?: StringFilter<"Record"> | string
    mudflowoute?: StringFilter<"Record"> | string
    mudflowout?: StringFilter<"Record"> | string
    mudflowoutp?: StringFilter<"Record"> | string
    diffflow?: StringFilter<"Record"> | string
    klflow?: StringFilter<"Record"> | string
    muddensin?: StringFilter<"Record"> | string
    muddensout?: StringFilter<"Record"> | string
    mudtempin?: StringFilter<"Record"> | string
    mudtempout?: StringFilter<"Record"> | string
    mudcondin?: StringFilter<"Record"> | string
    mudcondout?: StringFilter<"Record"> | string
    mfiann?: StringFilter<"Record"> | string
    mfianne?: StringFilter<"Record"> | string
    surfrev?: StringFilter<"Record"> | string
    drillrev?: StringFilter<"Record"> | string
    reamrev?: StringFilter<"Record"> | string
    circrev?: StringFilter<"Record"> | string
    totrev?: StringFilter<"Record"> | string
    drilltime?: StringFilter<"Record"> | string
    reamtime?: StringFilter<"Record"> | string
    circtime?: StringFilter<"Record"> | string
    pumptime?: StringFilter<"Record"> | string
    rotatingtime?: StringFilter<"Record"> | string
    drilldist?: StringFilter<"Record"> | string
    stroke1?: StringFilter<"Record"> | string
    stroke2?: StringFilter<"Record"> | string
    stroke3?: StringFilter<"Record"> | string
    stroke4?: StringFilter<"Record"> | string
    totstks?: StringFilter<"Record"> | string
    totstksa?: StringFilter<"Record"> | string
    spm1?: StringFilter<"Record"> | string
    spm2?: StringFilter<"Record"> | string
    spm3?: StringFilter<"Record"> | string
    spm4?: StringFilter<"Record"> | string
    spm5?: StringFilter<"Record"> | string
    totspm?: StringFilter<"Record"> | string
    totspma?: StringFilter<"Record"> | string
    totpumpede?: StringFilter<"Record"> | string
    totpumpvol?: StringFilter<"Record"> | string
    totpumpvolan?: StringFilter<"Record"> | string
    totpumpedea?: StringFilter<"Record"> | string
    tankvoltot?: StringFilter<"Record"> | string
    tankvolact?: StringFilter<"Record"> | string
    tankvoltt?: StringFilter<"Record"> | string
    tankvolchgtot?: StringFilter<"Record"> | string
    tankvolchgact?: StringFilter<"Record"> | string
    tankvolchgtt?: StringFilter<"Record"> | string
    plbit?: StringFilter<"Record"> | string
    plstr?: StringFilter<"Record"> | string
    plann?: StringFilter<"Record"> | string
    plsurf?: StringFilter<"Record"> | string
    plmtr?: StringFilter<"Record"> | string
    plmwd?: StringFilter<"Record"> | string
    bithydpwr?: StringFilter<"Record"> | string
    bithydpwra?: StringFilter<"Record"> | string
    jif?: StringFilter<"Record"> | string
    jetvel?: StringFilter<"Record"> | string
    annveln?: StringFilter<"Record"> | string
    annvelx?: StringFilter<"Record"> | string
    ecddpt?: StringFilter<"Record"> | string
    ecdbit?: StringFilter<"Record"> | string
    ecdshoe?: StringFilter<"Record"> | string
    phydpwr?: StringFilter<"Record"> | string
    deptretm?: StringFilter<"Record"> | string
    lagstks?: StringFilter<"Record"> | string
    lagtime?: StringFilter<"Record"> | string
    dnhstroke?: StringFilter<"Record"> | string
    dnhtime?: StringFilter<"Record"> | string
    mse?: StringFilter<"Record"> | string
    doc?: StringFilter<"Record"> | string
    gas?: StringFilter<"Record"> | string
    dstrength?: StringFilter<"Record"> | string
    mseds?: StringFilter<"Record"> | string
    clcontent?: StringFilter<"Record"> | string
    in_slips?: StringNullableFilter<"Record"> | string | null
    bht?: StringFilter<"Record"> | string
    scfm?: StringFilter<"Record"> | string
    airflin?: StringFilter<"Record"> | string
    airfline?: StringFilter<"Record"> | string
    airfloutp?: StringFilter<"Record"> | string
    airflout?: StringFilter<"Record"> | string
    airpress?: StringFilter<"Record"> | string
    airtemp?: StringFilter<"Record"> | string
    whp?: StringFilter<"Record"> | string
    wht?: StringFilter<"Record"> | string
    h2s1?: StringFilter<"Record"> | string
    h2s2?: StringFilter<"Record"> | string
    h2s3?: StringFilter<"Record"> | string
    h2s4?: StringFilter<"Record"> | string
    co21?: StringFilter<"Record"> | string
    co22?: StringFilter<"Record"> | string
    co23?: StringFilter<"Record"> | string
    co24?: StringFilter<"Record"> | string
    bitsize?: StringFilter<"Record"> | string
    foamrate?: StringFilter<"Record"> | string
    spare_1?: StringFilter<"Record"> | string
    spare_2?: StringFilter<"Record"> | string
    spare_3?: StringFilter<"Record"> | string
    spare_4?: StringFilter<"Record"> | string
    spare_5?: StringFilter<"Record"> | string
    spare_6?: StringFilter<"Record"> | string
    spare_7?: StringFilter<"Record"> | string
    spare_8?: StringFilter<"Record"> | string
    spare_9?: StringFilter<"Record"> | string
    spare_10?: StringFilter<"Record"> | string
    spare_50?: StringFilter<"Record"> | string
    spare_51?: StringFilter<"Record"> | string
    spare_52?: StringFilter<"Record"> | string
    spare_53?: StringFilter<"Record"> | string
    spare_54?: StringFilter<"Record"> | string
    spare_55?: StringFilter<"Record"> | string
    spare_56?: StringFilter<"Record"> | string
    label?: StringNullableFilter<"Record"> | string | null
    posisiy?: StringNullableFilter<"Record"> | string | null
    tipenote?: StringNullableFilter<"Record"> | string | null
    idnote?: StringNullableFilter<"Record"> | string | null
    wellId?: StringFilter<"Record"> | string
    well?: XOR<WellRelationFilter, WellWhereInput>
  }

  export type RecordOrderByWithRelationInput = {
    id?: SortOrder
    dt?: SortOrder
    wid?: SortOrder
    sid?: SortOrder
    recid?: SortOrder
    seqid?: SortOrder
    date?: SortOrder
    time?: SortOrder
    actcode?: SortOrder
    blockpos?: SortOrder
    bitdepth?: SortOrder
    deptbitv?: SortOrder
    md?: SortOrder
    tvd?: SortOrder
    logdepth?: SortOrder
    speedup?: SortOrder
    speeddown?: SortOrder
    rop?: SortOrder
    ropi?: SortOrder
    timeropi?: SortOrder
    hklda?: SortOrder
    hkldx?: SortOrder
    hkldpu?: SortOrder
    hkldso?: SortOrder
    woba?: SortOrder
    wobx?: SortOrder
    torqa?: SortOrder
    torqx?: SortOrder
    torqp?: SortOrder
    torqb?: SortOrder
    rpm?: SortOrder
    rpmm?: SortOrder
    totrpm?: SortOrder
    stppress?: SortOrder
    csgpress?: SortOrder
    mudflowine?: SortOrder
    mudflowin?: SortOrder
    mudflowoute?: SortOrder
    mudflowout?: SortOrder
    mudflowoutp?: SortOrder
    diffflow?: SortOrder
    klflow?: SortOrder
    muddensin?: SortOrder
    muddensout?: SortOrder
    mudtempin?: SortOrder
    mudtempout?: SortOrder
    mudcondin?: SortOrder
    mudcondout?: SortOrder
    mfiann?: SortOrder
    mfianne?: SortOrder
    surfrev?: SortOrder
    drillrev?: SortOrder
    reamrev?: SortOrder
    circrev?: SortOrder
    totrev?: SortOrder
    drilltime?: SortOrder
    reamtime?: SortOrder
    circtime?: SortOrder
    pumptime?: SortOrder
    rotatingtime?: SortOrder
    drilldist?: SortOrder
    stroke1?: SortOrder
    stroke2?: SortOrder
    stroke3?: SortOrder
    stroke4?: SortOrder
    totstks?: SortOrder
    totstksa?: SortOrder
    spm1?: SortOrder
    spm2?: SortOrder
    spm3?: SortOrder
    spm4?: SortOrder
    spm5?: SortOrder
    totspm?: SortOrder
    totspma?: SortOrder
    totpumpede?: SortOrder
    totpumpvol?: SortOrder
    totpumpvolan?: SortOrder
    totpumpedea?: SortOrder
    tankvoltot?: SortOrder
    tankvolact?: SortOrder
    tankvoltt?: SortOrder
    tankvolchgtot?: SortOrder
    tankvolchgact?: SortOrder
    tankvolchgtt?: SortOrder
    plbit?: SortOrder
    plstr?: SortOrder
    plann?: SortOrder
    plsurf?: SortOrder
    plmtr?: SortOrder
    plmwd?: SortOrder
    bithydpwr?: SortOrder
    bithydpwra?: SortOrder
    jif?: SortOrder
    jetvel?: SortOrder
    annveln?: SortOrder
    annvelx?: SortOrder
    ecddpt?: SortOrder
    ecdbit?: SortOrder
    ecdshoe?: SortOrder
    phydpwr?: SortOrder
    deptretm?: SortOrder
    lagstks?: SortOrder
    lagtime?: SortOrder
    dnhstroke?: SortOrder
    dnhtime?: SortOrder
    mse?: SortOrder
    doc?: SortOrder
    gas?: SortOrder
    dstrength?: SortOrder
    mseds?: SortOrder
    clcontent?: SortOrder
    in_slips?: SortOrderInput | SortOrder
    bht?: SortOrder
    scfm?: SortOrder
    airflin?: SortOrder
    airfline?: SortOrder
    airfloutp?: SortOrder
    airflout?: SortOrder
    airpress?: SortOrder
    airtemp?: SortOrder
    whp?: SortOrder
    wht?: SortOrder
    h2s1?: SortOrder
    h2s2?: SortOrder
    h2s3?: SortOrder
    h2s4?: SortOrder
    co21?: SortOrder
    co22?: SortOrder
    co23?: SortOrder
    co24?: SortOrder
    bitsize?: SortOrder
    foamrate?: SortOrder
    spare_1?: SortOrder
    spare_2?: SortOrder
    spare_3?: SortOrder
    spare_4?: SortOrder
    spare_5?: SortOrder
    spare_6?: SortOrder
    spare_7?: SortOrder
    spare_8?: SortOrder
    spare_9?: SortOrder
    spare_10?: SortOrder
    spare_50?: SortOrder
    spare_51?: SortOrder
    spare_52?: SortOrder
    spare_53?: SortOrder
    spare_54?: SortOrder
    spare_55?: SortOrder
    spare_56?: SortOrder
    label?: SortOrderInput | SortOrder
    posisiy?: SortOrderInput | SortOrder
    tipenote?: SortOrderInput | SortOrder
    idnote?: SortOrderInput | SortOrder
    wellId?: SortOrder
    well?: WellOrderByWithRelationInput
  }

  export type RecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecordWhereInput | RecordWhereInput[]
    OR?: RecordWhereInput[]
    NOT?: RecordWhereInput | RecordWhereInput[]
    dt?: DateTimeFilter<"Record"> | Date | string
    wid?: StringFilter<"Record"> | string
    sid?: StringFilter<"Record"> | string
    recid?: StringFilter<"Record"> | string
    seqid?: StringFilter<"Record"> | string
    date?: StringFilter<"Record"> | string
    time?: StringFilter<"Record"> | string
    actcode?: StringFilter<"Record"> | string
    blockpos?: StringFilter<"Record"> | string
    bitdepth?: StringFilter<"Record"> | string
    deptbitv?: StringFilter<"Record"> | string
    md?: StringFilter<"Record"> | string
    tvd?: StringFilter<"Record"> | string
    logdepth?: StringFilter<"Record"> | string
    speedup?: StringFilter<"Record"> | string
    speeddown?: StringFilter<"Record"> | string
    rop?: StringFilter<"Record"> | string
    ropi?: StringFilter<"Record"> | string
    timeropi?: StringFilter<"Record"> | string
    hklda?: StringFilter<"Record"> | string
    hkldx?: StringFilter<"Record"> | string
    hkldpu?: StringFilter<"Record"> | string
    hkldso?: StringFilter<"Record"> | string
    woba?: StringFilter<"Record"> | string
    wobx?: StringFilter<"Record"> | string
    torqa?: StringFilter<"Record"> | string
    torqx?: StringFilter<"Record"> | string
    torqp?: StringFilter<"Record"> | string
    torqb?: StringFilter<"Record"> | string
    rpm?: StringFilter<"Record"> | string
    rpmm?: StringFilter<"Record"> | string
    totrpm?: StringFilter<"Record"> | string
    stppress?: StringFilter<"Record"> | string
    csgpress?: StringFilter<"Record"> | string
    mudflowine?: StringFilter<"Record"> | string
    mudflowin?: StringFilter<"Record"> | string
    mudflowoute?: StringFilter<"Record"> | string
    mudflowout?: StringFilter<"Record"> | string
    mudflowoutp?: StringFilter<"Record"> | string
    diffflow?: StringFilter<"Record"> | string
    klflow?: StringFilter<"Record"> | string
    muddensin?: StringFilter<"Record"> | string
    muddensout?: StringFilter<"Record"> | string
    mudtempin?: StringFilter<"Record"> | string
    mudtempout?: StringFilter<"Record"> | string
    mudcondin?: StringFilter<"Record"> | string
    mudcondout?: StringFilter<"Record"> | string
    mfiann?: StringFilter<"Record"> | string
    mfianne?: StringFilter<"Record"> | string
    surfrev?: StringFilter<"Record"> | string
    drillrev?: StringFilter<"Record"> | string
    reamrev?: StringFilter<"Record"> | string
    circrev?: StringFilter<"Record"> | string
    totrev?: StringFilter<"Record"> | string
    drilltime?: StringFilter<"Record"> | string
    reamtime?: StringFilter<"Record"> | string
    circtime?: StringFilter<"Record"> | string
    pumptime?: StringFilter<"Record"> | string
    rotatingtime?: StringFilter<"Record"> | string
    drilldist?: StringFilter<"Record"> | string
    stroke1?: StringFilter<"Record"> | string
    stroke2?: StringFilter<"Record"> | string
    stroke3?: StringFilter<"Record"> | string
    stroke4?: StringFilter<"Record"> | string
    totstks?: StringFilter<"Record"> | string
    totstksa?: StringFilter<"Record"> | string
    spm1?: StringFilter<"Record"> | string
    spm2?: StringFilter<"Record"> | string
    spm3?: StringFilter<"Record"> | string
    spm4?: StringFilter<"Record"> | string
    spm5?: StringFilter<"Record"> | string
    totspm?: StringFilter<"Record"> | string
    totspma?: StringFilter<"Record"> | string
    totpumpede?: StringFilter<"Record"> | string
    totpumpvol?: StringFilter<"Record"> | string
    totpumpvolan?: StringFilter<"Record"> | string
    totpumpedea?: StringFilter<"Record"> | string
    tankvoltot?: StringFilter<"Record"> | string
    tankvolact?: StringFilter<"Record"> | string
    tankvoltt?: StringFilter<"Record"> | string
    tankvolchgtot?: StringFilter<"Record"> | string
    tankvolchgact?: StringFilter<"Record"> | string
    tankvolchgtt?: StringFilter<"Record"> | string
    plbit?: StringFilter<"Record"> | string
    plstr?: StringFilter<"Record"> | string
    plann?: StringFilter<"Record"> | string
    plsurf?: StringFilter<"Record"> | string
    plmtr?: StringFilter<"Record"> | string
    plmwd?: StringFilter<"Record"> | string
    bithydpwr?: StringFilter<"Record"> | string
    bithydpwra?: StringFilter<"Record"> | string
    jif?: StringFilter<"Record"> | string
    jetvel?: StringFilter<"Record"> | string
    annveln?: StringFilter<"Record"> | string
    annvelx?: StringFilter<"Record"> | string
    ecddpt?: StringFilter<"Record"> | string
    ecdbit?: StringFilter<"Record"> | string
    ecdshoe?: StringFilter<"Record"> | string
    phydpwr?: StringFilter<"Record"> | string
    deptretm?: StringFilter<"Record"> | string
    lagstks?: StringFilter<"Record"> | string
    lagtime?: StringFilter<"Record"> | string
    dnhstroke?: StringFilter<"Record"> | string
    dnhtime?: StringFilter<"Record"> | string
    mse?: StringFilter<"Record"> | string
    doc?: StringFilter<"Record"> | string
    gas?: StringFilter<"Record"> | string
    dstrength?: StringFilter<"Record"> | string
    mseds?: StringFilter<"Record"> | string
    clcontent?: StringFilter<"Record"> | string
    in_slips?: StringNullableFilter<"Record"> | string | null
    bht?: StringFilter<"Record"> | string
    scfm?: StringFilter<"Record"> | string
    airflin?: StringFilter<"Record"> | string
    airfline?: StringFilter<"Record"> | string
    airfloutp?: StringFilter<"Record"> | string
    airflout?: StringFilter<"Record"> | string
    airpress?: StringFilter<"Record"> | string
    airtemp?: StringFilter<"Record"> | string
    whp?: StringFilter<"Record"> | string
    wht?: StringFilter<"Record"> | string
    h2s1?: StringFilter<"Record"> | string
    h2s2?: StringFilter<"Record"> | string
    h2s3?: StringFilter<"Record"> | string
    h2s4?: StringFilter<"Record"> | string
    co21?: StringFilter<"Record"> | string
    co22?: StringFilter<"Record"> | string
    co23?: StringFilter<"Record"> | string
    co24?: StringFilter<"Record"> | string
    bitsize?: StringFilter<"Record"> | string
    foamrate?: StringFilter<"Record"> | string
    spare_1?: StringFilter<"Record"> | string
    spare_2?: StringFilter<"Record"> | string
    spare_3?: StringFilter<"Record"> | string
    spare_4?: StringFilter<"Record"> | string
    spare_5?: StringFilter<"Record"> | string
    spare_6?: StringFilter<"Record"> | string
    spare_7?: StringFilter<"Record"> | string
    spare_8?: StringFilter<"Record"> | string
    spare_9?: StringFilter<"Record"> | string
    spare_10?: StringFilter<"Record"> | string
    spare_50?: StringFilter<"Record"> | string
    spare_51?: StringFilter<"Record"> | string
    spare_52?: StringFilter<"Record"> | string
    spare_53?: StringFilter<"Record"> | string
    spare_54?: StringFilter<"Record"> | string
    spare_55?: StringFilter<"Record"> | string
    spare_56?: StringFilter<"Record"> | string
    label?: StringNullableFilter<"Record"> | string | null
    posisiy?: StringNullableFilter<"Record"> | string | null
    tipenote?: StringNullableFilter<"Record"> | string | null
    idnote?: StringNullableFilter<"Record"> | string | null
    wellId?: StringFilter<"Record"> | string
    well?: XOR<WellRelationFilter, WellWhereInput>
  }, "id">

  export type RecordOrderByWithAggregationInput = {
    id?: SortOrder
    dt?: SortOrder
    wid?: SortOrder
    sid?: SortOrder
    recid?: SortOrder
    seqid?: SortOrder
    date?: SortOrder
    time?: SortOrder
    actcode?: SortOrder
    blockpos?: SortOrder
    bitdepth?: SortOrder
    deptbitv?: SortOrder
    md?: SortOrder
    tvd?: SortOrder
    logdepth?: SortOrder
    speedup?: SortOrder
    speeddown?: SortOrder
    rop?: SortOrder
    ropi?: SortOrder
    timeropi?: SortOrder
    hklda?: SortOrder
    hkldx?: SortOrder
    hkldpu?: SortOrder
    hkldso?: SortOrder
    woba?: SortOrder
    wobx?: SortOrder
    torqa?: SortOrder
    torqx?: SortOrder
    torqp?: SortOrder
    torqb?: SortOrder
    rpm?: SortOrder
    rpmm?: SortOrder
    totrpm?: SortOrder
    stppress?: SortOrder
    csgpress?: SortOrder
    mudflowine?: SortOrder
    mudflowin?: SortOrder
    mudflowoute?: SortOrder
    mudflowout?: SortOrder
    mudflowoutp?: SortOrder
    diffflow?: SortOrder
    klflow?: SortOrder
    muddensin?: SortOrder
    muddensout?: SortOrder
    mudtempin?: SortOrder
    mudtempout?: SortOrder
    mudcondin?: SortOrder
    mudcondout?: SortOrder
    mfiann?: SortOrder
    mfianne?: SortOrder
    surfrev?: SortOrder
    drillrev?: SortOrder
    reamrev?: SortOrder
    circrev?: SortOrder
    totrev?: SortOrder
    drilltime?: SortOrder
    reamtime?: SortOrder
    circtime?: SortOrder
    pumptime?: SortOrder
    rotatingtime?: SortOrder
    drilldist?: SortOrder
    stroke1?: SortOrder
    stroke2?: SortOrder
    stroke3?: SortOrder
    stroke4?: SortOrder
    totstks?: SortOrder
    totstksa?: SortOrder
    spm1?: SortOrder
    spm2?: SortOrder
    spm3?: SortOrder
    spm4?: SortOrder
    spm5?: SortOrder
    totspm?: SortOrder
    totspma?: SortOrder
    totpumpede?: SortOrder
    totpumpvol?: SortOrder
    totpumpvolan?: SortOrder
    totpumpedea?: SortOrder
    tankvoltot?: SortOrder
    tankvolact?: SortOrder
    tankvoltt?: SortOrder
    tankvolchgtot?: SortOrder
    tankvolchgact?: SortOrder
    tankvolchgtt?: SortOrder
    plbit?: SortOrder
    plstr?: SortOrder
    plann?: SortOrder
    plsurf?: SortOrder
    plmtr?: SortOrder
    plmwd?: SortOrder
    bithydpwr?: SortOrder
    bithydpwra?: SortOrder
    jif?: SortOrder
    jetvel?: SortOrder
    annveln?: SortOrder
    annvelx?: SortOrder
    ecddpt?: SortOrder
    ecdbit?: SortOrder
    ecdshoe?: SortOrder
    phydpwr?: SortOrder
    deptretm?: SortOrder
    lagstks?: SortOrder
    lagtime?: SortOrder
    dnhstroke?: SortOrder
    dnhtime?: SortOrder
    mse?: SortOrder
    doc?: SortOrder
    gas?: SortOrder
    dstrength?: SortOrder
    mseds?: SortOrder
    clcontent?: SortOrder
    in_slips?: SortOrderInput | SortOrder
    bht?: SortOrder
    scfm?: SortOrder
    airflin?: SortOrder
    airfline?: SortOrder
    airfloutp?: SortOrder
    airflout?: SortOrder
    airpress?: SortOrder
    airtemp?: SortOrder
    whp?: SortOrder
    wht?: SortOrder
    h2s1?: SortOrder
    h2s2?: SortOrder
    h2s3?: SortOrder
    h2s4?: SortOrder
    co21?: SortOrder
    co22?: SortOrder
    co23?: SortOrder
    co24?: SortOrder
    bitsize?: SortOrder
    foamrate?: SortOrder
    spare_1?: SortOrder
    spare_2?: SortOrder
    spare_3?: SortOrder
    spare_4?: SortOrder
    spare_5?: SortOrder
    spare_6?: SortOrder
    spare_7?: SortOrder
    spare_8?: SortOrder
    spare_9?: SortOrder
    spare_10?: SortOrder
    spare_50?: SortOrder
    spare_51?: SortOrder
    spare_52?: SortOrder
    spare_53?: SortOrder
    spare_54?: SortOrder
    spare_55?: SortOrder
    spare_56?: SortOrder
    label?: SortOrderInput | SortOrder
    posisiy?: SortOrderInput | SortOrder
    tipenote?: SortOrderInput | SortOrder
    idnote?: SortOrderInput | SortOrder
    wellId?: SortOrder
    _count?: RecordCountOrderByAggregateInput
    _max?: RecordMaxOrderByAggregateInput
    _min?: RecordMinOrderByAggregateInput
  }

  export type RecordScalarWhereWithAggregatesInput = {
    AND?: RecordScalarWhereWithAggregatesInput | RecordScalarWhereWithAggregatesInput[]
    OR?: RecordScalarWhereWithAggregatesInput[]
    NOT?: RecordScalarWhereWithAggregatesInput | RecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Record"> | string
    dt?: DateTimeWithAggregatesFilter<"Record"> | Date | string
    wid?: StringWithAggregatesFilter<"Record"> | string
    sid?: StringWithAggregatesFilter<"Record"> | string
    recid?: StringWithAggregatesFilter<"Record"> | string
    seqid?: StringWithAggregatesFilter<"Record"> | string
    date?: StringWithAggregatesFilter<"Record"> | string
    time?: StringWithAggregatesFilter<"Record"> | string
    actcode?: StringWithAggregatesFilter<"Record"> | string
    blockpos?: StringWithAggregatesFilter<"Record"> | string
    bitdepth?: StringWithAggregatesFilter<"Record"> | string
    deptbitv?: StringWithAggregatesFilter<"Record"> | string
    md?: StringWithAggregatesFilter<"Record"> | string
    tvd?: StringWithAggregatesFilter<"Record"> | string
    logdepth?: StringWithAggregatesFilter<"Record"> | string
    speedup?: StringWithAggregatesFilter<"Record"> | string
    speeddown?: StringWithAggregatesFilter<"Record"> | string
    rop?: StringWithAggregatesFilter<"Record"> | string
    ropi?: StringWithAggregatesFilter<"Record"> | string
    timeropi?: StringWithAggregatesFilter<"Record"> | string
    hklda?: StringWithAggregatesFilter<"Record"> | string
    hkldx?: StringWithAggregatesFilter<"Record"> | string
    hkldpu?: StringWithAggregatesFilter<"Record"> | string
    hkldso?: StringWithAggregatesFilter<"Record"> | string
    woba?: StringWithAggregatesFilter<"Record"> | string
    wobx?: StringWithAggregatesFilter<"Record"> | string
    torqa?: StringWithAggregatesFilter<"Record"> | string
    torqx?: StringWithAggregatesFilter<"Record"> | string
    torqp?: StringWithAggregatesFilter<"Record"> | string
    torqb?: StringWithAggregatesFilter<"Record"> | string
    rpm?: StringWithAggregatesFilter<"Record"> | string
    rpmm?: StringWithAggregatesFilter<"Record"> | string
    totrpm?: StringWithAggregatesFilter<"Record"> | string
    stppress?: StringWithAggregatesFilter<"Record"> | string
    csgpress?: StringWithAggregatesFilter<"Record"> | string
    mudflowine?: StringWithAggregatesFilter<"Record"> | string
    mudflowin?: StringWithAggregatesFilter<"Record"> | string
    mudflowoute?: StringWithAggregatesFilter<"Record"> | string
    mudflowout?: StringWithAggregatesFilter<"Record"> | string
    mudflowoutp?: StringWithAggregatesFilter<"Record"> | string
    diffflow?: StringWithAggregatesFilter<"Record"> | string
    klflow?: StringWithAggregatesFilter<"Record"> | string
    muddensin?: StringWithAggregatesFilter<"Record"> | string
    muddensout?: StringWithAggregatesFilter<"Record"> | string
    mudtempin?: StringWithAggregatesFilter<"Record"> | string
    mudtempout?: StringWithAggregatesFilter<"Record"> | string
    mudcondin?: StringWithAggregatesFilter<"Record"> | string
    mudcondout?: StringWithAggregatesFilter<"Record"> | string
    mfiann?: StringWithAggregatesFilter<"Record"> | string
    mfianne?: StringWithAggregatesFilter<"Record"> | string
    surfrev?: StringWithAggregatesFilter<"Record"> | string
    drillrev?: StringWithAggregatesFilter<"Record"> | string
    reamrev?: StringWithAggregatesFilter<"Record"> | string
    circrev?: StringWithAggregatesFilter<"Record"> | string
    totrev?: StringWithAggregatesFilter<"Record"> | string
    drilltime?: StringWithAggregatesFilter<"Record"> | string
    reamtime?: StringWithAggregatesFilter<"Record"> | string
    circtime?: StringWithAggregatesFilter<"Record"> | string
    pumptime?: StringWithAggregatesFilter<"Record"> | string
    rotatingtime?: StringWithAggregatesFilter<"Record"> | string
    drilldist?: StringWithAggregatesFilter<"Record"> | string
    stroke1?: StringWithAggregatesFilter<"Record"> | string
    stroke2?: StringWithAggregatesFilter<"Record"> | string
    stroke3?: StringWithAggregatesFilter<"Record"> | string
    stroke4?: StringWithAggregatesFilter<"Record"> | string
    totstks?: StringWithAggregatesFilter<"Record"> | string
    totstksa?: StringWithAggregatesFilter<"Record"> | string
    spm1?: StringWithAggregatesFilter<"Record"> | string
    spm2?: StringWithAggregatesFilter<"Record"> | string
    spm3?: StringWithAggregatesFilter<"Record"> | string
    spm4?: StringWithAggregatesFilter<"Record"> | string
    spm5?: StringWithAggregatesFilter<"Record"> | string
    totspm?: StringWithAggregatesFilter<"Record"> | string
    totspma?: StringWithAggregatesFilter<"Record"> | string
    totpumpede?: StringWithAggregatesFilter<"Record"> | string
    totpumpvol?: StringWithAggregatesFilter<"Record"> | string
    totpumpvolan?: StringWithAggregatesFilter<"Record"> | string
    totpumpedea?: StringWithAggregatesFilter<"Record"> | string
    tankvoltot?: StringWithAggregatesFilter<"Record"> | string
    tankvolact?: StringWithAggregatesFilter<"Record"> | string
    tankvoltt?: StringWithAggregatesFilter<"Record"> | string
    tankvolchgtot?: StringWithAggregatesFilter<"Record"> | string
    tankvolchgact?: StringWithAggregatesFilter<"Record"> | string
    tankvolchgtt?: StringWithAggregatesFilter<"Record"> | string
    plbit?: StringWithAggregatesFilter<"Record"> | string
    plstr?: StringWithAggregatesFilter<"Record"> | string
    plann?: StringWithAggregatesFilter<"Record"> | string
    plsurf?: StringWithAggregatesFilter<"Record"> | string
    plmtr?: StringWithAggregatesFilter<"Record"> | string
    plmwd?: StringWithAggregatesFilter<"Record"> | string
    bithydpwr?: StringWithAggregatesFilter<"Record"> | string
    bithydpwra?: StringWithAggregatesFilter<"Record"> | string
    jif?: StringWithAggregatesFilter<"Record"> | string
    jetvel?: StringWithAggregatesFilter<"Record"> | string
    annveln?: StringWithAggregatesFilter<"Record"> | string
    annvelx?: StringWithAggregatesFilter<"Record"> | string
    ecddpt?: StringWithAggregatesFilter<"Record"> | string
    ecdbit?: StringWithAggregatesFilter<"Record"> | string
    ecdshoe?: StringWithAggregatesFilter<"Record"> | string
    phydpwr?: StringWithAggregatesFilter<"Record"> | string
    deptretm?: StringWithAggregatesFilter<"Record"> | string
    lagstks?: StringWithAggregatesFilter<"Record"> | string
    lagtime?: StringWithAggregatesFilter<"Record"> | string
    dnhstroke?: StringWithAggregatesFilter<"Record"> | string
    dnhtime?: StringWithAggregatesFilter<"Record"> | string
    mse?: StringWithAggregatesFilter<"Record"> | string
    doc?: StringWithAggregatesFilter<"Record"> | string
    gas?: StringWithAggregatesFilter<"Record"> | string
    dstrength?: StringWithAggregatesFilter<"Record"> | string
    mseds?: StringWithAggregatesFilter<"Record"> | string
    clcontent?: StringWithAggregatesFilter<"Record"> | string
    in_slips?: StringNullableWithAggregatesFilter<"Record"> | string | null
    bht?: StringWithAggregatesFilter<"Record"> | string
    scfm?: StringWithAggregatesFilter<"Record"> | string
    airflin?: StringWithAggregatesFilter<"Record"> | string
    airfline?: StringWithAggregatesFilter<"Record"> | string
    airfloutp?: StringWithAggregatesFilter<"Record"> | string
    airflout?: StringWithAggregatesFilter<"Record"> | string
    airpress?: StringWithAggregatesFilter<"Record"> | string
    airtemp?: StringWithAggregatesFilter<"Record"> | string
    whp?: StringWithAggregatesFilter<"Record"> | string
    wht?: StringWithAggregatesFilter<"Record"> | string
    h2s1?: StringWithAggregatesFilter<"Record"> | string
    h2s2?: StringWithAggregatesFilter<"Record"> | string
    h2s3?: StringWithAggregatesFilter<"Record"> | string
    h2s4?: StringWithAggregatesFilter<"Record"> | string
    co21?: StringWithAggregatesFilter<"Record"> | string
    co22?: StringWithAggregatesFilter<"Record"> | string
    co23?: StringWithAggregatesFilter<"Record"> | string
    co24?: StringWithAggregatesFilter<"Record"> | string
    bitsize?: StringWithAggregatesFilter<"Record"> | string
    foamrate?: StringWithAggregatesFilter<"Record"> | string
    spare_1?: StringWithAggregatesFilter<"Record"> | string
    spare_2?: StringWithAggregatesFilter<"Record"> | string
    spare_3?: StringWithAggregatesFilter<"Record"> | string
    spare_4?: StringWithAggregatesFilter<"Record"> | string
    spare_5?: StringWithAggregatesFilter<"Record"> | string
    spare_6?: StringWithAggregatesFilter<"Record"> | string
    spare_7?: StringWithAggregatesFilter<"Record"> | string
    spare_8?: StringWithAggregatesFilter<"Record"> | string
    spare_9?: StringWithAggregatesFilter<"Record"> | string
    spare_10?: StringWithAggregatesFilter<"Record"> | string
    spare_50?: StringWithAggregatesFilter<"Record"> | string
    spare_51?: StringWithAggregatesFilter<"Record"> | string
    spare_52?: StringWithAggregatesFilter<"Record"> | string
    spare_53?: StringWithAggregatesFilter<"Record"> | string
    spare_54?: StringWithAggregatesFilter<"Record"> | string
    spare_55?: StringWithAggregatesFilter<"Record"> | string
    spare_56?: StringWithAggregatesFilter<"Record"> | string
    label?: StringNullableWithAggregatesFilter<"Record"> | string | null
    posisiy?: StringNullableWithAggregatesFilter<"Record"> | string | null
    tipenote?: StringNullableWithAggregatesFilter<"Record"> | string | null
    idnote?: StringNullableWithAggregatesFilter<"Record"> | string | null
    wellId?: StringWithAggregatesFilter<"Record"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    seen?: BoolFilter<"Notification"> | boolean
    wellId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    well?: XOR<WellRelationFilter, WellWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrderInput | SortOrder
    seen?: SortOrder
    wellId?: SortOrder
    createdAt?: SortOrder
    well?: WellOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    seen?: BoolFilter<"Notification"> | boolean
    wellId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    well?: XOR<WellRelationFilter, WellWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrderInput | SortOrder
    seen?: SortOrder
    wellId?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    seen?: BoolWithAggregatesFilter<"Notification"> | boolean
    wellId?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ConditionWhereInput = {
    AND?: ConditionWhereInput | ConditionWhereInput[]
    OR?: ConditionWhereInput[]
    NOT?: ConditionWhereInput | ConditionWhereInput[]
    id?: StringFilter<"Condition"> | string
    name?: StringFilter<"Condition"> | string
    wellId?: StringFilter<"Condition"> | string
    rules?: RuleConditionListRelationFilter
    well?: XOR<WellRelationFilter, WellWhereInput>
  }

  export type ConditionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    wellId?: SortOrder
    rules?: RuleConditionOrderByRelationAggregateInput
    well?: WellOrderByWithRelationInput
  }

  export type ConditionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConditionWhereInput | ConditionWhereInput[]
    OR?: ConditionWhereInput[]
    NOT?: ConditionWhereInput | ConditionWhereInput[]
    name?: StringFilter<"Condition"> | string
    wellId?: StringFilter<"Condition"> | string
    rules?: RuleConditionListRelationFilter
    well?: XOR<WellRelationFilter, WellWhereInput>
  }, "id">

  export type ConditionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    wellId?: SortOrder
    _count?: ConditionCountOrderByAggregateInput
    _max?: ConditionMaxOrderByAggregateInput
    _min?: ConditionMinOrderByAggregateInput
  }

  export type ConditionScalarWhereWithAggregatesInput = {
    AND?: ConditionScalarWhereWithAggregatesInput | ConditionScalarWhereWithAggregatesInput[]
    OR?: ConditionScalarWhereWithAggregatesInput[]
    NOT?: ConditionScalarWhereWithAggregatesInput | ConditionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Condition"> | string
    name?: StringWithAggregatesFilter<"Condition"> | string
    wellId?: StringWithAggregatesFilter<"Condition"> | string
  }

  export type RuleConditionWhereInput = {
    AND?: RuleConditionWhereInput | RuleConditionWhereInput[]
    OR?: RuleConditionWhereInput[]
    NOT?: RuleConditionWhereInput | RuleConditionWhereInput[]
    id?: StringFilter<"RuleCondition"> | string
    conditionId?: StringFilter<"RuleCondition"> | string
    parameter?: StringFilter<"RuleCondition"> | string
    operator?: StringFilter<"RuleCondition"> | string
    thresholdValue?: FloatFilter<"RuleCondition"> | number
    logicalOperator?: EnumLogicalOperatorFilter<"RuleCondition"> | $Enums.LogicalOperator
    condition?: XOR<ConditionRelationFilter, ConditionWhereInput>
  }

  export type RuleConditionOrderByWithRelationInput = {
    id?: SortOrder
    conditionId?: SortOrder
    parameter?: SortOrder
    operator?: SortOrder
    thresholdValue?: SortOrder
    logicalOperator?: SortOrder
    condition?: ConditionOrderByWithRelationInput
  }

  export type RuleConditionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RuleConditionWhereInput | RuleConditionWhereInput[]
    OR?: RuleConditionWhereInput[]
    NOT?: RuleConditionWhereInput | RuleConditionWhereInput[]
    conditionId?: StringFilter<"RuleCondition"> | string
    parameter?: StringFilter<"RuleCondition"> | string
    operator?: StringFilter<"RuleCondition"> | string
    thresholdValue?: FloatFilter<"RuleCondition"> | number
    logicalOperator?: EnumLogicalOperatorFilter<"RuleCondition"> | $Enums.LogicalOperator
    condition?: XOR<ConditionRelationFilter, ConditionWhereInput>
  }, "id">

  export type RuleConditionOrderByWithAggregationInput = {
    id?: SortOrder
    conditionId?: SortOrder
    parameter?: SortOrder
    operator?: SortOrder
    thresholdValue?: SortOrder
    logicalOperator?: SortOrder
    _count?: RuleConditionCountOrderByAggregateInput
    _avg?: RuleConditionAvgOrderByAggregateInput
    _max?: RuleConditionMaxOrderByAggregateInput
    _min?: RuleConditionMinOrderByAggregateInput
    _sum?: RuleConditionSumOrderByAggregateInput
  }

  export type RuleConditionScalarWhereWithAggregatesInput = {
    AND?: RuleConditionScalarWhereWithAggregatesInput | RuleConditionScalarWhereWithAggregatesInput[]
    OR?: RuleConditionScalarWhereWithAggregatesInput[]
    NOT?: RuleConditionScalarWhereWithAggregatesInput | RuleConditionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RuleCondition"> | string
    conditionId?: StringWithAggregatesFilter<"RuleCondition"> | string
    parameter?: StringWithAggregatesFilter<"RuleCondition"> | string
    operator?: StringWithAggregatesFilter<"RuleCondition"> | string
    thresholdValue?: FloatWithAggregatesFilter<"RuleCondition"> | number
    logicalOperator?: EnumLogicalOperatorWithAggregatesFilter<"RuleCondition"> | $Enums.LogicalOperator
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    address?: string | null
    Employee?: EmployeeCreateNestedManyWithoutCompanyInput
    Place?: PlaceCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
    Place?: PlaceUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    Employee?: EmployeeUpdateManyWithoutCompanyNestedInput
    Place?: PlaceUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    Employee?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    Place?: PlaceUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    address?: string | null
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeCreateInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.Role
    password: string
    company?: CompanyCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.Role
    password: string
    companyId?: string | null
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    password?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    password?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeCreateManyInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.Role
    password: string
    companyId?: string | null
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    password?: StringFieldUpdateOperationsInput | string
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlaceCreateInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    company: CompanyCreateNestedOneWithoutPlaceInput
    Well?: WellCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    companyId: string
    Well?: WellUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    company?: CompanyUpdateOneRequiredWithoutPlaceNestedInput
    Well?: WellUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    companyId?: StringFieldUpdateOperationsInput | string
    Well?: WellUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    companyId: string
  }

  export type PlaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PlaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    companyId?: StringFieldUpdateOperationsInput | string
  }

  export type WellCreateInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    place: PlaceCreateNestedOneWithoutWellInput
    Condition?: ConditionCreateNestedManyWithoutWellInput
    Record?: RecordCreateNestedManyWithoutWellInput
    Notification?: NotificationCreateNestedManyWithoutWellInput
  }

  export type WellUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    placeId: string
    Condition?: ConditionUncheckedCreateNestedManyWithoutWellInput
    Record?: RecordUncheckedCreateNestedManyWithoutWellInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutWellInput
  }

  export type WellUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    place?: PlaceUpdateOneRequiredWithoutWellNestedInput
    Condition?: ConditionUpdateManyWithoutWellNestedInput
    Record?: RecordUpdateManyWithoutWellNestedInput
    Notification?: NotificationUpdateManyWithoutWellNestedInput
  }

  export type WellUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    Condition?: ConditionUncheckedUpdateManyWithoutWellNestedInput
    Record?: RecordUncheckedUpdateManyWithoutWellNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutWellNestedInput
  }

  export type WellCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    placeId: string
  }

  export type WellUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
  }

  export type WellUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
  }

  export type RecordCreateInput = {
    id?: string
    dt: Date | string
    wid: string
    sid: string
    recid: string
    seqid: string
    date: string
    time: string
    actcode: string
    blockpos: string
    bitdepth: string
    deptbitv: string
    md: string
    tvd: string
    logdepth: string
    speedup: string
    speeddown: string
    rop: string
    ropi: string
    timeropi: string
    hklda: string
    hkldx: string
    hkldpu: string
    hkldso: string
    woba: string
    wobx: string
    torqa: string
    torqx: string
    torqp: string
    torqb: string
    rpm: string
    rpmm: string
    totrpm: string
    stppress: string
    csgpress: string
    mudflowine: string
    mudflowin: string
    mudflowoute: string
    mudflowout: string
    mudflowoutp: string
    diffflow: string
    klflow: string
    muddensin: string
    muddensout: string
    mudtempin: string
    mudtempout: string
    mudcondin: string
    mudcondout: string
    mfiann: string
    mfianne: string
    surfrev: string
    drillrev: string
    reamrev: string
    circrev: string
    totrev: string
    drilltime: string
    reamtime: string
    circtime: string
    pumptime: string
    rotatingtime: string
    drilldist: string
    stroke1: string
    stroke2: string
    stroke3: string
    stroke4: string
    totstks: string
    totstksa: string
    spm1: string
    spm2: string
    spm3: string
    spm4: string
    spm5: string
    totspm: string
    totspma: string
    totpumpede: string
    totpumpvol: string
    totpumpvolan: string
    totpumpedea: string
    tankvoltot: string
    tankvolact: string
    tankvoltt: string
    tankvolchgtot: string
    tankvolchgact: string
    tankvolchgtt: string
    plbit: string
    plstr: string
    plann: string
    plsurf: string
    plmtr: string
    plmwd: string
    bithydpwr: string
    bithydpwra: string
    jif: string
    jetvel: string
    annveln: string
    annvelx: string
    ecddpt: string
    ecdbit: string
    ecdshoe: string
    phydpwr: string
    deptretm: string
    lagstks: string
    lagtime: string
    dnhstroke: string
    dnhtime: string
    mse: string
    doc: string
    gas: string
    dstrength: string
    mseds: string
    clcontent: string
    in_slips?: string | null
    bht: string
    scfm: string
    airflin: string
    airfline: string
    airfloutp: string
    airflout: string
    airpress: string
    airtemp: string
    whp: string
    wht: string
    h2s1: string
    h2s2: string
    h2s3: string
    h2s4: string
    co21: string
    co22: string
    co23: string
    co24: string
    bitsize: string
    foamrate: string
    spare_1: string
    spare_2: string
    spare_3: string
    spare_4: string
    spare_5: string
    spare_6: string
    spare_7: string
    spare_8: string
    spare_9: string
    spare_10: string
    spare_50: string
    spare_51: string
    spare_52: string
    spare_53: string
    spare_54: string
    spare_55: string
    spare_56: string
    label?: string | null
    posisiy?: string | null
    tipenote?: string | null
    idnote?: string | null
    well: WellCreateNestedOneWithoutRecordInput
  }

  export type RecordUncheckedCreateInput = {
    id?: string
    dt: Date | string
    wid: string
    sid: string
    recid: string
    seqid: string
    date: string
    time: string
    actcode: string
    blockpos: string
    bitdepth: string
    deptbitv: string
    md: string
    tvd: string
    logdepth: string
    speedup: string
    speeddown: string
    rop: string
    ropi: string
    timeropi: string
    hklda: string
    hkldx: string
    hkldpu: string
    hkldso: string
    woba: string
    wobx: string
    torqa: string
    torqx: string
    torqp: string
    torqb: string
    rpm: string
    rpmm: string
    totrpm: string
    stppress: string
    csgpress: string
    mudflowine: string
    mudflowin: string
    mudflowoute: string
    mudflowout: string
    mudflowoutp: string
    diffflow: string
    klflow: string
    muddensin: string
    muddensout: string
    mudtempin: string
    mudtempout: string
    mudcondin: string
    mudcondout: string
    mfiann: string
    mfianne: string
    surfrev: string
    drillrev: string
    reamrev: string
    circrev: string
    totrev: string
    drilltime: string
    reamtime: string
    circtime: string
    pumptime: string
    rotatingtime: string
    drilldist: string
    stroke1: string
    stroke2: string
    stroke3: string
    stroke4: string
    totstks: string
    totstksa: string
    spm1: string
    spm2: string
    spm3: string
    spm4: string
    spm5: string
    totspm: string
    totspma: string
    totpumpede: string
    totpumpvol: string
    totpumpvolan: string
    totpumpedea: string
    tankvoltot: string
    tankvolact: string
    tankvoltt: string
    tankvolchgtot: string
    tankvolchgact: string
    tankvolchgtt: string
    plbit: string
    plstr: string
    plann: string
    plsurf: string
    plmtr: string
    plmwd: string
    bithydpwr: string
    bithydpwra: string
    jif: string
    jetvel: string
    annveln: string
    annvelx: string
    ecddpt: string
    ecdbit: string
    ecdshoe: string
    phydpwr: string
    deptretm: string
    lagstks: string
    lagtime: string
    dnhstroke: string
    dnhtime: string
    mse: string
    doc: string
    gas: string
    dstrength: string
    mseds: string
    clcontent: string
    in_slips?: string | null
    bht: string
    scfm: string
    airflin: string
    airfline: string
    airfloutp: string
    airflout: string
    airpress: string
    airtemp: string
    whp: string
    wht: string
    h2s1: string
    h2s2: string
    h2s3: string
    h2s4: string
    co21: string
    co22: string
    co23: string
    co24: string
    bitsize: string
    foamrate: string
    spare_1: string
    spare_2: string
    spare_3: string
    spare_4: string
    spare_5: string
    spare_6: string
    spare_7: string
    spare_8: string
    spare_9: string
    spare_10: string
    spare_50: string
    spare_51: string
    spare_52: string
    spare_53: string
    spare_54: string
    spare_55: string
    spare_56: string
    label?: string | null
    posisiy?: string | null
    tipenote?: string | null
    idnote?: string | null
    wellId: string
  }

  export type RecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dt?: DateTimeFieldUpdateOperationsInput | Date | string
    wid?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    recid?: StringFieldUpdateOperationsInput | string
    seqid?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    actcode?: StringFieldUpdateOperationsInput | string
    blockpos?: StringFieldUpdateOperationsInput | string
    bitdepth?: StringFieldUpdateOperationsInput | string
    deptbitv?: StringFieldUpdateOperationsInput | string
    md?: StringFieldUpdateOperationsInput | string
    tvd?: StringFieldUpdateOperationsInput | string
    logdepth?: StringFieldUpdateOperationsInput | string
    speedup?: StringFieldUpdateOperationsInput | string
    speeddown?: StringFieldUpdateOperationsInput | string
    rop?: StringFieldUpdateOperationsInput | string
    ropi?: StringFieldUpdateOperationsInput | string
    timeropi?: StringFieldUpdateOperationsInput | string
    hklda?: StringFieldUpdateOperationsInput | string
    hkldx?: StringFieldUpdateOperationsInput | string
    hkldpu?: StringFieldUpdateOperationsInput | string
    hkldso?: StringFieldUpdateOperationsInput | string
    woba?: StringFieldUpdateOperationsInput | string
    wobx?: StringFieldUpdateOperationsInput | string
    torqa?: StringFieldUpdateOperationsInput | string
    torqx?: StringFieldUpdateOperationsInput | string
    torqp?: StringFieldUpdateOperationsInput | string
    torqb?: StringFieldUpdateOperationsInput | string
    rpm?: StringFieldUpdateOperationsInput | string
    rpmm?: StringFieldUpdateOperationsInput | string
    totrpm?: StringFieldUpdateOperationsInput | string
    stppress?: StringFieldUpdateOperationsInput | string
    csgpress?: StringFieldUpdateOperationsInput | string
    mudflowine?: StringFieldUpdateOperationsInput | string
    mudflowin?: StringFieldUpdateOperationsInput | string
    mudflowoute?: StringFieldUpdateOperationsInput | string
    mudflowout?: StringFieldUpdateOperationsInput | string
    mudflowoutp?: StringFieldUpdateOperationsInput | string
    diffflow?: StringFieldUpdateOperationsInput | string
    klflow?: StringFieldUpdateOperationsInput | string
    muddensin?: StringFieldUpdateOperationsInput | string
    muddensout?: StringFieldUpdateOperationsInput | string
    mudtempin?: StringFieldUpdateOperationsInput | string
    mudtempout?: StringFieldUpdateOperationsInput | string
    mudcondin?: StringFieldUpdateOperationsInput | string
    mudcondout?: StringFieldUpdateOperationsInput | string
    mfiann?: StringFieldUpdateOperationsInput | string
    mfianne?: StringFieldUpdateOperationsInput | string
    surfrev?: StringFieldUpdateOperationsInput | string
    drillrev?: StringFieldUpdateOperationsInput | string
    reamrev?: StringFieldUpdateOperationsInput | string
    circrev?: StringFieldUpdateOperationsInput | string
    totrev?: StringFieldUpdateOperationsInput | string
    drilltime?: StringFieldUpdateOperationsInput | string
    reamtime?: StringFieldUpdateOperationsInput | string
    circtime?: StringFieldUpdateOperationsInput | string
    pumptime?: StringFieldUpdateOperationsInput | string
    rotatingtime?: StringFieldUpdateOperationsInput | string
    drilldist?: StringFieldUpdateOperationsInput | string
    stroke1?: StringFieldUpdateOperationsInput | string
    stroke2?: StringFieldUpdateOperationsInput | string
    stroke3?: StringFieldUpdateOperationsInput | string
    stroke4?: StringFieldUpdateOperationsInput | string
    totstks?: StringFieldUpdateOperationsInput | string
    totstksa?: StringFieldUpdateOperationsInput | string
    spm1?: StringFieldUpdateOperationsInput | string
    spm2?: StringFieldUpdateOperationsInput | string
    spm3?: StringFieldUpdateOperationsInput | string
    spm4?: StringFieldUpdateOperationsInput | string
    spm5?: StringFieldUpdateOperationsInput | string
    totspm?: StringFieldUpdateOperationsInput | string
    totspma?: StringFieldUpdateOperationsInput | string
    totpumpede?: StringFieldUpdateOperationsInput | string
    totpumpvol?: StringFieldUpdateOperationsInput | string
    totpumpvolan?: StringFieldUpdateOperationsInput | string
    totpumpedea?: StringFieldUpdateOperationsInput | string
    tankvoltot?: StringFieldUpdateOperationsInput | string
    tankvolact?: StringFieldUpdateOperationsInput | string
    tankvoltt?: StringFieldUpdateOperationsInput | string
    tankvolchgtot?: StringFieldUpdateOperationsInput | string
    tankvolchgact?: StringFieldUpdateOperationsInput | string
    tankvolchgtt?: StringFieldUpdateOperationsInput | string
    plbit?: StringFieldUpdateOperationsInput | string
    plstr?: StringFieldUpdateOperationsInput | string
    plann?: StringFieldUpdateOperationsInput | string
    plsurf?: StringFieldUpdateOperationsInput | string
    plmtr?: StringFieldUpdateOperationsInput | string
    plmwd?: StringFieldUpdateOperationsInput | string
    bithydpwr?: StringFieldUpdateOperationsInput | string
    bithydpwra?: StringFieldUpdateOperationsInput | string
    jif?: StringFieldUpdateOperationsInput | string
    jetvel?: StringFieldUpdateOperationsInput | string
    annveln?: StringFieldUpdateOperationsInput | string
    annvelx?: StringFieldUpdateOperationsInput | string
    ecddpt?: StringFieldUpdateOperationsInput | string
    ecdbit?: StringFieldUpdateOperationsInput | string
    ecdshoe?: StringFieldUpdateOperationsInput | string
    phydpwr?: StringFieldUpdateOperationsInput | string
    deptretm?: StringFieldUpdateOperationsInput | string
    lagstks?: StringFieldUpdateOperationsInput | string
    lagtime?: StringFieldUpdateOperationsInput | string
    dnhstroke?: StringFieldUpdateOperationsInput | string
    dnhtime?: StringFieldUpdateOperationsInput | string
    mse?: StringFieldUpdateOperationsInput | string
    doc?: StringFieldUpdateOperationsInput | string
    gas?: StringFieldUpdateOperationsInput | string
    dstrength?: StringFieldUpdateOperationsInput | string
    mseds?: StringFieldUpdateOperationsInput | string
    clcontent?: StringFieldUpdateOperationsInput | string
    in_slips?: NullableStringFieldUpdateOperationsInput | string | null
    bht?: StringFieldUpdateOperationsInput | string
    scfm?: StringFieldUpdateOperationsInput | string
    airflin?: StringFieldUpdateOperationsInput | string
    airfline?: StringFieldUpdateOperationsInput | string
    airfloutp?: StringFieldUpdateOperationsInput | string
    airflout?: StringFieldUpdateOperationsInput | string
    airpress?: StringFieldUpdateOperationsInput | string
    airtemp?: StringFieldUpdateOperationsInput | string
    whp?: StringFieldUpdateOperationsInput | string
    wht?: StringFieldUpdateOperationsInput | string
    h2s1?: StringFieldUpdateOperationsInput | string
    h2s2?: StringFieldUpdateOperationsInput | string
    h2s3?: StringFieldUpdateOperationsInput | string
    h2s4?: StringFieldUpdateOperationsInput | string
    co21?: StringFieldUpdateOperationsInput | string
    co22?: StringFieldUpdateOperationsInput | string
    co23?: StringFieldUpdateOperationsInput | string
    co24?: StringFieldUpdateOperationsInput | string
    bitsize?: StringFieldUpdateOperationsInput | string
    foamrate?: StringFieldUpdateOperationsInput | string
    spare_1?: StringFieldUpdateOperationsInput | string
    spare_2?: StringFieldUpdateOperationsInput | string
    spare_3?: StringFieldUpdateOperationsInput | string
    spare_4?: StringFieldUpdateOperationsInput | string
    spare_5?: StringFieldUpdateOperationsInput | string
    spare_6?: StringFieldUpdateOperationsInput | string
    spare_7?: StringFieldUpdateOperationsInput | string
    spare_8?: StringFieldUpdateOperationsInput | string
    spare_9?: StringFieldUpdateOperationsInput | string
    spare_10?: StringFieldUpdateOperationsInput | string
    spare_50?: StringFieldUpdateOperationsInput | string
    spare_51?: StringFieldUpdateOperationsInput | string
    spare_52?: StringFieldUpdateOperationsInput | string
    spare_53?: StringFieldUpdateOperationsInput | string
    spare_54?: StringFieldUpdateOperationsInput | string
    spare_55?: StringFieldUpdateOperationsInput | string
    spare_56?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    posisiy?: NullableStringFieldUpdateOperationsInput | string | null
    tipenote?: NullableStringFieldUpdateOperationsInput | string | null
    idnote?: NullableStringFieldUpdateOperationsInput | string | null
    well?: WellUpdateOneRequiredWithoutRecordNestedInput
  }

  export type RecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dt?: DateTimeFieldUpdateOperationsInput | Date | string
    wid?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    recid?: StringFieldUpdateOperationsInput | string
    seqid?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    actcode?: StringFieldUpdateOperationsInput | string
    blockpos?: StringFieldUpdateOperationsInput | string
    bitdepth?: StringFieldUpdateOperationsInput | string
    deptbitv?: StringFieldUpdateOperationsInput | string
    md?: StringFieldUpdateOperationsInput | string
    tvd?: StringFieldUpdateOperationsInput | string
    logdepth?: StringFieldUpdateOperationsInput | string
    speedup?: StringFieldUpdateOperationsInput | string
    speeddown?: StringFieldUpdateOperationsInput | string
    rop?: StringFieldUpdateOperationsInput | string
    ropi?: StringFieldUpdateOperationsInput | string
    timeropi?: StringFieldUpdateOperationsInput | string
    hklda?: StringFieldUpdateOperationsInput | string
    hkldx?: StringFieldUpdateOperationsInput | string
    hkldpu?: StringFieldUpdateOperationsInput | string
    hkldso?: StringFieldUpdateOperationsInput | string
    woba?: StringFieldUpdateOperationsInput | string
    wobx?: StringFieldUpdateOperationsInput | string
    torqa?: StringFieldUpdateOperationsInput | string
    torqx?: StringFieldUpdateOperationsInput | string
    torqp?: StringFieldUpdateOperationsInput | string
    torqb?: StringFieldUpdateOperationsInput | string
    rpm?: StringFieldUpdateOperationsInput | string
    rpmm?: StringFieldUpdateOperationsInput | string
    totrpm?: StringFieldUpdateOperationsInput | string
    stppress?: StringFieldUpdateOperationsInput | string
    csgpress?: StringFieldUpdateOperationsInput | string
    mudflowine?: StringFieldUpdateOperationsInput | string
    mudflowin?: StringFieldUpdateOperationsInput | string
    mudflowoute?: StringFieldUpdateOperationsInput | string
    mudflowout?: StringFieldUpdateOperationsInput | string
    mudflowoutp?: StringFieldUpdateOperationsInput | string
    diffflow?: StringFieldUpdateOperationsInput | string
    klflow?: StringFieldUpdateOperationsInput | string
    muddensin?: StringFieldUpdateOperationsInput | string
    muddensout?: StringFieldUpdateOperationsInput | string
    mudtempin?: StringFieldUpdateOperationsInput | string
    mudtempout?: StringFieldUpdateOperationsInput | string
    mudcondin?: StringFieldUpdateOperationsInput | string
    mudcondout?: StringFieldUpdateOperationsInput | string
    mfiann?: StringFieldUpdateOperationsInput | string
    mfianne?: StringFieldUpdateOperationsInput | string
    surfrev?: StringFieldUpdateOperationsInput | string
    drillrev?: StringFieldUpdateOperationsInput | string
    reamrev?: StringFieldUpdateOperationsInput | string
    circrev?: StringFieldUpdateOperationsInput | string
    totrev?: StringFieldUpdateOperationsInput | string
    drilltime?: StringFieldUpdateOperationsInput | string
    reamtime?: StringFieldUpdateOperationsInput | string
    circtime?: StringFieldUpdateOperationsInput | string
    pumptime?: StringFieldUpdateOperationsInput | string
    rotatingtime?: StringFieldUpdateOperationsInput | string
    drilldist?: StringFieldUpdateOperationsInput | string
    stroke1?: StringFieldUpdateOperationsInput | string
    stroke2?: StringFieldUpdateOperationsInput | string
    stroke3?: StringFieldUpdateOperationsInput | string
    stroke4?: StringFieldUpdateOperationsInput | string
    totstks?: StringFieldUpdateOperationsInput | string
    totstksa?: StringFieldUpdateOperationsInput | string
    spm1?: StringFieldUpdateOperationsInput | string
    spm2?: StringFieldUpdateOperationsInput | string
    spm3?: StringFieldUpdateOperationsInput | string
    spm4?: StringFieldUpdateOperationsInput | string
    spm5?: StringFieldUpdateOperationsInput | string
    totspm?: StringFieldUpdateOperationsInput | string
    totspma?: StringFieldUpdateOperationsInput | string
    totpumpede?: StringFieldUpdateOperationsInput | string
    totpumpvol?: StringFieldUpdateOperationsInput | string
    totpumpvolan?: StringFieldUpdateOperationsInput | string
    totpumpedea?: StringFieldUpdateOperationsInput | string
    tankvoltot?: StringFieldUpdateOperationsInput | string
    tankvolact?: StringFieldUpdateOperationsInput | string
    tankvoltt?: StringFieldUpdateOperationsInput | string
    tankvolchgtot?: StringFieldUpdateOperationsInput | string
    tankvolchgact?: StringFieldUpdateOperationsInput | string
    tankvolchgtt?: StringFieldUpdateOperationsInput | string
    plbit?: StringFieldUpdateOperationsInput | string
    plstr?: StringFieldUpdateOperationsInput | string
    plann?: StringFieldUpdateOperationsInput | string
    plsurf?: StringFieldUpdateOperationsInput | string
    plmtr?: StringFieldUpdateOperationsInput | string
    plmwd?: StringFieldUpdateOperationsInput | string
    bithydpwr?: StringFieldUpdateOperationsInput | string
    bithydpwra?: StringFieldUpdateOperationsInput | string
    jif?: StringFieldUpdateOperationsInput | string
    jetvel?: StringFieldUpdateOperationsInput | string
    annveln?: StringFieldUpdateOperationsInput | string
    annvelx?: StringFieldUpdateOperationsInput | string
    ecddpt?: StringFieldUpdateOperationsInput | string
    ecdbit?: StringFieldUpdateOperationsInput | string
    ecdshoe?: StringFieldUpdateOperationsInput | string
    phydpwr?: StringFieldUpdateOperationsInput | string
    deptretm?: StringFieldUpdateOperationsInput | string
    lagstks?: StringFieldUpdateOperationsInput | string
    lagtime?: StringFieldUpdateOperationsInput | string
    dnhstroke?: StringFieldUpdateOperationsInput | string
    dnhtime?: StringFieldUpdateOperationsInput | string
    mse?: StringFieldUpdateOperationsInput | string
    doc?: StringFieldUpdateOperationsInput | string
    gas?: StringFieldUpdateOperationsInput | string
    dstrength?: StringFieldUpdateOperationsInput | string
    mseds?: StringFieldUpdateOperationsInput | string
    clcontent?: StringFieldUpdateOperationsInput | string
    in_slips?: NullableStringFieldUpdateOperationsInput | string | null
    bht?: StringFieldUpdateOperationsInput | string
    scfm?: StringFieldUpdateOperationsInput | string
    airflin?: StringFieldUpdateOperationsInput | string
    airfline?: StringFieldUpdateOperationsInput | string
    airfloutp?: StringFieldUpdateOperationsInput | string
    airflout?: StringFieldUpdateOperationsInput | string
    airpress?: StringFieldUpdateOperationsInput | string
    airtemp?: StringFieldUpdateOperationsInput | string
    whp?: StringFieldUpdateOperationsInput | string
    wht?: StringFieldUpdateOperationsInput | string
    h2s1?: StringFieldUpdateOperationsInput | string
    h2s2?: StringFieldUpdateOperationsInput | string
    h2s3?: StringFieldUpdateOperationsInput | string
    h2s4?: StringFieldUpdateOperationsInput | string
    co21?: StringFieldUpdateOperationsInput | string
    co22?: StringFieldUpdateOperationsInput | string
    co23?: StringFieldUpdateOperationsInput | string
    co24?: StringFieldUpdateOperationsInput | string
    bitsize?: StringFieldUpdateOperationsInput | string
    foamrate?: StringFieldUpdateOperationsInput | string
    spare_1?: StringFieldUpdateOperationsInput | string
    spare_2?: StringFieldUpdateOperationsInput | string
    spare_3?: StringFieldUpdateOperationsInput | string
    spare_4?: StringFieldUpdateOperationsInput | string
    spare_5?: StringFieldUpdateOperationsInput | string
    spare_6?: StringFieldUpdateOperationsInput | string
    spare_7?: StringFieldUpdateOperationsInput | string
    spare_8?: StringFieldUpdateOperationsInput | string
    spare_9?: StringFieldUpdateOperationsInput | string
    spare_10?: StringFieldUpdateOperationsInput | string
    spare_50?: StringFieldUpdateOperationsInput | string
    spare_51?: StringFieldUpdateOperationsInput | string
    spare_52?: StringFieldUpdateOperationsInput | string
    spare_53?: StringFieldUpdateOperationsInput | string
    spare_54?: StringFieldUpdateOperationsInput | string
    spare_55?: StringFieldUpdateOperationsInput | string
    spare_56?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    posisiy?: NullableStringFieldUpdateOperationsInput | string | null
    tipenote?: NullableStringFieldUpdateOperationsInput | string | null
    idnote?: NullableStringFieldUpdateOperationsInput | string | null
    wellId?: StringFieldUpdateOperationsInput | string
  }

  export type RecordCreateManyInput = {
    id?: string
    dt: Date | string
    wid: string
    sid: string
    recid: string
    seqid: string
    date: string
    time: string
    actcode: string
    blockpos: string
    bitdepth: string
    deptbitv: string
    md: string
    tvd: string
    logdepth: string
    speedup: string
    speeddown: string
    rop: string
    ropi: string
    timeropi: string
    hklda: string
    hkldx: string
    hkldpu: string
    hkldso: string
    woba: string
    wobx: string
    torqa: string
    torqx: string
    torqp: string
    torqb: string
    rpm: string
    rpmm: string
    totrpm: string
    stppress: string
    csgpress: string
    mudflowine: string
    mudflowin: string
    mudflowoute: string
    mudflowout: string
    mudflowoutp: string
    diffflow: string
    klflow: string
    muddensin: string
    muddensout: string
    mudtempin: string
    mudtempout: string
    mudcondin: string
    mudcondout: string
    mfiann: string
    mfianne: string
    surfrev: string
    drillrev: string
    reamrev: string
    circrev: string
    totrev: string
    drilltime: string
    reamtime: string
    circtime: string
    pumptime: string
    rotatingtime: string
    drilldist: string
    stroke1: string
    stroke2: string
    stroke3: string
    stroke4: string
    totstks: string
    totstksa: string
    spm1: string
    spm2: string
    spm3: string
    spm4: string
    spm5: string
    totspm: string
    totspma: string
    totpumpede: string
    totpumpvol: string
    totpumpvolan: string
    totpumpedea: string
    tankvoltot: string
    tankvolact: string
    tankvoltt: string
    tankvolchgtot: string
    tankvolchgact: string
    tankvolchgtt: string
    plbit: string
    plstr: string
    plann: string
    plsurf: string
    plmtr: string
    plmwd: string
    bithydpwr: string
    bithydpwra: string
    jif: string
    jetvel: string
    annveln: string
    annvelx: string
    ecddpt: string
    ecdbit: string
    ecdshoe: string
    phydpwr: string
    deptretm: string
    lagstks: string
    lagtime: string
    dnhstroke: string
    dnhtime: string
    mse: string
    doc: string
    gas: string
    dstrength: string
    mseds: string
    clcontent: string
    in_slips?: string | null
    bht: string
    scfm: string
    airflin: string
    airfline: string
    airfloutp: string
    airflout: string
    airpress: string
    airtemp: string
    whp: string
    wht: string
    h2s1: string
    h2s2: string
    h2s3: string
    h2s4: string
    co21: string
    co22: string
    co23: string
    co24: string
    bitsize: string
    foamrate: string
    spare_1: string
    spare_2: string
    spare_3: string
    spare_4: string
    spare_5: string
    spare_6: string
    spare_7: string
    spare_8: string
    spare_9: string
    spare_10: string
    spare_50: string
    spare_51: string
    spare_52: string
    spare_53: string
    spare_54: string
    spare_55: string
    spare_56: string
    label?: string | null
    posisiy?: string | null
    tipenote?: string | null
    idnote?: string | null
    wellId: string
  }

  export type RecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dt?: DateTimeFieldUpdateOperationsInput | Date | string
    wid?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    recid?: StringFieldUpdateOperationsInput | string
    seqid?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    actcode?: StringFieldUpdateOperationsInput | string
    blockpos?: StringFieldUpdateOperationsInput | string
    bitdepth?: StringFieldUpdateOperationsInput | string
    deptbitv?: StringFieldUpdateOperationsInput | string
    md?: StringFieldUpdateOperationsInput | string
    tvd?: StringFieldUpdateOperationsInput | string
    logdepth?: StringFieldUpdateOperationsInput | string
    speedup?: StringFieldUpdateOperationsInput | string
    speeddown?: StringFieldUpdateOperationsInput | string
    rop?: StringFieldUpdateOperationsInput | string
    ropi?: StringFieldUpdateOperationsInput | string
    timeropi?: StringFieldUpdateOperationsInput | string
    hklda?: StringFieldUpdateOperationsInput | string
    hkldx?: StringFieldUpdateOperationsInput | string
    hkldpu?: StringFieldUpdateOperationsInput | string
    hkldso?: StringFieldUpdateOperationsInput | string
    woba?: StringFieldUpdateOperationsInput | string
    wobx?: StringFieldUpdateOperationsInput | string
    torqa?: StringFieldUpdateOperationsInput | string
    torqx?: StringFieldUpdateOperationsInput | string
    torqp?: StringFieldUpdateOperationsInput | string
    torqb?: StringFieldUpdateOperationsInput | string
    rpm?: StringFieldUpdateOperationsInput | string
    rpmm?: StringFieldUpdateOperationsInput | string
    totrpm?: StringFieldUpdateOperationsInput | string
    stppress?: StringFieldUpdateOperationsInput | string
    csgpress?: StringFieldUpdateOperationsInput | string
    mudflowine?: StringFieldUpdateOperationsInput | string
    mudflowin?: StringFieldUpdateOperationsInput | string
    mudflowoute?: StringFieldUpdateOperationsInput | string
    mudflowout?: StringFieldUpdateOperationsInput | string
    mudflowoutp?: StringFieldUpdateOperationsInput | string
    diffflow?: StringFieldUpdateOperationsInput | string
    klflow?: StringFieldUpdateOperationsInput | string
    muddensin?: StringFieldUpdateOperationsInput | string
    muddensout?: StringFieldUpdateOperationsInput | string
    mudtempin?: StringFieldUpdateOperationsInput | string
    mudtempout?: StringFieldUpdateOperationsInput | string
    mudcondin?: StringFieldUpdateOperationsInput | string
    mudcondout?: StringFieldUpdateOperationsInput | string
    mfiann?: StringFieldUpdateOperationsInput | string
    mfianne?: StringFieldUpdateOperationsInput | string
    surfrev?: StringFieldUpdateOperationsInput | string
    drillrev?: StringFieldUpdateOperationsInput | string
    reamrev?: StringFieldUpdateOperationsInput | string
    circrev?: StringFieldUpdateOperationsInput | string
    totrev?: StringFieldUpdateOperationsInput | string
    drilltime?: StringFieldUpdateOperationsInput | string
    reamtime?: StringFieldUpdateOperationsInput | string
    circtime?: StringFieldUpdateOperationsInput | string
    pumptime?: StringFieldUpdateOperationsInput | string
    rotatingtime?: StringFieldUpdateOperationsInput | string
    drilldist?: StringFieldUpdateOperationsInput | string
    stroke1?: StringFieldUpdateOperationsInput | string
    stroke2?: StringFieldUpdateOperationsInput | string
    stroke3?: StringFieldUpdateOperationsInput | string
    stroke4?: StringFieldUpdateOperationsInput | string
    totstks?: StringFieldUpdateOperationsInput | string
    totstksa?: StringFieldUpdateOperationsInput | string
    spm1?: StringFieldUpdateOperationsInput | string
    spm2?: StringFieldUpdateOperationsInput | string
    spm3?: StringFieldUpdateOperationsInput | string
    spm4?: StringFieldUpdateOperationsInput | string
    spm5?: StringFieldUpdateOperationsInput | string
    totspm?: StringFieldUpdateOperationsInput | string
    totspma?: StringFieldUpdateOperationsInput | string
    totpumpede?: StringFieldUpdateOperationsInput | string
    totpumpvol?: StringFieldUpdateOperationsInput | string
    totpumpvolan?: StringFieldUpdateOperationsInput | string
    totpumpedea?: StringFieldUpdateOperationsInput | string
    tankvoltot?: StringFieldUpdateOperationsInput | string
    tankvolact?: StringFieldUpdateOperationsInput | string
    tankvoltt?: StringFieldUpdateOperationsInput | string
    tankvolchgtot?: StringFieldUpdateOperationsInput | string
    tankvolchgact?: StringFieldUpdateOperationsInput | string
    tankvolchgtt?: StringFieldUpdateOperationsInput | string
    plbit?: StringFieldUpdateOperationsInput | string
    plstr?: StringFieldUpdateOperationsInput | string
    plann?: StringFieldUpdateOperationsInput | string
    plsurf?: StringFieldUpdateOperationsInput | string
    plmtr?: StringFieldUpdateOperationsInput | string
    plmwd?: StringFieldUpdateOperationsInput | string
    bithydpwr?: StringFieldUpdateOperationsInput | string
    bithydpwra?: StringFieldUpdateOperationsInput | string
    jif?: StringFieldUpdateOperationsInput | string
    jetvel?: StringFieldUpdateOperationsInput | string
    annveln?: StringFieldUpdateOperationsInput | string
    annvelx?: StringFieldUpdateOperationsInput | string
    ecddpt?: StringFieldUpdateOperationsInput | string
    ecdbit?: StringFieldUpdateOperationsInput | string
    ecdshoe?: StringFieldUpdateOperationsInput | string
    phydpwr?: StringFieldUpdateOperationsInput | string
    deptretm?: StringFieldUpdateOperationsInput | string
    lagstks?: StringFieldUpdateOperationsInput | string
    lagtime?: StringFieldUpdateOperationsInput | string
    dnhstroke?: StringFieldUpdateOperationsInput | string
    dnhtime?: StringFieldUpdateOperationsInput | string
    mse?: StringFieldUpdateOperationsInput | string
    doc?: StringFieldUpdateOperationsInput | string
    gas?: StringFieldUpdateOperationsInput | string
    dstrength?: StringFieldUpdateOperationsInput | string
    mseds?: StringFieldUpdateOperationsInput | string
    clcontent?: StringFieldUpdateOperationsInput | string
    in_slips?: NullableStringFieldUpdateOperationsInput | string | null
    bht?: StringFieldUpdateOperationsInput | string
    scfm?: StringFieldUpdateOperationsInput | string
    airflin?: StringFieldUpdateOperationsInput | string
    airfline?: StringFieldUpdateOperationsInput | string
    airfloutp?: StringFieldUpdateOperationsInput | string
    airflout?: StringFieldUpdateOperationsInput | string
    airpress?: StringFieldUpdateOperationsInput | string
    airtemp?: StringFieldUpdateOperationsInput | string
    whp?: StringFieldUpdateOperationsInput | string
    wht?: StringFieldUpdateOperationsInput | string
    h2s1?: StringFieldUpdateOperationsInput | string
    h2s2?: StringFieldUpdateOperationsInput | string
    h2s3?: StringFieldUpdateOperationsInput | string
    h2s4?: StringFieldUpdateOperationsInput | string
    co21?: StringFieldUpdateOperationsInput | string
    co22?: StringFieldUpdateOperationsInput | string
    co23?: StringFieldUpdateOperationsInput | string
    co24?: StringFieldUpdateOperationsInput | string
    bitsize?: StringFieldUpdateOperationsInput | string
    foamrate?: StringFieldUpdateOperationsInput | string
    spare_1?: StringFieldUpdateOperationsInput | string
    spare_2?: StringFieldUpdateOperationsInput | string
    spare_3?: StringFieldUpdateOperationsInput | string
    spare_4?: StringFieldUpdateOperationsInput | string
    spare_5?: StringFieldUpdateOperationsInput | string
    spare_6?: StringFieldUpdateOperationsInput | string
    spare_7?: StringFieldUpdateOperationsInput | string
    spare_8?: StringFieldUpdateOperationsInput | string
    spare_9?: StringFieldUpdateOperationsInput | string
    spare_10?: StringFieldUpdateOperationsInput | string
    spare_50?: StringFieldUpdateOperationsInput | string
    spare_51?: StringFieldUpdateOperationsInput | string
    spare_52?: StringFieldUpdateOperationsInput | string
    spare_53?: StringFieldUpdateOperationsInput | string
    spare_54?: StringFieldUpdateOperationsInput | string
    spare_55?: StringFieldUpdateOperationsInput | string
    spare_56?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    posisiy?: NullableStringFieldUpdateOperationsInput | string | null
    tipenote?: NullableStringFieldUpdateOperationsInput | string | null
    idnote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dt?: DateTimeFieldUpdateOperationsInput | Date | string
    wid?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    recid?: StringFieldUpdateOperationsInput | string
    seqid?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    actcode?: StringFieldUpdateOperationsInput | string
    blockpos?: StringFieldUpdateOperationsInput | string
    bitdepth?: StringFieldUpdateOperationsInput | string
    deptbitv?: StringFieldUpdateOperationsInput | string
    md?: StringFieldUpdateOperationsInput | string
    tvd?: StringFieldUpdateOperationsInput | string
    logdepth?: StringFieldUpdateOperationsInput | string
    speedup?: StringFieldUpdateOperationsInput | string
    speeddown?: StringFieldUpdateOperationsInput | string
    rop?: StringFieldUpdateOperationsInput | string
    ropi?: StringFieldUpdateOperationsInput | string
    timeropi?: StringFieldUpdateOperationsInput | string
    hklda?: StringFieldUpdateOperationsInput | string
    hkldx?: StringFieldUpdateOperationsInput | string
    hkldpu?: StringFieldUpdateOperationsInput | string
    hkldso?: StringFieldUpdateOperationsInput | string
    woba?: StringFieldUpdateOperationsInput | string
    wobx?: StringFieldUpdateOperationsInput | string
    torqa?: StringFieldUpdateOperationsInput | string
    torqx?: StringFieldUpdateOperationsInput | string
    torqp?: StringFieldUpdateOperationsInput | string
    torqb?: StringFieldUpdateOperationsInput | string
    rpm?: StringFieldUpdateOperationsInput | string
    rpmm?: StringFieldUpdateOperationsInput | string
    totrpm?: StringFieldUpdateOperationsInput | string
    stppress?: StringFieldUpdateOperationsInput | string
    csgpress?: StringFieldUpdateOperationsInput | string
    mudflowine?: StringFieldUpdateOperationsInput | string
    mudflowin?: StringFieldUpdateOperationsInput | string
    mudflowoute?: StringFieldUpdateOperationsInput | string
    mudflowout?: StringFieldUpdateOperationsInput | string
    mudflowoutp?: StringFieldUpdateOperationsInput | string
    diffflow?: StringFieldUpdateOperationsInput | string
    klflow?: StringFieldUpdateOperationsInput | string
    muddensin?: StringFieldUpdateOperationsInput | string
    muddensout?: StringFieldUpdateOperationsInput | string
    mudtempin?: StringFieldUpdateOperationsInput | string
    mudtempout?: StringFieldUpdateOperationsInput | string
    mudcondin?: StringFieldUpdateOperationsInput | string
    mudcondout?: StringFieldUpdateOperationsInput | string
    mfiann?: StringFieldUpdateOperationsInput | string
    mfianne?: StringFieldUpdateOperationsInput | string
    surfrev?: StringFieldUpdateOperationsInput | string
    drillrev?: StringFieldUpdateOperationsInput | string
    reamrev?: StringFieldUpdateOperationsInput | string
    circrev?: StringFieldUpdateOperationsInput | string
    totrev?: StringFieldUpdateOperationsInput | string
    drilltime?: StringFieldUpdateOperationsInput | string
    reamtime?: StringFieldUpdateOperationsInput | string
    circtime?: StringFieldUpdateOperationsInput | string
    pumptime?: StringFieldUpdateOperationsInput | string
    rotatingtime?: StringFieldUpdateOperationsInput | string
    drilldist?: StringFieldUpdateOperationsInput | string
    stroke1?: StringFieldUpdateOperationsInput | string
    stroke2?: StringFieldUpdateOperationsInput | string
    stroke3?: StringFieldUpdateOperationsInput | string
    stroke4?: StringFieldUpdateOperationsInput | string
    totstks?: StringFieldUpdateOperationsInput | string
    totstksa?: StringFieldUpdateOperationsInput | string
    spm1?: StringFieldUpdateOperationsInput | string
    spm2?: StringFieldUpdateOperationsInput | string
    spm3?: StringFieldUpdateOperationsInput | string
    spm4?: StringFieldUpdateOperationsInput | string
    spm5?: StringFieldUpdateOperationsInput | string
    totspm?: StringFieldUpdateOperationsInput | string
    totspma?: StringFieldUpdateOperationsInput | string
    totpumpede?: StringFieldUpdateOperationsInput | string
    totpumpvol?: StringFieldUpdateOperationsInput | string
    totpumpvolan?: StringFieldUpdateOperationsInput | string
    totpumpedea?: StringFieldUpdateOperationsInput | string
    tankvoltot?: StringFieldUpdateOperationsInput | string
    tankvolact?: StringFieldUpdateOperationsInput | string
    tankvoltt?: StringFieldUpdateOperationsInput | string
    tankvolchgtot?: StringFieldUpdateOperationsInput | string
    tankvolchgact?: StringFieldUpdateOperationsInput | string
    tankvolchgtt?: StringFieldUpdateOperationsInput | string
    plbit?: StringFieldUpdateOperationsInput | string
    plstr?: StringFieldUpdateOperationsInput | string
    plann?: StringFieldUpdateOperationsInput | string
    plsurf?: StringFieldUpdateOperationsInput | string
    plmtr?: StringFieldUpdateOperationsInput | string
    plmwd?: StringFieldUpdateOperationsInput | string
    bithydpwr?: StringFieldUpdateOperationsInput | string
    bithydpwra?: StringFieldUpdateOperationsInput | string
    jif?: StringFieldUpdateOperationsInput | string
    jetvel?: StringFieldUpdateOperationsInput | string
    annveln?: StringFieldUpdateOperationsInput | string
    annvelx?: StringFieldUpdateOperationsInput | string
    ecddpt?: StringFieldUpdateOperationsInput | string
    ecdbit?: StringFieldUpdateOperationsInput | string
    ecdshoe?: StringFieldUpdateOperationsInput | string
    phydpwr?: StringFieldUpdateOperationsInput | string
    deptretm?: StringFieldUpdateOperationsInput | string
    lagstks?: StringFieldUpdateOperationsInput | string
    lagtime?: StringFieldUpdateOperationsInput | string
    dnhstroke?: StringFieldUpdateOperationsInput | string
    dnhtime?: StringFieldUpdateOperationsInput | string
    mse?: StringFieldUpdateOperationsInput | string
    doc?: StringFieldUpdateOperationsInput | string
    gas?: StringFieldUpdateOperationsInput | string
    dstrength?: StringFieldUpdateOperationsInput | string
    mseds?: StringFieldUpdateOperationsInput | string
    clcontent?: StringFieldUpdateOperationsInput | string
    in_slips?: NullableStringFieldUpdateOperationsInput | string | null
    bht?: StringFieldUpdateOperationsInput | string
    scfm?: StringFieldUpdateOperationsInput | string
    airflin?: StringFieldUpdateOperationsInput | string
    airfline?: StringFieldUpdateOperationsInput | string
    airfloutp?: StringFieldUpdateOperationsInput | string
    airflout?: StringFieldUpdateOperationsInput | string
    airpress?: StringFieldUpdateOperationsInput | string
    airtemp?: StringFieldUpdateOperationsInput | string
    whp?: StringFieldUpdateOperationsInput | string
    wht?: StringFieldUpdateOperationsInput | string
    h2s1?: StringFieldUpdateOperationsInput | string
    h2s2?: StringFieldUpdateOperationsInput | string
    h2s3?: StringFieldUpdateOperationsInput | string
    h2s4?: StringFieldUpdateOperationsInput | string
    co21?: StringFieldUpdateOperationsInput | string
    co22?: StringFieldUpdateOperationsInput | string
    co23?: StringFieldUpdateOperationsInput | string
    co24?: StringFieldUpdateOperationsInput | string
    bitsize?: StringFieldUpdateOperationsInput | string
    foamrate?: StringFieldUpdateOperationsInput | string
    spare_1?: StringFieldUpdateOperationsInput | string
    spare_2?: StringFieldUpdateOperationsInput | string
    spare_3?: StringFieldUpdateOperationsInput | string
    spare_4?: StringFieldUpdateOperationsInput | string
    spare_5?: StringFieldUpdateOperationsInput | string
    spare_6?: StringFieldUpdateOperationsInput | string
    spare_7?: StringFieldUpdateOperationsInput | string
    spare_8?: StringFieldUpdateOperationsInput | string
    spare_9?: StringFieldUpdateOperationsInput | string
    spare_10?: StringFieldUpdateOperationsInput | string
    spare_50?: StringFieldUpdateOperationsInput | string
    spare_51?: StringFieldUpdateOperationsInput | string
    spare_52?: StringFieldUpdateOperationsInput | string
    spare_53?: StringFieldUpdateOperationsInput | string
    spare_54?: StringFieldUpdateOperationsInput | string
    spare_55?: StringFieldUpdateOperationsInput | string
    spare_56?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    posisiy?: NullableStringFieldUpdateOperationsInput | string | null
    tipenote?: NullableStringFieldUpdateOperationsInput | string | null
    idnote?: NullableStringFieldUpdateOperationsInput | string | null
    wellId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message?: string | null
    seen?: boolean
    createdAt?: Date | string
    well: WellCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    message?: string | null
    seen?: boolean
    wellId: string
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    seen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    well?: WellUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    seen?: BoolFieldUpdateOperationsInput | boolean
    wellId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    message?: string | null
    seen?: boolean
    wellId: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    seen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    seen?: BoolFieldUpdateOperationsInput | boolean
    wellId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConditionCreateInput = {
    id?: string
    name: string
    rules?: RuleConditionCreateNestedManyWithoutConditionInput
    well: WellCreateNestedOneWithoutConditionInput
  }

  export type ConditionUncheckedCreateInput = {
    id?: string
    name: string
    wellId: string
    rules?: RuleConditionUncheckedCreateNestedManyWithoutConditionInput
  }

  export type ConditionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rules?: RuleConditionUpdateManyWithoutConditionNestedInput
    well?: WellUpdateOneRequiredWithoutConditionNestedInput
  }

  export type ConditionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    wellId?: StringFieldUpdateOperationsInput | string
    rules?: RuleConditionUncheckedUpdateManyWithoutConditionNestedInput
  }

  export type ConditionCreateManyInput = {
    id?: string
    name: string
    wellId: string
  }

  export type ConditionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    wellId?: StringFieldUpdateOperationsInput | string
  }

  export type RuleConditionCreateInput = {
    id?: string
    parameter: string
    operator: string
    thresholdValue: number
    logicalOperator: $Enums.LogicalOperator
    condition: ConditionCreateNestedOneWithoutRulesInput
  }

  export type RuleConditionUncheckedCreateInput = {
    id?: string
    conditionId: string
    parameter: string
    operator: string
    thresholdValue: number
    logicalOperator: $Enums.LogicalOperator
  }

  export type RuleConditionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameter?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    thresholdValue?: FloatFieldUpdateOperationsInput | number
    logicalOperator?: EnumLogicalOperatorFieldUpdateOperationsInput | $Enums.LogicalOperator
    condition?: ConditionUpdateOneRequiredWithoutRulesNestedInput
  }

  export type RuleConditionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditionId?: StringFieldUpdateOperationsInput | string
    parameter?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    thresholdValue?: FloatFieldUpdateOperationsInput | number
    logicalOperator?: EnumLogicalOperatorFieldUpdateOperationsInput | $Enums.LogicalOperator
  }

  export type RuleConditionCreateManyInput = {
    id?: string
    conditionId: string
    parameter: string
    operator: string
    thresholdValue: number
    logicalOperator: $Enums.LogicalOperator
  }

  export type RuleConditionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameter?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    thresholdValue?: FloatFieldUpdateOperationsInput | number
    logicalOperator?: EnumLogicalOperatorFieldUpdateOperationsInput | $Enums.LogicalOperator
  }

  export type RuleConditionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditionId?: StringFieldUpdateOperationsInput | string
    parameter?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    thresholdValue?: FloatFieldUpdateOperationsInput | number
    logicalOperator?: EnumLogicalOperatorFieldUpdateOperationsInput | $Enums.LogicalOperator
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type PlaceListRelationFilter = {
    every?: PlaceWhereInput
    some?: PlaceWhereInput
    none?: PlaceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    role?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type WellListRelationFilter = {
    every?: WellWhereInput
    some?: WellWhereInput
    none?: WellWhereInput
  }

  export type WellOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    companyId?: SortOrder
  }

  export type PlaceAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type PlaceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    companyId?: SortOrder
  }

  export type PlaceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    companyId?: SortOrder
  }

  export type PlaceSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PlaceRelationFilter = {
    is?: PlaceWhereInput
    isNot?: PlaceWhereInput
  }

  export type ConditionListRelationFilter = {
    every?: ConditionWhereInput
    some?: ConditionWhereInput
    none?: ConditionWhereInput
  }

  export type RecordListRelationFilter = {
    every?: RecordWhereInput
    some?: RecordWhereInput
    none?: RecordWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ConditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WellCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    topic?: SortOrder
    placeId?: SortOrder
  }

  export type WellAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type WellMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    topic?: SortOrder
    placeId?: SortOrder
  }

  export type WellMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    topic?: SortOrder
    placeId?: SortOrder
  }

  export type WellSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WellRelationFilter = {
    is?: WellWhereInput
    isNot?: WellWhereInput
  }

  export type RecordCountOrderByAggregateInput = {
    id?: SortOrder
    dt?: SortOrder
    wid?: SortOrder
    sid?: SortOrder
    recid?: SortOrder
    seqid?: SortOrder
    date?: SortOrder
    time?: SortOrder
    actcode?: SortOrder
    blockpos?: SortOrder
    bitdepth?: SortOrder
    deptbitv?: SortOrder
    md?: SortOrder
    tvd?: SortOrder
    logdepth?: SortOrder
    speedup?: SortOrder
    speeddown?: SortOrder
    rop?: SortOrder
    ropi?: SortOrder
    timeropi?: SortOrder
    hklda?: SortOrder
    hkldx?: SortOrder
    hkldpu?: SortOrder
    hkldso?: SortOrder
    woba?: SortOrder
    wobx?: SortOrder
    torqa?: SortOrder
    torqx?: SortOrder
    torqp?: SortOrder
    torqb?: SortOrder
    rpm?: SortOrder
    rpmm?: SortOrder
    totrpm?: SortOrder
    stppress?: SortOrder
    csgpress?: SortOrder
    mudflowine?: SortOrder
    mudflowin?: SortOrder
    mudflowoute?: SortOrder
    mudflowout?: SortOrder
    mudflowoutp?: SortOrder
    diffflow?: SortOrder
    klflow?: SortOrder
    muddensin?: SortOrder
    muddensout?: SortOrder
    mudtempin?: SortOrder
    mudtempout?: SortOrder
    mudcondin?: SortOrder
    mudcondout?: SortOrder
    mfiann?: SortOrder
    mfianne?: SortOrder
    surfrev?: SortOrder
    drillrev?: SortOrder
    reamrev?: SortOrder
    circrev?: SortOrder
    totrev?: SortOrder
    drilltime?: SortOrder
    reamtime?: SortOrder
    circtime?: SortOrder
    pumptime?: SortOrder
    rotatingtime?: SortOrder
    drilldist?: SortOrder
    stroke1?: SortOrder
    stroke2?: SortOrder
    stroke3?: SortOrder
    stroke4?: SortOrder
    totstks?: SortOrder
    totstksa?: SortOrder
    spm1?: SortOrder
    spm2?: SortOrder
    spm3?: SortOrder
    spm4?: SortOrder
    spm5?: SortOrder
    totspm?: SortOrder
    totspma?: SortOrder
    totpumpede?: SortOrder
    totpumpvol?: SortOrder
    totpumpvolan?: SortOrder
    totpumpedea?: SortOrder
    tankvoltot?: SortOrder
    tankvolact?: SortOrder
    tankvoltt?: SortOrder
    tankvolchgtot?: SortOrder
    tankvolchgact?: SortOrder
    tankvolchgtt?: SortOrder
    plbit?: SortOrder
    plstr?: SortOrder
    plann?: SortOrder
    plsurf?: SortOrder
    plmtr?: SortOrder
    plmwd?: SortOrder
    bithydpwr?: SortOrder
    bithydpwra?: SortOrder
    jif?: SortOrder
    jetvel?: SortOrder
    annveln?: SortOrder
    annvelx?: SortOrder
    ecddpt?: SortOrder
    ecdbit?: SortOrder
    ecdshoe?: SortOrder
    phydpwr?: SortOrder
    deptretm?: SortOrder
    lagstks?: SortOrder
    lagtime?: SortOrder
    dnhstroke?: SortOrder
    dnhtime?: SortOrder
    mse?: SortOrder
    doc?: SortOrder
    gas?: SortOrder
    dstrength?: SortOrder
    mseds?: SortOrder
    clcontent?: SortOrder
    in_slips?: SortOrder
    bht?: SortOrder
    scfm?: SortOrder
    airflin?: SortOrder
    airfline?: SortOrder
    airfloutp?: SortOrder
    airflout?: SortOrder
    airpress?: SortOrder
    airtemp?: SortOrder
    whp?: SortOrder
    wht?: SortOrder
    h2s1?: SortOrder
    h2s2?: SortOrder
    h2s3?: SortOrder
    h2s4?: SortOrder
    co21?: SortOrder
    co22?: SortOrder
    co23?: SortOrder
    co24?: SortOrder
    bitsize?: SortOrder
    foamrate?: SortOrder
    spare_1?: SortOrder
    spare_2?: SortOrder
    spare_3?: SortOrder
    spare_4?: SortOrder
    spare_5?: SortOrder
    spare_6?: SortOrder
    spare_7?: SortOrder
    spare_8?: SortOrder
    spare_9?: SortOrder
    spare_10?: SortOrder
    spare_50?: SortOrder
    spare_51?: SortOrder
    spare_52?: SortOrder
    spare_53?: SortOrder
    spare_54?: SortOrder
    spare_55?: SortOrder
    spare_56?: SortOrder
    label?: SortOrder
    posisiy?: SortOrder
    tipenote?: SortOrder
    idnote?: SortOrder
    wellId?: SortOrder
  }

  export type RecordMaxOrderByAggregateInput = {
    id?: SortOrder
    dt?: SortOrder
    wid?: SortOrder
    sid?: SortOrder
    recid?: SortOrder
    seqid?: SortOrder
    date?: SortOrder
    time?: SortOrder
    actcode?: SortOrder
    blockpos?: SortOrder
    bitdepth?: SortOrder
    deptbitv?: SortOrder
    md?: SortOrder
    tvd?: SortOrder
    logdepth?: SortOrder
    speedup?: SortOrder
    speeddown?: SortOrder
    rop?: SortOrder
    ropi?: SortOrder
    timeropi?: SortOrder
    hklda?: SortOrder
    hkldx?: SortOrder
    hkldpu?: SortOrder
    hkldso?: SortOrder
    woba?: SortOrder
    wobx?: SortOrder
    torqa?: SortOrder
    torqx?: SortOrder
    torqp?: SortOrder
    torqb?: SortOrder
    rpm?: SortOrder
    rpmm?: SortOrder
    totrpm?: SortOrder
    stppress?: SortOrder
    csgpress?: SortOrder
    mudflowine?: SortOrder
    mudflowin?: SortOrder
    mudflowoute?: SortOrder
    mudflowout?: SortOrder
    mudflowoutp?: SortOrder
    diffflow?: SortOrder
    klflow?: SortOrder
    muddensin?: SortOrder
    muddensout?: SortOrder
    mudtempin?: SortOrder
    mudtempout?: SortOrder
    mudcondin?: SortOrder
    mudcondout?: SortOrder
    mfiann?: SortOrder
    mfianne?: SortOrder
    surfrev?: SortOrder
    drillrev?: SortOrder
    reamrev?: SortOrder
    circrev?: SortOrder
    totrev?: SortOrder
    drilltime?: SortOrder
    reamtime?: SortOrder
    circtime?: SortOrder
    pumptime?: SortOrder
    rotatingtime?: SortOrder
    drilldist?: SortOrder
    stroke1?: SortOrder
    stroke2?: SortOrder
    stroke3?: SortOrder
    stroke4?: SortOrder
    totstks?: SortOrder
    totstksa?: SortOrder
    spm1?: SortOrder
    spm2?: SortOrder
    spm3?: SortOrder
    spm4?: SortOrder
    spm5?: SortOrder
    totspm?: SortOrder
    totspma?: SortOrder
    totpumpede?: SortOrder
    totpumpvol?: SortOrder
    totpumpvolan?: SortOrder
    totpumpedea?: SortOrder
    tankvoltot?: SortOrder
    tankvolact?: SortOrder
    tankvoltt?: SortOrder
    tankvolchgtot?: SortOrder
    tankvolchgact?: SortOrder
    tankvolchgtt?: SortOrder
    plbit?: SortOrder
    plstr?: SortOrder
    plann?: SortOrder
    plsurf?: SortOrder
    plmtr?: SortOrder
    plmwd?: SortOrder
    bithydpwr?: SortOrder
    bithydpwra?: SortOrder
    jif?: SortOrder
    jetvel?: SortOrder
    annveln?: SortOrder
    annvelx?: SortOrder
    ecddpt?: SortOrder
    ecdbit?: SortOrder
    ecdshoe?: SortOrder
    phydpwr?: SortOrder
    deptretm?: SortOrder
    lagstks?: SortOrder
    lagtime?: SortOrder
    dnhstroke?: SortOrder
    dnhtime?: SortOrder
    mse?: SortOrder
    doc?: SortOrder
    gas?: SortOrder
    dstrength?: SortOrder
    mseds?: SortOrder
    clcontent?: SortOrder
    in_slips?: SortOrder
    bht?: SortOrder
    scfm?: SortOrder
    airflin?: SortOrder
    airfline?: SortOrder
    airfloutp?: SortOrder
    airflout?: SortOrder
    airpress?: SortOrder
    airtemp?: SortOrder
    whp?: SortOrder
    wht?: SortOrder
    h2s1?: SortOrder
    h2s2?: SortOrder
    h2s3?: SortOrder
    h2s4?: SortOrder
    co21?: SortOrder
    co22?: SortOrder
    co23?: SortOrder
    co24?: SortOrder
    bitsize?: SortOrder
    foamrate?: SortOrder
    spare_1?: SortOrder
    spare_2?: SortOrder
    spare_3?: SortOrder
    spare_4?: SortOrder
    spare_5?: SortOrder
    spare_6?: SortOrder
    spare_7?: SortOrder
    spare_8?: SortOrder
    spare_9?: SortOrder
    spare_10?: SortOrder
    spare_50?: SortOrder
    spare_51?: SortOrder
    spare_52?: SortOrder
    spare_53?: SortOrder
    spare_54?: SortOrder
    spare_55?: SortOrder
    spare_56?: SortOrder
    label?: SortOrder
    posisiy?: SortOrder
    tipenote?: SortOrder
    idnote?: SortOrder
    wellId?: SortOrder
  }

  export type RecordMinOrderByAggregateInput = {
    id?: SortOrder
    dt?: SortOrder
    wid?: SortOrder
    sid?: SortOrder
    recid?: SortOrder
    seqid?: SortOrder
    date?: SortOrder
    time?: SortOrder
    actcode?: SortOrder
    blockpos?: SortOrder
    bitdepth?: SortOrder
    deptbitv?: SortOrder
    md?: SortOrder
    tvd?: SortOrder
    logdepth?: SortOrder
    speedup?: SortOrder
    speeddown?: SortOrder
    rop?: SortOrder
    ropi?: SortOrder
    timeropi?: SortOrder
    hklda?: SortOrder
    hkldx?: SortOrder
    hkldpu?: SortOrder
    hkldso?: SortOrder
    woba?: SortOrder
    wobx?: SortOrder
    torqa?: SortOrder
    torqx?: SortOrder
    torqp?: SortOrder
    torqb?: SortOrder
    rpm?: SortOrder
    rpmm?: SortOrder
    totrpm?: SortOrder
    stppress?: SortOrder
    csgpress?: SortOrder
    mudflowine?: SortOrder
    mudflowin?: SortOrder
    mudflowoute?: SortOrder
    mudflowout?: SortOrder
    mudflowoutp?: SortOrder
    diffflow?: SortOrder
    klflow?: SortOrder
    muddensin?: SortOrder
    muddensout?: SortOrder
    mudtempin?: SortOrder
    mudtempout?: SortOrder
    mudcondin?: SortOrder
    mudcondout?: SortOrder
    mfiann?: SortOrder
    mfianne?: SortOrder
    surfrev?: SortOrder
    drillrev?: SortOrder
    reamrev?: SortOrder
    circrev?: SortOrder
    totrev?: SortOrder
    drilltime?: SortOrder
    reamtime?: SortOrder
    circtime?: SortOrder
    pumptime?: SortOrder
    rotatingtime?: SortOrder
    drilldist?: SortOrder
    stroke1?: SortOrder
    stroke2?: SortOrder
    stroke3?: SortOrder
    stroke4?: SortOrder
    totstks?: SortOrder
    totstksa?: SortOrder
    spm1?: SortOrder
    spm2?: SortOrder
    spm3?: SortOrder
    spm4?: SortOrder
    spm5?: SortOrder
    totspm?: SortOrder
    totspma?: SortOrder
    totpumpede?: SortOrder
    totpumpvol?: SortOrder
    totpumpvolan?: SortOrder
    totpumpedea?: SortOrder
    tankvoltot?: SortOrder
    tankvolact?: SortOrder
    tankvoltt?: SortOrder
    tankvolchgtot?: SortOrder
    tankvolchgact?: SortOrder
    tankvolchgtt?: SortOrder
    plbit?: SortOrder
    plstr?: SortOrder
    plann?: SortOrder
    plsurf?: SortOrder
    plmtr?: SortOrder
    plmwd?: SortOrder
    bithydpwr?: SortOrder
    bithydpwra?: SortOrder
    jif?: SortOrder
    jetvel?: SortOrder
    annveln?: SortOrder
    annvelx?: SortOrder
    ecddpt?: SortOrder
    ecdbit?: SortOrder
    ecdshoe?: SortOrder
    phydpwr?: SortOrder
    deptretm?: SortOrder
    lagstks?: SortOrder
    lagtime?: SortOrder
    dnhstroke?: SortOrder
    dnhtime?: SortOrder
    mse?: SortOrder
    doc?: SortOrder
    gas?: SortOrder
    dstrength?: SortOrder
    mseds?: SortOrder
    clcontent?: SortOrder
    in_slips?: SortOrder
    bht?: SortOrder
    scfm?: SortOrder
    airflin?: SortOrder
    airfline?: SortOrder
    airfloutp?: SortOrder
    airflout?: SortOrder
    airpress?: SortOrder
    airtemp?: SortOrder
    whp?: SortOrder
    wht?: SortOrder
    h2s1?: SortOrder
    h2s2?: SortOrder
    h2s3?: SortOrder
    h2s4?: SortOrder
    co21?: SortOrder
    co22?: SortOrder
    co23?: SortOrder
    co24?: SortOrder
    bitsize?: SortOrder
    foamrate?: SortOrder
    spare_1?: SortOrder
    spare_2?: SortOrder
    spare_3?: SortOrder
    spare_4?: SortOrder
    spare_5?: SortOrder
    spare_6?: SortOrder
    spare_7?: SortOrder
    spare_8?: SortOrder
    spare_9?: SortOrder
    spare_10?: SortOrder
    spare_50?: SortOrder
    spare_51?: SortOrder
    spare_52?: SortOrder
    spare_53?: SortOrder
    spare_54?: SortOrder
    spare_55?: SortOrder
    spare_56?: SortOrder
    label?: SortOrder
    posisiy?: SortOrder
    tipenote?: SortOrder
    idnote?: SortOrder
    wellId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    seen?: SortOrder
    wellId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    seen?: SortOrder
    wellId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    seen?: SortOrder
    wellId?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RuleConditionListRelationFilter = {
    every?: RuleConditionWhereInput
    some?: RuleConditionWhereInput
    none?: RuleConditionWhereInput
  }

  export type RuleConditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConditionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    wellId?: SortOrder
  }

  export type ConditionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    wellId?: SortOrder
  }

  export type ConditionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    wellId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumLogicalOperatorFilter<$PrismaModel = never> = {
    equals?: $Enums.LogicalOperator | EnumLogicalOperatorFieldRefInput<$PrismaModel>
    in?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    not?: NestedEnumLogicalOperatorFilter<$PrismaModel> | $Enums.LogicalOperator
  }

  export type ConditionRelationFilter = {
    is?: ConditionWhereInput
    isNot?: ConditionWhereInput
  }

  export type RuleConditionCountOrderByAggregateInput = {
    id?: SortOrder
    conditionId?: SortOrder
    parameter?: SortOrder
    operator?: SortOrder
    thresholdValue?: SortOrder
    logicalOperator?: SortOrder
  }

  export type RuleConditionAvgOrderByAggregateInput = {
    thresholdValue?: SortOrder
  }

  export type RuleConditionMaxOrderByAggregateInput = {
    id?: SortOrder
    conditionId?: SortOrder
    parameter?: SortOrder
    operator?: SortOrder
    thresholdValue?: SortOrder
    logicalOperator?: SortOrder
  }

  export type RuleConditionMinOrderByAggregateInput = {
    id?: SortOrder
    conditionId?: SortOrder
    parameter?: SortOrder
    operator?: SortOrder
    thresholdValue?: SortOrder
    logicalOperator?: SortOrder
  }

  export type RuleConditionSumOrderByAggregateInput = {
    thresholdValue?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumLogicalOperatorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogicalOperator | EnumLogicalOperatorFieldRefInput<$PrismaModel>
    in?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    not?: NestedEnumLogicalOperatorWithAggregatesFilter<$PrismaModel> | $Enums.LogicalOperator
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogicalOperatorFilter<$PrismaModel>
    _max?: NestedEnumLogicalOperatorFilter<$PrismaModel>
  }

  export type EmployeeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type PlaceCreateNestedManyWithoutCompanyInput = {
    create?: XOR<PlaceCreateWithoutCompanyInput, PlaceUncheckedCreateWithoutCompanyInput> | PlaceCreateWithoutCompanyInput[] | PlaceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutCompanyInput | PlaceCreateOrConnectWithoutCompanyInput[]
    createMany?: PlaceCreateManyCompanyInputEnvelope
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type PlaceUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<PlaceCreateWithoutCompanyInput, PlaceUncheckedCreateWithoutCompanyInput> | PlaceCreateWithoutCompanyInput[] | PlaceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutCompanyInput | PlaceCreateOrConnectWithoutCompanyInput[]
    createMany?: PlaceCreateManyCompanyInputEnvelope
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EmployeeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type PlaceUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<PlaceCreateWithoutCompanyInput, PlaceUncheckedCreateWithoutCompanyInput> | PlaceCreateWithoutCompanyInput[] | PlaceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutCompanyInput | PlaceCreateOrConnectWithoutCompanyInput[]
    upsert?: PlaceUpsertWithWhereUniqueWithoutCompanyInput | PlaceUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: PlaceCreateManyCompanyInputEnvelope
    set?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    disconnect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    delete?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    update?: PlaceUpdateWithWhereUniqueWithoutCompanyInput | PlaceUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: PlaceUpdateManyWithWhereWithoutCompanyInput | PlaceUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type PlaceUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<PlaceCreateWithoutCompanyInput, PlaceUncheckedCreateWithoutCompanyInput> | PlaceCreateWithoutCompanyInput[] | PlaceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PlaceCreateOrConnectWithoutCompanyInput | PlaceCreateOrConnectWithoutCompanyInput[]
    upsert?: PlaceUpsertWithWhereUniqueWithoutCompanyInput | PlaceUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: PlaceCreateManyCompanyInputEnvelope
    set?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    disconnect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    delete?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    connect?: PlaceWhereUniqueInput | PlaceWhereUniqueInput[]
    update?: PlaceUpdateWithWhereUniqueWithoutCompanyInput | PlaceUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: PlaceUpdateManyWithWhereWithoutCompanyInput | PlaceUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<CompanyCreateWithoutEmployeeInput, CompanyUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeeInput
    connect?: CompanyWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type CompanyUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<CompanyCreateWithoutEmployeeInput, CompanyUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeeInput
    upsert?: CompanyUpsertWithoutEmployeeInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutEmployeeInput, CompanyUpdateWithoutEmployeeInput>, CompanyUncheckedUpdateWithoutEmployeeInput>
  }

  export type CompanyCreateNestedOneWithoutPlaceInput = {
    create?: XOR<CompanyCreateWithoutPlaceInput, CompanyUncheckedCreateWithoutPlaceInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPlaceInput
    connect?: CompanyWhereUniqueInput
  }

  export type WellCreateNestedManyWithoutPlaceInput = {
    create?: XOR<WellCreateWithoutPlaceInput, WellUncheckedCreateWithoutPlaceInput> | WellCreateWithoutPlaceInput[] | WellUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: WellCreateOrConnectWithoutPlaceInput | WellCreateOrConnectWithoutPlaceInput[]
    createMany?: WellCreateManyPlaceInputEnvelope
    connect?: WellWhereUniqueInput | WellWhereUniqueInput[]
  }

  export type WellUncheckedCreateNestedManyWithoutPlaceInput = {
    create?: XOR<WellCreateWithoutPlaceInput, WellUncheckedCreateWithoutPlaceInput> | WellCreateWithoutPlaceInput[] | WellUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: WellCreateOrConnectWithoutPlaceInput | WellCreateOrConnectWithoutPlaceInput[]
    createMany?: WellCreateManyPlaceInputEnvelope
    connect?: WellWhereUniqueInput | WellWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneRequiredWithoutPlaceNestedInput = {
    create?: XOR<CompanyCreateWithoutPlaceInput, CompanyUncheckedCreateWithoutPlaceInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPlaceInput
    upsert?: CompanyUpsertWithoutPlaceInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutPlaceInput, CompanyUpdateWithoutPlaceInput>, CompanyUncheckedUpdateWithoutPlaceInput>
  }

  export type WellUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<WellCreateWithoutPlaceInput, WellUncheckedCreateWithoutPlaceInput> | WellCreateWithoutPlaceInput[] | WellUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: WellCreateOrConnectWithoutPlaceInput | WellCreateOrConnectWithoutPlaceInput[]
    upsert?: WellUpsertWithWhereUniqueWithoutPlaceInput | WellUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: WellCreateManyPlaceInputEnvelope
    set?: WellWhereUniqueInput | WellWhereUniqueInput[]
    disconnect?: WellWhereUniqueInput | WellWhereUniqueInput[]
    delete?: WellWhereUniqueInput | WellWhereUniqueInput[]
    connect?: WellWhereUniqueInput | WellWhereUniqueInput[]
    update?: WellUpdateWithWhereUniqueWithoutPlaceInput | WellUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: WellUpdateManyWithWhereWithoutPlaceInput | WellUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: WellScalarWhereInput | WellScalarWhereInput[]
  }

  export type WellUncheckedUpdateManyWithoutPlaceNestedInput = {
    create?: XOR<WellCreateWithoutPlaceInput, WellUncheckedCreateWithoutPlaceInput> | WellCreateWithoutPlaceInput[] | WellUncheckedCreateWithoutPlaceInput[]
    connectOrCreate?: WellCreateOrConnectWithoutPlaceInput | WellCreateOrConnectWithoutPlaceInput[]
    upsert?: WellUpsertWithWhereUniqueWithoutPlaceInput | WellUpsertWithWhereUniqueWithoutPlaceInput[]
    createMany?: WellCreateManyPlaceInputEnvelope
    set?: WellWhereUniqueInput | WellWhereUniqueInput[]
    disconnect?: WellWhereUniqueInput | WellWhereUniqueInput[]
    delete?: WellWhereUniqueInput | WellWhereUniqueInput[]
    connect?: WellWhereUniqueInput | WellWhereUniqueInput[]
    update?: WellUpdateWithWhereUniqueWithoutPlaceInput | WellUpdateWithWhereUniqueWithoutPlaceInput[]
    updateMany?: WellUpdateManyWithWhereWithoutPlaceInput | WellUpdateManyWithWhereWithoutPlaceInput[]
    deleteMany?: WellScalarWhereInput | WellScalarWhereInput[]
  }

  export type PlaceCreateNestedOneWithoutWellInput = {
    create?: XOR<PlaceCreateWithoutWellInput, PlaceUncheckedCreateWithoutWellInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutWellInput
    connect?: PlaceWhereUniqueInput
  }

  export type ConditionCreateNestedManyWithoutWellInput = {
    create?: XOR<ConditionCreateWithoutWellInput, ConditionUncheckedCreateWithoutWellInput> | ConditionCreateWithoutWellInput[] | ConditionUncheckedCreateWithoutWellInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutWellInput | ConditionCreateOrConnectWithoutWellInput[]
    createMany?: ConditionCreateManyWellInputEnvelope
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
  }

  export type RecordCreateNestedManyWithoutWellInput = {
    create?: XOR<RecordCreateWithoutWellInput, RecordUncheckedCreateWithoutWellInput> | RecordCreateWithoutWellInput[] | RecordUncheckedCreateWithoutWellInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutWellInput | RecordCreateOrConnectWithoutWellInput[]
    createMany?: RecordCreateManyWellInputEnvelope
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutWellInput = {
    create?: XOR<NotificationCreateWithoutWellInput, NotificationUncheckedCreateWithoutWellInput> | NotificationCreateWithoutWellInput[] | NotificationUncheckedCreateWithoutWellInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutWellInput | NotificationCreateOrConnectWithoutWellInput[]
    createMany?: NotificationCreateManyWellInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ConditionUncheckedCreateNestedManyWithoutWellInput = {
    create?: XOR<ConditionCreateWithoutWellInput, ConditionUncheckedCreateWithoutWellInput> | ConditionCreateWithoutWellInput[] | ConditionUncheckedCreateWithoutWellInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutWellInput | ConditionCreateOrConnectWithoutWellInput[]
    createMany?: ConditionCreateManyWellInputEnvelope
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
  }

  export type RecordUncheckedCreateNestedManyWithoutWellInput = {
    create?: XOR<RecordCreateWithoutWellInput, RecordUncheckedCreateWithoutWellInput> | RecordCreateWithoutWellInput[] | RecordUncheckedCreateWithoutWellInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutWellInput | RecordCreateOrConnectWithoutWellInput[]
    createMany?: RecordCreateManyWellInputEnvelope
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutWellInput = {
    create?: XOR<NotificationCreateWithoutWellInput, NotificationUncheckedCreateWithoutWellInput> | NotificationCreateWithoutWellInput[] | NotificationUncheckedCreateWithoutWellInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutWellInput | NotificationCreateOrConnectWithoutWellInput[]
    createMany?: NotificationCreateManyWellInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PlaceUpdateOneRequiredWithoutWellNestedInput = {
    create?: XOR<PlaceCreateWithoutWellInput, PlaceUncheckedCreateWithoutWellInput>
    connectOrCreate?: PlaceCreateOrConnectWithoutWellInput
    upsert?: PlaceUpsertWithoutWellInput
    connect?: PlaceWhereUniqueInput
    update?: XOR<XOR<PlaceUpdateToOneWithWhereWithoutWellInput, PlaceUpdateWithoutWellInput>, PlaceUncheckedUpdateWithoutWellInput>
  }

  export type ConditionUpdateManyWithoutWellNestedInput = {
    create?: XOR<ConditionCreateWithoutWellInput, ConditionUncheckedCreateWithoutWellInput> | ConditionCreateWithoutWellInput[] | ConditionUncheckedCreateWithoutWellInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutWellInput | ConditionCreateOrConnectWithoutWellInput[]
    upsert?: ConditionUpsertWithWhereUniqueWithoutWellInput | ConditionUpsertWithWhereUniqueWithoutWellInput[]
    createMany?: ConditionCreateManyWellInputEnvelope
    set?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    disconnect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    delete?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    update?: ConditionUpdateWithWhereUniqueWithoutWellInput | ConditionUpdateWithWhereUniqueWithoutWellInput[]
    updateMany?: ConditionUpdateManyWithWhereWithoutWellInput | ConditionUpdateManyWithWhereWithoutWellInput[]
    deleteMany?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
  }

  export type RecordUpdateManyWithoutWellNestedInput = {
    create?: XOR<RecordCreateWithoutWellInput, RecordUncheckedCreateWithoutWellInput> | RecordCreateWithoutWellInput[] | RecordUncheckedCreateWithoutWellInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutWellInput | RecordCreateOrConnectWithoutWellInput[]
    upsert?: RecordUpsertWithWhereUniqueWithoutWellInput | RecordUpsertWithWhereUniqueWithoutWellInput[]
    createMany?: RecordCreateManyWellInputEnvelope
    set?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    disconnect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    delete?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    update?: RecordUpdateWithWhereUniqueWithoutWellInput | RecordUpdateWithWhereUniqueWithoutWellInput[]
    updateMany?: RecordUpdateManyWithWhereWithoutWellInput | RecordUpdateManyWithWhereWithoutWellInput[]
    deleteMany?: RecordScalarWhereInput | RecordScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutWellNestedInput = {
    create?: XOR<NotificationCreateWithoutWellInput, NotificationUncheckedCreateWithoutWellInput> | NotificationCreateWithoutWellInput[] | NotificationUncheckedCreateWithoutWellInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutWellInput | NotificationCreateOrConnectWithoutWellInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutWellInput | NotificationUpsertWithWhereUniqueWithoutWellInput[]
    createMany?: NotificationCreateManyWellInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutWellInput | NotificationUpdateWithWhereUniqueWithoutWellInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutWellInput | NotificationUpdateManyWithWhereWithoutWellInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ConditionUncheckedUpdateManyWithoutWellNestedInput = {
    create?: XOR<ConditionCreateWithoutWellInput, ConditionUncheckedCreateWithoutWellInput> | ConditionCreateWithoutWellInput[] | ConditionUncheckedCreateWithoutWellInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutWellInput | ConditionCreateOrConnectWithoutWellInput[]
    upsert?: ConditionUpsertWithWhereUniqueWithoutWellInput | ConditionUpsertWithWhereUniqueWithoutWellInput[]
    createMany?: ConditionCreateManyWellInputEnvelope
    set?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    disconnect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    delete?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    update?: ConditionUpdateWithWhereUniqueWithoutWellInput | ConditionUpdateWithWhereUniqueWithoutWellInput[]
    updateMany?: ConditionUpdateManyWithWhereWithoutWellInput | ConditionUpdateManyWithWhereWithoutWellInput[]
    deleteMany?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
  }

  export type RecordUncheckedUpdateManyWithoutWellNestedInput = {
    create?: XOR<RecordCreateWithoutWellInput, RecordUncheckedCreateWithoutWellInput> | RecordCreateWithoutWellInput[] | RecordUncheckedCreateWithoutWellInput[]
    connectOrCreate?: RecordCreateOrConnectWithoutWellInput | RecordCreateOrConnectWithoutWellInput[]
    upsert?: RecordUpsertWithWhereUniqueWithoutWellInput | RecordUpsertWithWhereUniqueWithoutWellInput[]
    createMany?: RecordCreateManyWellInputEnvelope
    set?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    disconnect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    delete?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    connect?: RecordWhereUniqueInput | RecordWhereUniqueInput[]
    update?: RecordUpdateWithWhereUniqueWithoutWellInput | RecordUpdateWithWhereUniqueWithoutWellInput[]
    updateMany?: RecordUpdateManyWithWhereWithoutWellInput | RecordUpdateManyWithWhereWithoutWellInput[]
    deleteMany?: RecordScalarWhereInput | RecordScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutWellNestedInput = {
    create?: XOR<NotificationCreateWithoutWellInput, NotificationUncheckedCreateWithoutWellInput> | NotificationCreateWithoutWellInput[] | NotificationUncheckedCreateWithoutWellInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutWellInput | NotificationCreateOrConnectWithoutWellInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutWellInput | NotificationUpsertWithWhereUniqueWithoutWellInput[]
    createMany?: NotificationCreateManyWellInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutWellInput | NotificationUpdateWithWhereUniqueWithoutWellInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutWellInput | NotificationUpdateManyWithWhereWithoutWellInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type WellCreateNestedOneWithoutRecordInput = {
    create?: XOR<WellCreateWithoutRecordInput, WellUncheckedCreateWithoutRecordInput>
    connectOrCreate?: WellCreateOrConnectWithoutRecordInput
    connect?: WellWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WellUpdateOneRequiredWithoutRecordNestedInput = {
    create?: XOR<WellCreateWithoutRecordInput, WellUncheckedCreateWithoutRecordInput>
    connectOrCreate?: WellCreateOrConnectWithoutRecordInput
    upsert?: WellUpsertWithoutRecordInput
    connect?: WellWhereUniqueInput
    update?: XOR<XOR<WellUpdateToOneWithWhereWithoutRecordInput, WellUpdateWithoutRecordInput>, WellUncheckedUpdateWithoutRecordInput>
  }

  export type WellCreateNestedOneWithoutNotificationInput = {
    create?: XOR<WellCreateWithoutNotificationInput, WellUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: WellCreateOrConnectWithoutNotificationInput
    connect?: WellWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type WellUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<WellCreateWithoutNotificationInput, WellUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: WellCreateOrConnectWithoutNotificationInput
    upsert?: WellUpsertWithoutNotificationInput
    connect?: WellWhereUniqueInput
    update?: XOR<XOR<WellUpdateToOneWithWhereWithoutNotificationInput, WellUpdateWithoutNotificationInput>, WellUncheckedUpdateWithoutNotificationInput>
  }

  export type RuleConditionCreateNestedManyWithoutConditionInput = {
    create?: XOR<RuleConditionCreateWithoutConditionInput, RuleConditionUncheckedCreateWithoutConditionInput> | RuleConditionCreateWithoutConditionInput[] | RuleConditionUncheckedCreateWithoutConditionInput[]
    connectOrCreate?: RuleConditionCreateOrConnectWithoutConditionInput | RuleConditionCreateOrConnectWithoutConditionInput[]
    createMany?: RuleConditionCreateManyConditionInputEnvelope
    connect?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
  }

  export type WellCreateNestedOneWithoutConditionInput = {
    create?: XOR<WellCreateWithoutConditionInput, WellUncheckedCreateWithoutConditionInput>
    connectOrCreate?: WellCreateOrConnectWithoutConditionInput
    connect?: WellWhereUniqueInput
  }

  export type RuleConditionUncheckedCreateNestedManyWithoutConditionInput = {
    create?: XOR<RuleConditionCreateWithoutConditionInput, RuleConditionUncheckedCreateWithoutConditionInput> | RuleConditionCreateWithoutConditionInput[] | RuleConditionUncheckedCreateWithoutConditionInput[]
    connectOrCreate?: RuleConditionCreateOrConnectWithoutConditionInput | RuleConditionCreateOrConnectWithoutConditionInput[]
    createMany?: RuleConditionCreateManyConditionInputEnvelope
    connect?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
  }

  export type RuleConditionUpdateManyWithoutConditionNestedInput = {
    create?: XOR<RuleConditionCreateWithoutConditionInput, RuleConditionUncheckedCreateWithoutConditionInput> | RuleConditionCreateWithoutConditionInput[] | RuleConditionUncheckedCreateWithoutConditionInput[]
    connectOrCreate?: RuleConditionCreateOrConnectWithoutConditionInput | RuleConditionCreateOrConnectWithoutConditionInput[]
    upsert?: RuleConditionUpsertWithWhereUniqueWithoutConditionInput | RuleConditionUpsertWithWhereUniqueWithoutConditionInput[]
    createMany?: RuleConditionCreateManyConditionInputEnvelope
    set?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    disconnect?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    delete?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    connect?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    update?: RuleConditionUpdateWithWhereUniqueWithoutConditionInput | RuleConditionUpdateWithWhereUniqueWithoutConditionInput[]
    updateMany?: RuleConditionUpdateManyWithWhereWithoutConditionInput | RuleConditionUpdateManyWithWhereWithoutConditionInput[]
    deleteMany?: RuleConditionScalarWhereInput | RuleConditionScalarWhereInput[]
  }

  export type WellUpdateOneRequiredWithoutConditionNestedInput = {
    create?: XOR<WellCreateWithoutConditionInput, WellUncheckedCreateWithoutConditionInput>
    connectOrCreate?: WellCreateOrConnectWithoutConditionInput
    upsert?: WellUpsertWithoutConditionInput
    connect?: WellWhereUniqueInput
    update?: XOR<XOR<WellUpdateToOneWithWhereWithoutConditionInput, WellUpdateWithoutConditionInput>, WellUncheckedUpdateWithoutConditionInput>
  }

  export type RuleConditionUncheckedUpdateManyWithoutConditionNestedInput = {
    create?: XOR<RuleConditionCreateWithoutConditionInput, RuleConditionUncheckedCreateWithoutConditionInput> | RuleConditionCreateWithoutConditionInput[] | RuleConditionUncheckedCreateWithoutConditionInput[]
    connectOrCreate?: RuleConditionCreateOrConnectWithoutConditionInput | RuleConditionCreateOrConnectWithoutConditionInput[]
    upsert?: RuleConditionUpsertWithWhereUniqueWithoutConditionInput | RuleConditionUpsertWithWhereUniqueWithoutConditionInput[]
    createMany?: RuleConditionCreateManyConditionInputEnvelope
    set?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    disconnect?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    delete?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    connect?: RuleConditionWhereUniqueInput | RuleConditionWhereUniqueInput[]
    update?: RuleConditionUpdateWithWhereUniqueWithoutConditionInput | RuleConditionUpdateWithWhereUniqueWithoutConditionInput[]
    updateMany?: RuleConditionUpdateManyWithWhereWithoutConditionInput | RuleConditionUpdateManyWithWhereWithoutConditionInput[]
    deleteMany?: RuleConditionScalarWhereInput | RuleConditionScalarWhereInput[]
  }

  export type ConditionCreateNestedOneWithoutRulesInput = {
    create?: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput>
    connectOrCreate?: ConditionCreateOrConnectWithoutRulesInput
    connect?: ConditionWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumLogicalOperatorFieldUpdateOperationsInput = {
    set?: $Enums.LogicalOperator
  }

  export type ConditionUpdateOneRequiredWithoutRulesNestedInput = {
    create?: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput>
    connectOrCreate?: ConditionCreateOrConnectWithoutRulesInput
    upsert?: ConditionUpsertWithoutRulesInput
    connect?: ConditionWhereUniqueInput
    update?: XOR<XOR<ConditionUpdateToOneWithWhereWithoutRulesInput, ConditionUpdateWithoutRulesInput>, ConditionUncheckedUpdateWithoutRulesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumLogicalOperatorFilter<$PrismaModel = never> = {
    equals?: $Enums.LogicalOperator | EnumLogicalOperatorFieldRefInput<$PrismaModel>
    in?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    not?: NestedEnumLogicalOperatorFilter<$PrismaModel> | $Enums.LogicalOperator
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumLogicalOperatorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LogicalOperator | EnumLogicalOperatorFieldRefInput<$PrismaModel>
    in?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    notIn?: $Enums.LogicalOperator[] | ListEnumLogicalOperatorFieldRefInput<$PrismaModel>
    not?: NestedEnumLogicalOperatorWithAggregatesFilter<$PrismaModel> | $Enums.LogicalOperator
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLogicalOperatorFilter<$PrismaModel>
    _max?: NestedEnumLogicalOperatorFilter<$PrismaModel>
  }

  export type EmployeeCreateWithoutCompanyInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.Role
    password: string
  }

  export type EmployeeUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.Role
    password: string
  }

  export type EmployeeCreateOrConnectWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeCreateManyCompanyInputEnvelope = {
    data: EmployeeCreateManyCompanyInput | EmployeeCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type PlaceCreateWithoutCompanyInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    Well?: WellCreateNestedManyWithoutPlaceInput
  }

  export type PlaceUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    Well?: WellUncheckedCreateNestedManyWithoutPlaceInput
  }

  export type PlaceCreateOrConnectWithoutCompanyInput = {
    where: PlaceWhereUniqueInput
    create: XOR<PlaceCreateWithoutCompanyInput, PlaceUncheckedCreateWithoutCompanyInput>
  }

  export type PlaceCreateManyCompanyInputEnvelope = {
    data: PlaceCreateManyCompanyInput | PlaceCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutCompanyInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    password?: StringFilter<"Employee"> | string
    companyId?: StringNullableFilter<"Employee"> | string | null
  }

  export type PlaceUpsertWithWhereUniqueWithoutCompanyInput = {
    where: PlaceWhereUniqueInput
    update: XOR<PlaceUpdateWithoutCompanyInput, PlaceUncheckedUpdateWithoutCompanyInput>
    create: XOR<PlaceCreateWithoutCompanyInput, PlaceUncheckedCreateWithoutCompanyInput>
  }

  export type PlaceUpdateWithWhereUniqueWithoutCompanyInput = {
    where: PlaceWhereUniqueInput
    data: XOR<PlaceUpdateWithoutCompanyInput, PlaceUncheckedUpdateWithoutCompanyInput>
  }

  export type PlaceUpdateManyWithWhereWithoutCompanyInput = {
    where: PlaceScalarWhereInput
    data: XOR<PlaceUpdateManyMutationInput, PlaceUncheckedUpdateManyWithoutCompanyInput>
  }

  export type PlaceScalarWhereInput = {
    AND?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
    OR?: PlaceScalarWhereInput[]
    NOT?: PlaceScalarWhereInput | PlaceScalarWhereInput[]
    id?: StringFilter<"Place"> | string
    name?: StringFilter<"Place"> | string
    address?: StringNullableFilter<"Place"> | string | null
    latitude?: FloatNullableFilter<"Place"> | number | null
    longitude?: FloatNullableFilter<"Place"> | number | null
    companyId?: StringFilter<"Place"> | string
  }

  export type CompanyCreateWithoutEmployeeInput = {
    id?: string
    name: string
    address?: string | null
    Place?: PlaceCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutEmployeeInput = {
    id?: string
    name: string
    address?: string | null
    Place?: PlaceUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEmployeeInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEmployeeInput, CompanyUncheckedCreateWithoutEmployeeInput>
  }

  export type CompanyUpsertWithoutEmployeeInput = {
    update: XOR<CompanyUpdateWithoutEmployeeInput, CompanyUncheckedUpdateWithoutEmployeeInput>
    create: XOR<CompanyCreateWithoutEmployeeInput, CompanyUncheckedCreateWithoutEmployeeInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutEmployeeInput, CompanyUncheckedUpdateWithoutEmployeeInput>
  }

  export type CompanyUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    Place?: PlaceUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    Place?: PlaceUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutPlaceInput = {
    id?: string
    name: string
    address?: string | null
    Employee?: EmployeeCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutPlaceInput = {
    id?: string
    name: string
    address?: string | null
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutPlaceInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutPlaceInput, CompanyUncheckedCreateWithoutPlaceInput>
  }

  export type WellCreateWithoutPlaceInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    Condition?: ConditionCreateNestedManyWithoutWellInput
    Record?: RecordCreateNestedManyWithoutWellInput
    Notification?: NotificationCreateNestedManyWithoutWellInput
  }

  export type WellUncheckedCreateWithoutPlaceInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    Condition?: ConditionUncheckedCreateNestedManyWithoutWellInput
    Record?: RecordUncheckedCreateNestedManyWithoutWellInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutWellInput
  }

  export type WellCreateOrConnectWithoutPlaceInput = {
    where: WellWhereUniqueInput
    create: XOR<WellCreateWithoutPlaceInput, WellUncheckedCreateWithoutPlaceInput>
  }

  export type WellCreateManyPlaceInputEnvelope = {
    data: WellCreateManyPlaceInput | WellCreateManyPlaceInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutPlaceInput = {
    update: XOR<CompanyUpdateWithoutPlaceInput, CompanyUncheckedUpdateWithoutPlaceInput>
    create: XOR<CompanyCreateWithoutPlaceInput, CompanyUncheckedCreateWithoutPlaceInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutPlaceInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutPlaceInput, CompanyUncheckedUpdateWithoutPlaceInput>
  }

  export type CompanyUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    Employee?: EmployeeUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    Employee?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type WellUpsertWithWhereUniqueWithoutPlaceInput = {
    where: WellWhereUniqueInput
    update: XOR<WellUpdateWithoutPlaceInput, WellUncheckedUpdateWithoutPlaceInput>
    create: XOR<WellCreateWithoutPlaceInput, WellUncheckedCreateWithoutPlaceInput>
  }

  export type WellUpdateWithWhereUniqueWithoutPlaceInput = {
    where: WellWhereUniqueInput
    data: XOR<WellUpdateWithoutPlaceInput, WellUncheckedUpdateWithoutPlaceInput>
  }

  export type WellUpdateManyWithWhereWithoutPlaceInput = {
    where: WellScalarWhereInput
    data: XOR<WellUpdateManyMutationInput, WellUncheckedUpdateManyWithoutPlaceInput>
  }

  export type WellScalarWhereInput = {
    AND?: WellScalarWhereInput | WellScalarWhereInput[]
    OR?: WellScalarWhereInput[]
    NOT?: WellScalarWhereInput | WellScalarWhereInput[]
    id?: StringFilter<"Well"> | string
    name?: StringFilter<"Well"> | string
    address?: StringNullableFilter<"Well"> | string | null
    latitude?: FloatNullableFilter<"Well"> | number | null
    longitude?: FloatNullableFilter<"Well"> | number | null
    topic?: StringFilter<"Well"> | string
    placeId?: StringFilter<"Well"> | string
  }

  export type PlaceCreateWithoutWellInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    company: CompanyCreateNestedOneWithoutPlaceInput
  }

  export type PlaceUncheckedCreateWithoutWellInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    companyId: string
  }

  export type PlaceCreateOrConnectWithoutWellInput = {
    where: PlaceWhereUniqueInput
    create: XOR<PlaceCreateWithoutWellInput, PlaceUncheckedCreateWithoutWellInput>
  }

  export type ConditionCreateWithoutWellInput = {
    id?: string
    name: string
    rules?: RuleConditionCreateNestedManyWithoutConditionInput
  }

  export type ConditionUncheckedCreateWithoutWellInput = {
    id?: string
    name: string
    rules?: RuleConditionUncheckedCreateNestedManyWithoutConditionInput
  }

  export type ConditionCreateOrConnectWithoutWellInput = {
    where: ConditionWhereUniqueInput
    create: XOR<ConditionCreateWithoutWellInput, ConditionUncheckedCreateWithoutWellInput>
  }

  export type ConditionCreateManyWellInputEnvelope = {
    data: ConditionCreateManyWellInput | ConditionCreateManyWellInput[]
    skipDuplicates?: boolean
  }

  export type RecordCreateWithoutWellInput = {
    id?: string
    dt: Date | string
    wid: string
    sid: string
    recid: string
    seqid: string
    date: string
    time: string
    actcode: string
    blockpos: string
    bitdepth: string
    deptbitv: string
    md: string
    tvd: string
    logdepth: string
    speedup: string
    speeddown: string
    rop: string
    ropi: string
    timeropi: string
    hklda: string
    hkldx: string
    hkldpu: string
    hkldso: string
    woba: string
    wobx: string
    torqa: string
    torqx: string
    torqp: string
    torqb: string
    rpm: string
    rpmm: string
    totrpm: string
    stppress: string
    csgpress: string
    mudflowine: string
    mudflowin: string
    mudflowoute: string
    mudflowout: string
    mudflowoutp: string
    diffflow: string
    klflow: string
    muddensin: string
    muddensout: string
    mudtempin: string
    mudtempout: string
    mudcondin: string
    mudcondout: string
    mfiann: string
    mfianne: string
    surfrev: string
    drillrev: string
    reamrev: string
    circrev: string
    totrev: string
    drilltime: string
    reamtime: string
    circtime: string
    pumptime: string
    rotatingtime: string
    drilldist: string
    stroke1: string
    stroke2: string
    stroke3: string
    stroke4: string
    totstks: string
    totstksa: string
    spm1: string
    spm2: string
    spm3: string
    spm4: string
    spm5: string
    totspm: string
    totspma: string
    totpumpede: string
    totpumpvol: string
    totpumpvolan: string
    totpumpedea: string
    tankvoltot: string
    tankvolact: string
    tankvoltt: string
    tankvolchgtot: string
    tankvolchgact: string
    tankvolchgtt: string
    plbit: string
    plstr: string
    plann: string
    plsurf: string
    plmtr: string
    plmwd: string
    bithydpwr: string
    bithydpwra: string
    jif: string
    jetvel: string
    annveln: string
    annvelx: string
    ecddpt: string
    ecdbit: string
    ecdshoe: string
    phydpwr: string
    deptretm: string
    lagstks: string
    lagtime: string
    dnhstroke: string
    dnhtime: string
    mse: string
    doc: string
    gas: string
    dstrength: string
    mseds: string
    clcontent: string
    in_slips?: string | null
    bht: string
    scfm: string
    airflin: string
    airfline: string
    airfloutp: string
    airflout: string
    airpress: string
    airtemp: string
    whp: string
    wht: string
    h2s1: string
    h2s2: string
    h2s3: string
    h2s4: string
    co21: string
    co22: string
    co23: string
    co24: string
    bitsize: string
    foamrate: string
    spare_1: string
    spare_2: string
    spare_3: string
    spare_4: string
    spare_5: string
    spare_6: string
    spare_7: string
    spare_8: string
    spare_9: string
    spare_10: string
    spare_50: string
    spare_51: string
    spare_52: string
    spare_53: string
    spare_54: string
    spare_55: string
    spare_56: string
    label?: string | null
    posisiy?: string | null
    tipenote?: string | null
    idnote?: string | null
  }

  export type RecordUncheckedCreateWithoutWellInput = {
    id?: string
    dt: Date | string
    wid: string
    sid: string
    recid: string
    seqid: string
    date: string
    time: string
    actcode: string
    blockpos: string
    bitdepth: string
    deptbitv: string
    md: string
    tvd: string
    logdepth: string
    speedup: string
    speeddown: string
    rop: string
    ropi: string
    timeropi: string
    hklda: string
    hkldx: string
    hkldpu: string
    hkldso: string
    woba: string
    wobx: string
    torqa: string
    torqx: string
    torqp: string
    torqb: string
    rpm: string
    rpmm: string
    totrpm: string
    stppress: string
    csgpress: string
    mudflowine: string
    mudflowin: string
    mudflowoute: string
    mudflowout: string
    mudflowoutp: string
    diffflow: string
    klflow: string
    muddensin: string
    muddensout: string
    mudtempin: string
    mudtempout: string
    mudcondin: string
    mudcondout: string
    mfiann: string
    mfianne: string
    surfrev: string
    drillrev: string
    reamrev: string
    circrev: string
    totrev: string
    drilltime: string
    reamtime: string
    circtime: string
    pumptime: string
    rotatingtime: string
    drilldist: string
    stroke1: string
    stroke2: string
    stroke3: string
    stroke4: string
    totstks: string
    totstksa: string
    spm1: string
    spm2: string
    spm3: string
    spm4: string
    spm5: string
    totspm: string
    totspma: string
    totpumpede: string
    totpumpvol: string
    totpumpvolan: string
    totpumpedea: string
    tankvoltot: string
    tankvolact: string
    tankvoltt: string
    tankvolchgtot: string
    tankvolchgact: string
    tankvolchgtt: string
    plbit: string
    plstr: string
    plann: string
    plsurf: string
    plmtr: string
    plmwd: string
    bithydpwr: string
    bithydpwra: string
    jif: string
    jetvel: string
    annveln: string
    annvelx: string
    ecddpt: string
    ecdbit: string
    ecdshoe: string
    phydpwr: string
    deptretm: string
    lagstks: string
    lagtime: string
    dnhstroke: string
    dnhtime: string
    mse: string
    doc: string
    gas: string
    dstrength: string
    mseds: string
    clcontent: string
    in_slips?: string | null
    bht: string
    scfm: string
    airflin: string
    airfline: string
    airfloutp: string
    airflout: string
    airpress: string
    airtemp: string
    whp: string
    wht: string
    h2s1: string
    h2s2: string
    h2s3: string
    h2s4: string
    co21: string
    co22: string
    co23: string
    co24: string
    bitsize: string
    foamrate: string
    spare_1: string
    spare_2: string
    spare_3: string
    spare_4: string
    spare_5: string
    spare_6: string
    spare_7: string
    spare_8: string
    spare_9: string
    spare_10: string
    spare_50: string
    spare_51: string
    spare_52: string
    spare_53: string
    spare_54: string
    spare_55: string
    spare_56: string
    label?: string | null
    posisiy?: string | null
    tipenote?: string | null
    idnote?: string | null
  }

  export type RecordCreateOrConnectWithoutWellInput = {
    where: RecordWhereUniqueInput
    create: XOR<RecordCreateWithoutWellInput, RecordUncheckedCreateWithoutWellInput>
  }

  export type RecordCreateManyWellInputEnvelope = {
    data: RecordCreateManyWellInput | RecordCreateManyWellInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutWellInput = {
    id?: string
    title: string
    message?: string | null
    seen?: boolean
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutWellInput = {
    id?: string
    title: string
    message?: string | null
    seen?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutWellInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutWellInput, NotificationUncheckedCreateWithoutWellInput>
  }

  export type NotificationCreateManyWellInputEnvelope = {
    data: NotificationCreateManyWellInput | NotificationCreateManyWellInput[]
    skipDuplicates?: boolean
  }

  export type PlaceUpsertWithoutWellInput = {
    update: XOR<PlaceUpdateWithoutWellInput, PlaceUncheckedUpdateWithoutWellInput>
    create: XOR<PlaceCreateWithoutWellInput, PlaceUncheckedCreateWithoutWellInput>
    where?: PlaceWhereInput
  }

  export type PlaceUpdateToOneWithWhereWithoutWellInput = {
    where?: PlaceWhereInput
    data: XOR<PlaceUpdateWithoutWellInput, PlaceUncheckedUpdateWithoutWellInput>
  }

  export type PlaceUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    company?: CompanyUpdateOneRequiredWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    companyId?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionUpsertWithWhereUniqueWithoutWellInput = {
    where: ConditionWhereUniqueInput
    update: XOR<ConditionUpdateWithoutWellInput, ConditionUncheckedUpdateWithoutWellInput>
    create: XOR<ConditionCreateWithoutWellInput, ConditionUncheckedCreateWithoutWellInput>
  }

  export type ConditionUpdateWithWhereUniqueWithoutWellInput = {
    where: ConditionWhereUniqueInput
    data: XOR<ConditionUpdateWithoutWellInput, ConditionUncheckedUpdateWithoutWellInput>
  }

  export type ConditionUpdateManyWithWhereWithoutWellInput = {
    where: ConditionScalarWhereInput
    data: XOR<ConditionUpdateManyMutationInput, ConditionUncheckedUpdateManyWithoutWellInput>
  }

  export type ConditionScalarWhereInput = {
    AND?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
    OR?: ConditionScalarWhereInput[]
    NOT?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
    id?: StringFilter<"Condition"> | string
    name?: StringFilter<"Condition"> | string
    wellId?: StringFilter<"Condition"> | string
  }

  export type RecordUpsertWithWhereUniqueWithoutWellInput = {
    where: RecordWhereUniqueInput
    update: XOR<RecordUpdateWithoutWellInput, RecordUncheckedUpdateWithoutWellInput>
    create: XOR<RecordCreateWithoutWellInput, RecordUncheckedCreateWithoutWellInput>
  }

  export type RecordUpdateWithWhereUniqueWithoutWellInput = {
    where: RecordWhereUniqueInput
    data: XOR<RecordUpdateWithoutWellInput, RecordUncheckedUpdateWithoutWellInput>
  }

  export type RecordUpdateManyWithWhereWithoutWellInput = {
    where: RecordScalarWhereInput
    data: XOR<RecordUpdateManyMutationInput, RecordUncheckedUpdateManyWithoutWellInput>
  }

  export type RecordScalarWhereInput = {
    AND?: RecordScalarWhereInput | RecordScalarWhereInput[]
    OR?: RecordScalarWhereInput[]
    NOT?: RecordScalarWhereInput | RecordScalarWhereInput[]
    id?: StringFilter<"Record"> | string
    dt?: DateTimeFilter<"Record"> | Date | string
    wid?: StringFilter<"Record"> | string
    sid?: StringFilter<"Record"> | string
    recid?: StringFilter<"Record"> | string
    seqid?: StringFilter<"Record"> | string
    date?: StringFilter<"Record"> | string
    time?: StringFilter<"Record"> | string
    actcode?: StringFilter<"Record"> | string
    blockpos?: StringFilter<"Record"> | string
    bitdepth?: StringFilter<"Record"> | string
    deptbitv?: StringFilter<"Record"> | string
    md?: StringFilter<"Record"> | string
    tvd?: StringFilter<"Record"> | string
    logdepth?: StringFilter<"Record"> | string
    speedup?: StringFilter<"Record"> | string
    speeddown?: StringFilter<"Record"> | string
    rop?: StringFilter<"Record"> | string
    ropi?: StringFilter<"Record"> | string
    timeropi?: StringFilter<"Record"> | string
    hklda?: StringFilter<"Record"> | string
    hkldx?: StringFilter<"Record"> | string
    hkldpu?: StringFilter<"Record"> | string
    hkldso?: StringFilter<"Record"> | string
    woba?: StringFilter<"Record"> | string
    wobx?: StringFilter<"Record"> | string
    torqa?: StringFilter<"Record"> | string
    torqx?: StringFilter<"Record"> | string
    torqp?: StringFilter<"Record"> | string
    torqb?: StringFilter<"Record"> | string
    rpm?: StringFilter<"Record"> | string
    rpmm?: StringFilter<"Record"> | string
    totrpm?: StringFilter<"Record"> | string
    stppress?: StringFilter<"Record"> | string
    csgpress?: StringFilter<"Record"> | string
    mudflowine?: StringFilter<"Record"> | string
    mudflowin?: StringFilter<"Record"> | string
    mudflowoute?: StringFilter<"Record"> | string
    mudflowout?: StringFilter<"Record"> | string
    mudflowoutp?: StringFilter<"Record"> | string
    diffflow?: StringFilter<"Record"> | string
    klflow?: StringFilter<"Record"> | string
    muddensin?: StringFilter<"Record"> | string
    muddensout?: StringFilter<"Record"> | string
    mudtempin?: StringFilter<"Record"> | string
    mudtempout?: StringFilter<"Record"> | string
    mudcondin?: StringFilter<"Record"> | string
    mudcondout?: StringFilter<"Record"> | string
    mfiann?: StringFilter<"Record"> | string
    mfianne?: StringFilter<"Record"> | string
    surfrev?: StringFilter<"Record"> | string
    drillrev?: StringFilter<"Record"> | string
    reamrev?: StringFilter<"Record"> | string
    circrev?: StringFilter<"Record"> | string
    totrev?: StringFilter<"Record"> | string
    drilltime?: StringFilter<"Record"> | string
    reamtime?: StringFilter<"Record"> | string
    circtime?: StringFilter<"Record"> | string
    pumptime?: StringFilter<"Record"> | string
    rotatingtime?: StringFilter<"Record"> | string
    drilldist?: StringFilter<"Record"> | string
    stroke1?: StringFilter<"Record"> | string
    stroke2?: StringFilter<"Record"> | string
    stroke3?: StringFilter<"Record"> | string
    stroke4?: StringFilter<"Record"> | string
    totstks?: StringFilter<"Record"> | string
    totstksa?: StringFilter<"Record"> | string
    spm1?: StringFilter<"Record"> | string
    spm2?: StringFilter<"Record"> | string
    spm3?: StringFilter<"Record"> | string
    spm4?: StringFilter<"Record"> | string
    spm5?: StringFilter<"Record"> | string
    totspm?: StringFilter<"Record"> | string
    totspma?: StringFilter<"Record"> | string
    totpumpede?: StringFilter<"Record"> | string
    totpumpvol?: StringFilter<"Record"> | string
    totpumpvolan?: StringFilter<"Record"> | string
    totpumpedea?: StringFilter<"Record"> | string
    tankvoltot?: StringFilter<"Record"> | string
    tankvolact?: StringFilter<"Record"> | string
    tankvoltt?: StringFilter<"Record"> | string
    tankvolchgtot?: StringFilter<"Record"> | string
    tankvolchgact?: StringFilter<"Record"> | string
    tankvolchgtt?: StringFilter<"Record"> | string
    plbit?: StringFilter<"Record"> | string
    plstr?: StringFilter<"Record"> | string
    plann?: StringFilter<"Record"> | string
    plsurf?: StringFilter<"Record"> | string
    plmtr?: StringFilter<"Record"> | string
    plmwd?: StringFilter<"Record"> | string
    bithydpwr?: StringFilter<"Record"> | string
    bithydpwra?: StringFilter<"Record"> | string
    jif?: StringFilter<"Record"> | string
    jetvel?: StringFilter<"Record"> | string
    annveln?: StringFilter<"Record"> | string
    annvelx?: StringFilter<"Record"> | string
    ecddpt?: StringFilter<"Record"> | string
    ecdbit?: StringFilter<"Record"> | string
    ecdshoe?: StringFilter<"Record"> | string
    phydpwr?: StringFilter<"Record"> | string
    deptretm?: StringFilter<"Record"> | string
    lagstks?: StringFilter<"Record"> | string
    lagtime?: StringFilter<"Record"> | string
    dnhstroke?: StringFilter<"Record"> | string
    dnhtime?: StringFilter<"Record"> | string
    mse?: StringFilter<"Record"> | string
    doc?: StringFilter<"Record"> | string
    gas?: StringFilter<"Record"> | string
    dstrength?: StringFilter<"Record"> | string
    mseds?: StringFilter<"Record"> | string
    clcontent?: StringFilter<"Record"> | string
    in_slips?: StringNullableFilter<"Record"> | string | null
    bht?: StringFilter<"Record"> | string
    scfm?: StringFilter<"Record"> | string
    airflin?: StringFilter<"Record"> | string
    airfline?: StringFilter<"Record"> | string
    airfloutp?: StringFilter<"Record"> | string
    airflout?: StringFilter<"Record"> | string
    airpress?: StringFilter<"Record"> | string
    airtemp?: StringFilter<"Record"> | string
    whp?: StringFilter<"Record"> | string
    wht?: StringFilter<"Record"> | string
    h2s1?: StringFilter<"Record"> | string
    h2s2?: StringFilter<"Record"> | string
    h2s3?: StringFilter<"Record"> | string
    h2s4?: StringFilter<"Record"> | string
    co21?: StringFilter<"Record"> | string
    co22?: StringFilter<"Record"> | string
    co23?: StringFilter<"Record"> | string
    co24?: StringFilter<"Record"> | string
    bitsize?: StringFilter<"Record"> | string
    foamrate?: StringFilter<"Record"> | string
    spare_1?: StringFilter<"Record"> | string
    spare_2?: StringFilter<"Record"> | string
    spare_3?: StringFilter<"Record"> | string
    spare_4?: StringFilter<"Record"> | string
    spare_5?: StringFilter<"Record"> | string
    spare_6?: StringFilter<"Record"> | string
    spare_7?: StringFilter<"Record"> | string
    spare_8?: StringFilter<"Record"> | string
    spare_9?: StringFilter<"Record"> | string
    spare_10?: StringFilter<"Record"> | string
    spare_50?: StringFilter<"Record"> | string
    spare_51?: StringFilter<"Record"> | string
    spare_52?: StringFilter<"Record"> | string
    spare_53?: StringFilter<"Record"> | string
    spare_54?: StringFilter<"Record"> | string
    spare_55?: StringFilter<"Record"> | string
    spare_56?: StringFilter<"Record"> | string
    label?: StringNullableFilter<"Record"> | string | null
    posisiy?: StringNullableFilter<"Record"> | string | null
    tipenote?: StringNullableFilter<"Record"> | string | null
    idnote?: StringNullableFilter<"Record"> | string | null
    wellId?: StringFilter<"Record"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutWellInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutWellInput, NotificationUncheckedUpdateWithoutWellInput>
    create: XOR<NotificationCreateWithoutWellInput, NotificationUncheckedCreateWithoutWellInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutWellInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutWellInput, NotificationUncheckedUpdateWithoutWellInput>
  }

  export type NotificationUpdateManyWithWhereWithoutWellInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutWellInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    seen?: BoolFilter<"Notification"> | boolean
    wellId?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type WellCreateWithoutRecordInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    place: PlaceCreateNestedOneWithoutWellInput
    Condition?: ConditionCreateNestedManyWithoutWellInput
    Notification?: NotificationCreateNestedManyWithoutWellInput
  }

  export type WellUncheckedCreateWithoutRecordInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    placeId: string
    Condition?: ConditionUncheckedCreateNestedManyWithoutWellInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutWellInput
  }

  export type WellCreateOrConnectWithoutRecordInput = {
    where: WellWhereUniqueInput
    create: XOR<WellCreateWithoutRecordInput, WellUncheckedCreateWithoutRecordInput>
  }

  export type WellUpsertWithoutRecordInput = {
    update: XOR<WellUpdateWithoutRecordInput, WellUncheckedUpdateWithoutRecordInput>
    create: XOR<WellCreateWithoutRecordInput, WellUncheckedCreateWithoutRecordInput>
    where?: WellWhereInput
  }

  export type WellUpdateToOneWithWhereWithoutRecordInput = {
    where?: WellWhereInput
    data: XOR<WellUpdateWithoutRecordInput, WellUncheckedUpdateWithoutRecordInput>
  }

  export type WellUpdateWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    place?: PlaceUpdateOneRequiredWithoutWellNestedInput
    Condition?: ConditionUpdateManyWithoutWellNestedInput
    Notification?: NotificationUpdateManyWithoutWellNestedInput
  }

  export type WellUncheckedUpdateWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    Condition?: ConditionUncheckedUpdateManyWithoutWellNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutWellNestedInput
  }

  export type WellCreateWithoutNotificationInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    place: PlaceCreateNestedOneWithoutWellInput
    Condition?: ConditionCreateNestedManyWithoutWellInput
    Record?: RecordCreateNestedManyWithoutWellInput
  }

  export type WellUncheckedCreateWithoutNotificationInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    placeId: string
    Condition?: ConditionUncheckedCreateNestedManyWithoutWellInput
    Record?: RecordUncheckedCreateNestedManyWithoutWellInput
  }

  export type WellCreateOrConnectWithoutNotificationInput = {
    where: WellWhereUniqueInput
    create: XOR<WellCreateWithoutNotificationInput, WellUncheckedCreateWithoutNotificationInput>
  }

  export type WellUpsertWithoutNotificationInput = {
    update: XOR<WellUpdateWithoutNotificationInput, WellUncheckedUpdateWithoutNotificationInput>
    create: XOR<WellCreateWithoutNotificationInput, WellUncheckedCreateWithoutNotificationInput>
    where?: WellWhereInput
  }

  export type WellUpdateToOneWithWhereWithoutNotificationInput = {
    where?: WellWhereInput
    data: XOR<WellUpdateWithoutNotificationInput, WellUncheckedUpdateWithoutNotificationInput>
  }

  export type WellUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    place?: PlaceUpdateOneRequiredWithoutWellNestedInput
    Condition?: ConditionUpdateManyWithoutWellNestedInput
    Record?: RecordUpdateManyWithoutWellNestedInput
  }

  export type WellUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    Condition?: ConditionUncheckedUpdateManyWithoutWellNestedInput
    Record?: RecordUncheckedUpdateManyWithoutWellNestedInput
  }

  export type RuleConditionCreateWithoutConditionInput = {
    id?: string
    parameter: string
    operator: string
    thresholdValue: number
    logicalOperator: $Enums.LogicalOperator
  }

  export type RuleConditionUncheckedCreateWithoutConditionInput = {
    id?: string
    parameter: string
    operator: string
    thresholdValue: number
    logicalOperator: $Enums.LogicalOperator
  }

  export type RuleConditionCreateOrConnectWithoutConditionInput = {
    where: RuleConditionWhereUniqueInput
    create: XOR<RuleConditionCreateWithoutConditionInput, RuleConditionUncheckedCreateWithoutConditionInput>
  }

  export type RuleConditionCreateManyConditionInputEnvelope = {
    data: RuleConditionCreateManyConditionInput | RuleConditionCreateManyConditionInput[]
    skipDuplicates?: boolean
  }

  export type WellCreateWithoutConditionInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    place: PlaceCreateNestedOneWithoutWellInput
    Record?: RecordCreateNestedManyWithoutWellInput
    Notification?: NotificationCreateNestedManyWithoutWellInput
  }

  export type WellUncheckedCreateWithoutConditionInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
    placeId: string
    Record?: RecordUncheckedCreateNestedManyWithoutWellInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutWellInput
  }

  export type WellCreateOrConnectWithoutConditionInput = {
    where: WellWhereUniqueInput
    create: XOR<WellCreateWithoutConditionInput, WellUncheckedCreateWithoutConditionInput>
  }

  export type RuleConditionUpsertWithWhereUniqueWithoutConditionInput = {
    where: RuleConditionWhereUniqueInput
    update: XOR<RuleConditionUpdateWithoutConditionInput, RuleConditionUncheckedUpdateWithoutConditionInput>
    create: XOR<RuleConditionCreateWithoutConditionInput, RuleConditionUncheckedCreateWithoutConditionInput>
  }

  export type RuleConditionUpdateWithWhereUniqueWithoutConditionInput = {
    where: RuleConditionWhereUniqueInput
    data: XOR<RuleConditionUpdateWithoutConditionInput, RuleConditionUncheckedUpdateWithoutConditionInput>
  }

  export type RuleConditionUpdateManyWithWhereWithoutConditionInput = {
    where: RuleConditionScalarWhereInput
    data: XOR<RuleConditionUpdateManyMutationInput, RuleConditionUncheckedUpdateManyWithoutConditionInput>
  }

  export type RuleConditionScalarWhereInput = {
    AND?: RuleConditionScalarWhereInput | RuleConditionScalarWhereInput[]
    OR?: RuleConditionScalarWhereInput[]
    NOT?: RuleConditionScalarWhereInput | RuleConditionScalarWhereInput[]
    id?: StringFilter<"RuleCondition"> | string
    conditionId?: StringFilter<"RuleCondition"> | string
    parameter?: StringFilter<"RuleCondition"> | string
    operator?: StringFilter<"RuleCondition"> | string
    thresholdValue?: FloatFilter<"RuleCondition"> | number
    logicalOperator?: EnumLogicalOperatorFilter<"RuleCondition"> | $Enums.LogicalOperator
  }

  export type WellUpsertWithoutConditionInput = {
    update: XOR<WellUpdateWithoutConditionInput, WellUncheckedUpdateWithoutConditionInput>
    create: XOR<WellCreateWithoutConditionInput, WellUncheckedCreateWithoutConditionInput>
    where?: WellWhereInput
  }

  export type WellUpdateToOneWithWhereWithoutConditionInput = {
    where?: WellWhereInput
    data: XOR<WellUpdateWithoutConditionInput, WellUncheckedUpdateWithoutConditionInput>
  }

  export type WellUpdateWithoutConditionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    place?: PlaceUpdateOneRequiredWithoutWellNestedInput
    Record?: RecordUpdateManyWithoutWellNestedInput
    Notification?: NotificationUpdateManyWithoutWellNestedInput
  }

  export type WellUncheckedUpdateWithoutConditionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    placeId?: StringFieldUpdateOperationsInput | string
    Record?: RecordUncheckedUpdateManyWithoutWellNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutWellNestedInput
  }

  export type ConditionCreateWithoutRulesInput = {
    id?: string
    name: string
    well: WellCreateNestedOneWithoutConditionInput
  }

  export type ConditionUncheckedCreateWithoutRulesInput = {
    id?: string
    name: string
    wellId: string
  }

  export type ConditionCreateOrConnectWithoutRulesInput = {
    where: ConditionWhereUniqueInput
    create: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput>
  }

  export type ConditionUpsertWithoutRulesInput = {
    update: XOR<ConditionUpdateWithoutRulesInput, ConditionUncheckedUpdateWithoutRulesInput>
    create: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput>
    where?: ConditionWhereInput
  }

  export type ConditionUpdateToOneWithWhereWithoutRulesInput = {
    where?: ConditionWhereInput
    data: XOR<ConditionUpdateWithoutRulesInput, ConditionUncheckedUpdateWithoutRulesInput>
  }

  export type ConditionUpdateWithoutRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    well?: WellUpdateOneRequiredWithoutConditionNestedInput
  }

  export type ConditionUncheckedUpdateWithoutRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    wellId?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateManyCompanyInput = {
    id?: string
    name: string
    email: string
    role?: $Enums.Role
    password: string
  }

  export type PlaceCreateManyCompanyInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type EmployeeUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PlaceUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    Well?: WellUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    Well?: WellUncheckedUpdateManyWithoutPlaceNestedInput
  }

  export type PlaceUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type WellCreateManyPlaceInput = {
    id?: string
    name: string
    address?: string | null
    latitude?: number | null
    longitude?: number | null
    topic: string
  }

  export type WellUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    Condition?: ConditionUpdateManyWithoutWellNestedInput
    Record?: RecordUpdateManyWithoutWellNestedInput
    Notification?: NotificationUpdateManyWithoutWellNestedInput
  }

  export type WellUncheckedUpdateWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
    Condition?: ConditionUncheckedUpdateManyWithoutWellNestedInput
    Record?: RecordUncheckedUpdateManyWithoutWellNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutWellNestedInput
  }

  export type WellUncheckedUpdateManyWithoutPlaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    topic?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionCreateManyWellInput = {
    id?: string
    name: string
  }

  export type RecordCreateManyWellInput = {
    id?: string
    dt: Date | string
    wid: string
    sid: string
    recid: string
    seqid: string
    date: string
    time: string
    actcode: string
    blockpos: string
    bitdepth: string
    deptbitv: string
    md: string
    tvd: string
    logdepth: string
    speedup: string
    speeddown: string
    rop: string
    ropi: string
    timeropi: string
    hklda: string
    hkldx: string
    hkldpu: string
    hkldso: string
    woba: string
    wobx: string
    torqa: string
    torqx: string
    torqp: string
    torqb: string
    rpm: string
    rpmm: string
    totrpm: string
    stppress: string
    csgpress: string
    mudflowine: string
    mudflowin: string
    mudflowoute: string
    mudflowout: string
    mudflowoutp: string
    diffflow: string
    klflow: string
    muddensin: string
    muddensout: string
    mudtempin: string
    mudtempout: string
    mudcondin: string
    mudcondout: string
    mfiann: string
    mfianne: string
    surfrev: string
    drillrev: string
    reamrev: string
    circrev: string
    totrev: string
    drilltime: string
    reamtime: string
    circtime: string
    pumptime: string
    rotatingtime: string
    drilldist: string
    stroke1: string
    stroke2: string
    stroke3: string
    stroke4: string
    totstks: string
    totstksa: string
    spm1: string
    spm2: string
    spm3: string
    spm4: string
    spm5: string
    totspm: string
    totspma: string
    totpumpede: string
    totpumpvol: string
    totpumpvolan: string
    totpumpedea: string
    tankvoltot: string
    tankvolact: string
    tankvoltt: string
    tankvolchgtot: string
    tankvolchgact: string
    tankvolchgtt: string
    plbit: string
    plstr: string
    plann: string
    plsurf: string
    plmtr: string
    plmwd: string
    bithydpwr: string
    bithydpwra: string
    jif: string
    jetvel: string
    annveln: string
    annvelx: string
    ecddpt: string
    ecdbit: string
    ecdshoe: string
    phydpwr: string
    deptretm: string
    lagstks: string
    lagtime: string
    dnhstroke: string
    dnhtime: string
    mse: string
    doc: string
    gas: string
    dstrength: string
    mseds: string
    clcontent: string
    in_slips?: string | null
    bht: string
    scfm: string
    airflin: string
    airfline: string
    airfloutp: string
    airflout: string
    airpress: string
    airtemp: string
    whp: string
    wht: string
    h2s1: string
    h2s2: string
    h2s3: string
    h2s4: string
    co21: string
    co22: string
    co23: string
    co24: string
    bitsize: string
    foamrate: string
    spare_1: string
    spare_2: string
    spare_3: string
    spare_4: string
    spare_5: string
    spare_6: string
    spare_7: string
    spare_8: string
    spare_9: string
    spare_10: string
    spare_50: string
    spare_51: string
    spare_52: string
    spare_53: string
    spare_54: string
    spare_55: string
    spare_56: string
    label?: string | null
    posisiy?: string | null
    tipenote?: string | null
    idnote?: string | null
  }

  export type NotificationCreateManyWellInput = {
    id?: string
    title: string
    message?: string | null
    seen?: boolean
    createdAt?: Date | string
  }

  export type ConditionUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rules?: RuleConditionUpdateManyWithoutConditionNestedInput
  }

  export type ConditionUncheckedUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    rules?: RuleConditionUncheckedUpdateManyWithoutConditionNestedInput
  }

  export type ConditionUncheckedUpdateManyWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RecordUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    dt?: DateTimeFieldUpdateOperationsInput | Date | string
    wid?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    recid?: StringFieldUpdateOperationsInput | string
    seqid?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    actcode?: StringFieldUpdateOperationsInput | string
    blockpos?: StringFieldUpdateOperationsInput | string
    bitdepth?: StringFieldUpdateOperationsInput | string
    deptbitv?: StringFieldUpdateOperationsInput | string
    md?: StringFieldUpdateOperationsInput | string
    tvd?: StringFieldUpdateOperationsInput | string
    logdepth?: StringFieldUpdateOperationsInput | string
    speedup?: StringFieldUpdateOperationsInput | string
    speeddown?: StringFieldUpdateOperationsInput | string
    rop?: StringFieldUpdateOperationsInput | string
    ropi?: StringFieldUpdateOperationsInput | string
    timeropi?: StringFieldUpdateOperationsInput | string
    hklda?: StringFieldUpdateOperationsInput | string
    hkldx?: StringFieldUpdateOperationsInput | string
    hkldpu?: StringFieldUpdateOperationsInput | string
    hkldso?: StringFieldUpdateOperationsInput | string
    woba?: StringFieldUpdateOperationsInput | string
    wobx?: StringFieldUpdateOperationsInput | string
    torqa?: StringFieldUpdateOperationsInput | string
    torqx?: StringFieldUpdateOperationsInput | string
    torqp?: StringFieldUpdateOperationsInput | string
    torqb?: StringFieldUpdateOperationsInput | string
    rpm?: StringFieldUpdateOperationsInput | string
    rpmm?: StringFieldUpdateOperationsInput | string
    totrpm?: StringFieldUpdateOperationsInput | string
    stppress?: StringFieldUpdateOperationsInput | string
    csgpress?: StringFieldUpdateOperationsInput | string
    mudflowine?: StringFieldUpdateOperationsInput | string
    mudflowin?: StringFieldUpdateOperationsInput | string
    mudflowoute?: StringFieldUpdateOperationsInput | string
    mudflowout?: StringFieldUpdateOperationsInput | string
    mudflowoutp?: StringFieldUpdateOperationsInput | string
    diffflow?: StringFieldUpdateOperationsInput | string
    klflow?: StringFieldUpdateOperationsInput | string
    muddensin?: StringFieldUpdateOperationsInput | string
    muddensout?: StringFieldUpdateOperationsInput | string
    mudtempin?: StringFieldUpdateOperationsInput | string
    mudtempout?: StringFieldUpdateOperationsInput | string
    mudcondin?: StringFieldUpdateOperationsInput | string
    mudcondout?: StringFieldUpdateOperationsInput | string
    mfiann?: StringFieldUpdateOperationsInput | string
    mfianne?: StringFieldUpdateOperationsInput | string
    surfrev?: StringFieldUpdateOperationsInput | string
    drillrev?: StringFieldUpdateOperationsInput | string
    reamrev?: StringFieldUpdateOperationsInput | string
    circrev?: StringFieldUpdateOperationsInput | string
    totrev?: StringFieldUpdateOperationsInput | string
    drilltime?: StringFieldUpdateOperationsInput | string
    reamtime?: StringFieldUpdateOperationsInput | string
    circtime?: StringFieldUpdateOperationsInput | string
    pumptime?: StringFieldUpdateOperationsInput | string
    rotatingtime?: StringFieldUpdateOperationsInput | string
    drilldist?: StringFieldUpdateOperationsInput | string
    stroke1?: StringFieldUpdateOperationsInput | string
    stroke2?: StringFieldUpdateOperationsInput | string
    stroke3?: StringFieldUpdateOperationsInput | string
    stroke4?: StringFieldUpdateOperationsInput | string
    totstks?: StringFieldUpdateOperationsInput | string
    totstksa?: StringFieldUpdateOperationsInput | string
    spm1?: StringFieldUpdateOperationsInput | string
    spm2?: StringFieldUpdateOperationsInput | string
    spm3?: StringFieldUpdateOperationsInput | string
    spm4?: StringFieldUpdateOperationsInput | string
    spm5?: StringFieldUpdateOperationsInput | string
    totspm?: StringFieldUpdateOperationsInput | string
    totspma?: StringFieldUpdateOperationsInput | string
    totpumpede?: StringFieldUpdateOperationsInput | string
    totpumpvol?: StringFieldUpdateOperationsInput | string
    totpumpvolan?: StringFieldUpdateOperationsInput | string
    totpumpedea?: StringFieldUpdateOperationsInput | string
    tankvoltot?: StringFieldUpdateOperationsInput | string
    tankvolact?: StringFieldUpdateOperationsInput | string
    tankvoltt?: StringFieldUpdateOperationsInput | string
    tankvolchgtot?: StringFieldUpdateOperationsInput | string
    tankvolchgact?: StringFieldUpdateOperationsInput | string
    tankvolchgtt?: StringFieldUpdateOperationsInput | string
    plbit?: StringFieldUpdateOperationsInput | string
    plstr?: StringFieldUpdateOperationsInput | string
    plann?: StringFieldUpdateOperationsInput | string
    plsurf?: StringFieldUpdateOperationsInput | string
    plmtr?: StringFieldUpdateOperationsInput | string
    plmwd?: StringFieldUpdateOperationsInput | string
    bithydpwr?: StringFieldUpdateOperationsInput | string
    bithydpwra?: StringFieldUpdateOperationsInput | string
    jif?: StringFieldUpdateOperationsInput | string
    jetvel?: StringFieldUpdateOperationsInput | string
    annveln?: StringFieldUpdateOperationsInput | string
    annvelx?: StringFieldUpdateOperationsInput | string
    ecddpt?: StringFieldUpdateOperationsInput | string
    ecdbit?: StringFieldUpdateOperationsInput | string
    ecdshoe?: StringFieldUpdateOperationsInput | string
    phydpwr?: StringFieldUpdateOperationsInput | string
    deptretm?: StringFieldUpdateOperationsInput | string
    lagstks?: StringFieldUpdateOperationsInput | string
    lagtime?: StringFieldUpdateOperationsInput | string
    dnhstroke?: StringFieldUpdateOperationsInput | string
    dnhtime?: StringFieldUpdateOperationsInput | string
    mse?: StringFieldUpdateOperationsInput | string
    doc?: StringFieldUpdateOperationsInput | string
    gas?: StringFieldUpdateOperationsInput | string
    dstrength?: StringFieldUpdateOperationsInput | string
    mseds?: StringFieldUpdateOperationsInput | string
    clcontent?: StringFieldUpdateOperationsInput | string
    in_slips?: NullableStringFieldUpdateOperationsInput | string | null
    bht?: StringFieldUpdateOperationsInput | string
    scfm?: StringFieldUpdateOperationsInput | string
    airflin?: StringFieldUpdateOperationsInput | string
    airfline?: StringFieldUpdateOperationsInput | string
    airfloutp?: StringFieldUpdateOperationsInput | string
    airflout?: StringFieldUpdateOperationsInput | string
    airpress?: StringFieldUpdateOperationsInput | string
    airtemp?: StringFieldUpdateOperationsInput | string
    whp?: StringFieldUpdateOperationsInput | string
    wht?: StringFieldUpdateOperationsInput | string
    h2s1?: StringFieldUpdateOperationsInput | string
    h2s2?: StringFieldUpdateOperationsInput | string
    h2s3?: StringFieldUpdateOperationsInput | string
    h2s4?: StringFieldUpdateOperationsInput | string
    co21?: StringFieldUpdateOperationsInput | string
    co22?: StringFieldUpdateOperationsInput | string
    co23?: StringFieldUpdateOperationsInput | string
    co24?: StringFieldUpdateOperationsInput | string
    bitsize?: StringFieldUpdateOperationsInput | string
    foamrate?: StringFieldUpdateOperationsInput | string
    spare_1?: StringFieldUpdateOperationsInput | string
    spare_2?: StringFieldUpdateOperationsInput | string
    spare_3?: StringFieldUpdateOperationsInput | string
    spare_4?: StringFieldUpdateOperationsInput | string
    spare_5?: StringFieldUpdateOperationsInput | string
    spare_6?: StringFieldUpdateOperationsInput | string
    spare_7?: StringFieldUpdateOperationsInput | string
    spare_8?: StringFieldUpdateOperationsInput | string
    spare_9?: StringFieldUpdateOperationsInput | string
    spare_10?: StringFieldUpdateOperationsInput | string
    spare_50?: StringFieldUpdateOperationsInput | string
    spare_51?: StringFieldUpdateOperationsInput | string
    spare_52?: StringFieldUpdateOperationsInput | string
    spare_53?: StringFieldUpdateOperationsInput | string
    spare_54?: StringFieldUpdateOperationsInput | string
    spare_55?: StringFieldUpdateOperationsInput | string
    spare_56?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    posisiy?: NullableStringFieldUpdateOperationsInput | string | null
    tipenote?: NullableStringFieldUpdateOperationsInput | string | null
    idnote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordUncheckedUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    dt?: DateTimeFieldUpdateOperationsInput | Date | string
    wid?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    recid?: StringFieldUpdateOperationsInput | string
    seqid?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    actcode?: StringFieldUpdateOperationsInput | string
    blockpos?: StringFieldUpdateOperationsInput | string
    bitdepth?: StringFieldUpdateOperationsInput | string
    deptbitv?: StringFieldUpdateOperationsInput | string
    md?: StringFieldUpdateOperationsInput | string
    tvd?: StringFieldUpdateOperationsInput | string
    logdepth?: StringFieldUpdateOperationsInput | string
    speedup?: StringFieldUpdateOperationsInput | string
    speeddown?: StringFieldUpdateOperationsInput | string
    rop?: StringFieldUpdateOperationsInput | string
    ropi?: StringFieldUpdateOperationsInput | string
    timeropi?: StringFieldUpdateOperationsInput | string
    hklda?: StringFieldUpdateOperationsInput | string
    hkldx?: StringFieldUpdateOperationsInput | string
    hkldpu?: StringFieldUpdateOperationsInput | string
    hkldso?: StringFieldUpdateOperationsInput | string
    woba?: StringFieldUpdateOperationsInput | string
    wobx?: StringFieldUpdateOperationsInput | string
    torqa?: StringFieldUpdateOperationsInput | string
    torqx?: StringFieldUpdateOperationsInput | string
    torqp?: StringFieldUpdateOperationsInput | string
    torqb?: StringFieldUpdateOperationsInput | string
    rpm?: StringFieldUpdateOperationsInput | string
    rpmm?: StringFieldUpdateOperationsInput | string
    totrpm?: StringFieldUpdateOperationsInput | string
    stppress?: StringFieldUpdateOperationsInput | string
    csgpress?: StringFieldUpdateOperationsInput | string
    mudflowine?: StringFieldUpdateOperationsInput | string
    mudflowin?: StringFieldUpdateOperationsInput | string
    mudflowoute?: StringFieldUpdateOperationsInput | string
    mudflowout?: StringFieldUpdateOperationsInput | string
    mudflowoutp?: StringFieldUpdateOperationsInput | string
    diffflow?: StringFieldUpdateOperationsInput | string
    klflow?: StringFieldUpdateOperationsInput | string
    muddensin?: StringFieldUpdateOperationsInput | string
    muddensout?: StringFieldUpdateOperationsInput | string
    mudtempin?: StringFieldUpdateOperationsInput | string
    mudtempout?: StringFieldUpdateOperationsInput | string
    mudcondin?: StringFieldUpdateOperationsInput | string
    mudcondout?: StringFieldUpdateOperationsInput | string
    mfiann?: StringFieldUpdateOperationsInput | string
    mfianne?: StringFieldUpdateOperationsInput | string
    surfrev?: StringFieldUpdateOperationsInput | string
    drillrev?: StringFieldUpdateOperationsInput | string
    reamrev?: StringFieldUpdateOperationsInput | string
    circrev?: StringFieldUpdateOperationsInput | string
    totrev?: StringFieldUpdateOperationsInput | string
    drilltime?: StringFieldUpdateOperationsInput | string
    reamtime?: StringFieldUpdateOperationsInput | string
    circtime?: StringFieldUpdateOperationsInput | string
    pumptime?: StringFieldUpdateOperationsInput | string
    rotatingtime?: StringFieldUpdateOperationsInput | string
    drilldist?: StringFieldUpdateOperationsInput | string
    stroke1?: StringFieldUpdateOperationsInput | string
    stroke2?: StringFieldUpdateOperationsInput | string
    stroke3?: StringFieldUpdateOperationsInput | string
    stroke4?: StringFieldUpdateOperationsInput | string
    totstks?: StringFieldUpdateOperationsInput | string
    totstksa?: StringFieldUpdateOperationsInput | string
    spm1?: StringFieldUpdateOperationsInput | string
    spm2?: StringFieldUpdateOperationsInput | string
    spm3?: StringFieldUpdateOperationsInput | string
    spm4?: StringFieldUpdateOperationsInput | string
    spm5?: StringFieldUpdateOperationsInput | string
    totspm?: StringFieldUpdateOperationsInput | string
    totspma?: StringFieldUpdateOperationsInput | string
    totpumpede?: StringFieldUpdateOperationsInput | string
    totpumpvol?: StringFieldUpdateOperationsInput | string
    totpumpvolan?: StringFieldUpdateOperationsInput | string
    totpumpedea?: StringFieldUpdateOperationsInput | string
    tankvoltot?: StringFieldUpdateOperationsInput | string
    tankvolact?: StringFieldUpdateOperationsInput | string
    tankvoltt?: StringFieldUpdateOperationsInput | string
    tankvolchgtot?: StringFieldUpdateOperationsInput | string
    tankvolchgact?: StringFieldUpdateOperationsInput | string
    tankvolchgtt?: StringFieldUpdateOperationsInput | string
    plbit?: StringFieldUpdateOperationsInput | string
    plstr?: StringFieldUpdateOperationsInput | string
    plann?: StringFieldUpdateOperationsInput | string
    plsurf?: StringFieldUpdateOperationsInput | string
    plmtr?: StringFieldUpdateOperationsInput | string
    plmwd?: StringFieldUpdateOperationsInput | string
    bithydpwr?: StringFieldUpdateOperationsInput | string
    bithydpwra?: StringFieldUpdateOperationsInput | string
    jif?: StringFieldUpdateOperationsInput | string
    jetvel?: StringFieldUpdateOperationsInput | string
    annveln?: StringFieldUpdateOperationsInput | string
    annvelx?: StringFieldUpdateOperationsInput | string
    ecddpt?: StringFieldUpdateOperationsInput | string
    ecdbit?: StringFieldUpdateOperationsInput | string
    ecdshoe?: StringFieldUpdateOperationsInput | string
    phydpwr?: StringFieldUpdateOperationsInput | string
    deptretm?: StringFieldUpdateOperationsInput | string
    lagstks?: StringFieldUpdateOperationsInput | string
    lagtime?: StringFieldUpdateOperationsInput | string
    dnhstroke?: StringFieldUpdateOperationsInput | string
    dnhtime?: StringFieldUpdateOperationsInput | string
    mse?: StringFieldUpdateOperationsInput | string
    doc?: StringFieldUpdateOperationsInput | string
    gas?: StringFieldUpdateOperationsInput | string
    dstrength?: StringFieldUpdateOperationsInput | string
    mseds?: StringFieldUpdateOperationsInput | string
    clcontent?: StringFieldUpdateOperationsInput | string
    in_slips?: NullableStringFieldUpdateOperationsInput | string | null
    bht?: StringFieldUpdateOperationsInput | string
    scfm?: StringFieldUpdateOperationsInput | string
    airflin?: StringFieldUpdateOperationsInput | string
    airfline?: StringFieldUpdateOperationsInput | string
    airfloutp?: StringFieldUpdateOperationsInput | string
    airflout?: StringFieldUpdateOperationsInput | string
    airpress?: StringFieldUpdateOperationsInput | string
    airtemp?: StringFieldUpdateOperationsInput | string
    whp?: StringFieldUpdateOperationsInput | string
    wht?: StringFieldUpdateOperationsInput | string
    h2s1?: StringFieldUpdateOperationsInput | string
    h2s2?: StringFieldUpdateOperationsInput | string
    h2s3?: StringFieldUpdateOperationsInput | string
    h2s4?: StringFieldUpdateOperationsInput | string
    co21?: StringFieldUpdateOperationsInput | string
    co22?: StringFieldUpdateOperationsInput | string
    co23?: StringFieldUpdateOperationsInput | string
    co24?: StringFieldUpdateOperationsInput | string
    bitsize?: StringFieldUpdateOperationsInput | string
    foamrate?: StringFieldUpdateOperationsInput | string
    spare_1?: StringFieldUpdateOperationsInput | string
    spare_2?: StringFieldUpdateOperationsInput | string
    spare_3?: StringFieldUpdateOperationsInput | string
    spare_4?: StringFieldUpdateOperationsInput | string
    spare_5?: StringFieldUpdateOperationsInput | string
    spare_6?: StringFieldUpdateOperationsInput | string
    spare_7?: StringFieldUpdateOperationsInput | string
    spare_8?: StringFieldUpdateOperationsInput | string
    spare_9?: StringFieldUpdateOperationsInput | string
    spare_10?: StringFieldUpdateOperationsInput | string
    spare_50?: StringFieldUpdateOperationsInput | string
    spare_51?: StringFieldUpdateOperationsInput | string
    spare_52?: StringFieldUpdateOperationsInput | string
    spare_53?: StringFieldUpdateOperationsInput | string
    spare_54?: StringFieldUpdateOperationsInput | string
    spare_55?: StringFieldUpdateOperationsInput | string
    spare_56?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    posisiy?: NullableStringFieldUpdateOperationsInput | string | null
    tipenote?: NullableStringFieldUpdateOperationsInput | string | null
    idnote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordUncheckedUpdateManyWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    dt?: DateTimeFieldUpdateOperationsInput | Date | string
    wid?: StringFieldUpdateOperationsInput | string
    sid?: StringFieldUpdateOperationsInput | string
    recid?: StringFieldUpdateOperationsInput | string
    seqid?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    actcode?: StringFieldUpdateOperationsInput | string
    blockpos?: StringFieldUpdateOperationsInput | string
    bitdepth?: StringFieldUpdateOperationsInput | string
    deptbitv?: StringFieldUpdateOperationsInput | string
    md?: StringFieldUpdateOperationsInput | string
    tvd?: StringFieldUpdateOperationsInput | string
    logdepth?: StringFieldUpdateOperationsInput | string
    speedup?: StringFieldUpdateOperationsInput | string
    speeddown?: StringFieldUpdateOperationsInput | string
    rop?: StringFieldUpdateOperationsInput | string
    ropi?: StringFieldUpdateOperationsInput | string
    timeropi?: StringFieldUpdateOperationsInput | string
    hklda?: StringFieldUpdateOperationsInput | string
    hkldx?: StringFieldUpdateOperationsInput | string
    hkldpu?: StringFieldUpdateOperationsInput | string
    hkldso?: StringFieldUpdateOperationsInput | string
    woba?: StringFieldUpdateOperationsInput | string
    wobx?: StringFieldUpdateOperationsInput | string
    torqa?: StringFieldUpdateOperationsInput | string
    torqx?: StringFieldUpdateOperationsInput | string
    torqp?: StringFieldUpdateOperationsInput | string
    torqb?: StringFieldUpdateOperationsInput | string
    rpm?: StringFieldUpdateOperationsInput | string
    rpmm?: StringFieldUpdateOperationsInput | string
    totrpm?: StringFieldUpdateOperationsInput | string
    stppress?: StringFieldUpdateOperationsInput | string
    csgpress?: StringFieldUpdateOperationsInput | string
    mudflowine?: StringFieldUpdateOperationsInput | string
    mudflowin?: StringFieldUpdateOperationsInput | string
    mudflowoute?: StringFieldUpdateOperationsInput | string
    mudflowout?: StringFieldUpdateOperationsInput | string
    mudflowoutp?: StringFieldUpdateOperationsInput | string
    diffflow?: StringFieldUpdateOperationsInput | string
    klflow?: StringFieldUpdateOperationsInput | string
    muddensin?: StringFieldUpdateOperationsInput | string
    muddensout?: StringFieldUpdateOperationsInput | string
    mudtempin?: StringFieldUpdateOperationsInput | string
    mudtempout?: StringFieldUpdateOperationsInput | string
    mudcondin?: StringFieldUpdateOperationsInput | string
    mudcondout?: StringFieldUpdateOperationsInput | string
    mfiann?: StringFieldUpdateOperationsInput | string
    mfianne?: StringFieldUpdateOperationsInput | string
    surfrev?: StringFieldUpdateOperationsInput | string
    drillrev?: StringFieldUpdateOperationsInput | string
    reamrev?: StringFieldUpdateOperationsInput | string
    circrev?: StringFieldUpdateOperationsInput | string
    totrev?: StringFieldUpdateOperationsInput | string
    drilltime?: StringFieldUpdateOperationsInput | string
    reamtime?: StringFieldUpdateOperationsInput | string
    circtime?: StringFieldUpdateOperationsInput | string
    pumptime?: StringFieldUpdateOperationsInput | string
    rotatingtime?: StringFieldUpdateOperationsInput | string
    drilldist?: StringFieldUpdateOperationsInput | string
    stroke1?: StringFieldUpdateOperationsInput | string
    stroke2?: StringFieldUpdateOperationsInput | string
    stroke3?: StringFieldUpdateOperationsInput | string
    stroke4?: StringFieldUpdateOperationsInput | string
    totstks?: StringFieldUpdateOperationsInput | string
    totstksa?: StringFieldUpdateOperationsInput | string
    spm1?: StringFieldUpdateOperationsInput | string
    spm2?: StringFieldUpdateOperationsInput | string
    spm3?: StringFieldUpdateOperationsInput | string
    spm4?: StringFieldUpdateOperationsInput | string
    spm5?: StringFieldUpdateOperationsInput | string
    totspm?: StringFieldUpdateOperationsInput | string
    totspma?: StringFieldUpdateOperationsInput | string
    totpumpede?: StringFieldUpdateOperationsInput | string
    totpumpvol?: StringFieldUpdateOperationsInput | string
    totpumpvolan?: StringFieldUpdateOperationsInput | string
    totpumpedea?: StringFieldUpdateOperationsInput | string
    tankvoltot?: StringFieldUpdateOperationsInput | string
    tankvolact?: StringFieldUpdateOperationsInput | string
    tankvoltt?: StringFieldUpdateOperationsInput | string
    tankvolchgtot?: StringFieldUpdateOperationsInput | string
    tankvolchgact?: StringFieldUpdateOperationsInput | string
    tankvolchgtt?: StringFieldUpdateOperationsInput | string
    plbit?: StringFieldUpdateOperationsInput | string
    plstr?: StringFieldUpdateOperationsInput | string
    plann?: StringFieldUpdateOperationsInput | string
    plsurf?: StringFieldUpdateOperationsInput | string
    plmtr?: StringFieldUpdateOperationsInput | string
    plmwd?: StringFieldUpdateOperationsInput | string
    bithydpwr?: StringFieldUpdateOperationsInput | string
    bithydpwra?: StringFieldUpdateOperationsInput | string
    jif?: StringFieldUpdateOperationsInput | string
    jetvel?: StringFieldUpdateOperationsInput | string
    annveln?: StringFieldUpdateOperationsInput | string
    annvelx?: StringFieldUpdateOperationsInput | string
    ecddpt?: StringFieldUpdateOperationsInput | string
    ecdbit?: StringFieldUpdateOperationsInput | string
    ecdshoe?: StringFieldUpdateOperationsInput | string
    phydpwr?: StringFieldUpdateOperationsInput | string
    deptretm?: StringFieldUpdateOperationsInput | string
    lagstks?: StringFieldUpdateOperationsInput | string
    lagtime?: StringFieldUpdateOperationsInput | string
    dnhstroke?: StringFieldUpdateOperationsInput | string
    dnhtime?: StringFieldUpdateOperationsInput | string
    mse?: StringFieldUpdateOperationsInput | string
    doc?: StringFieldUpdateOperationsInput | string
    gas?: StringFieldUpdateOperationsInput | string
    dstrength?: StringFieldUpdateOperationsInput | string
    mseds?: StringFieldUpdateOperationsInput | string
    clcontent?: StringFieldUpdateOperationsInput | string
    in_slips?: NullableStringFieldUpdateOperationsInput | string | null
    bht?: StringFieldUpdateOperationsInput | string
    scfm?: StringFieldUpdateOperationsInput | string
    airflin?: StringFieldUpdateOperationsInput | string
    airfline?: StringFieldUpdateOperationsInput | string
    airfloutp?: StringFieldUpdateOperationsInput | string
    airflout?: StringFieldUpdateOperationsInput | string
    airpress?: StringFieldUpdateOperationsInput | string
    airtemp?: StringFieldUpdateOperationsInput | string
    whp?: StringFieldUpdateOperationsInput | string
    wht?: StringFieldUpdateOperationsInput | string
    h2s1?: StringFieldUpdateOperationsInput | string
    h2s2?: StringFieldUpdateOperationsInput | string
    h2s3?: StringFieldUpdateOperationsInput | string
    h2s4?: StringFieldUpdateOperationsInput | string
    co21?: StringFieldUpdateOperationsInput | string
    co22?: StringFieldUpdateOperationsInput | string
    co23?: StringFieldUpdateOperationsInput | string
    co24?: StringFieldUpdateOperationsInput | string
    bitsize?: StringFieldUpdateOperationsInput | string
    foamrate?: StringFieldUpdateOperationsInput | string
    spare_1?: StringFieldUpdateOperationsInput | string
    spare_2?: StringFieldUpdateOperationsInput | string
    spare_3?: StringFieldUpdateOperationsInput | string
    spare_4?: StringFieldUpdateOperationsInput | string
    spare_5?: StringFieldUpdateOperationsInput | string
    spare_6?: StringFieldUpdateOperationsInput | string
    spare_7?: StringFieldUpdateOperationsInput | string
    spare_8?: StringFieldUpdateOperationsInput | string
    spare_9?: StringFieldUpdateOperationsInput | string
    spare_10?: StringFieldUpdateOperationsInput | string
    spare_50?: StringFieldUpdateOperationsInput | string
    spare_51?: StringFieldUpdateOperationsInput | string
    spare_52?: StringFieldUpdateOperationsInput | string
    spare_53?: StringFieldUpdateOperationsInput | string
    spare_54?: StringFieldUpdateOperationsInput | string
    spare_55?: StringFieldUpdateOperationsInput | string
    spare_56?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    posisiy?: NullableStringFieldUpdateOperationsInput | string | null
    tipenote?: NullableStringFieldUpdateOperationsInput | string | null
    idnote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    seen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    seen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutWellInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    seen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RuleConditionCreateManyConditionInput = {
    id?: string
    parameter: string
    operator: string
    thresholdValue: number
    logicalOperator: $Enums.LogicalOperator
  }

  export type RuleConditionUpdateWithoutConditionInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameter?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    thresholdValue?: FloatFieldUpdateOperationsInput | number
    logicalOperator?: EnumLogicalOperatorFieldUpdateOperationsInput | $Enums.LogicalOperator
  }

  export type RuleConditionUncheckedUpdateWithoutConditionInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameter?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    thresholdValue?: FloatFieldUpdateOperationsInput | number
    logicalOperator?: EnumLogicalOperatorFieldUpdateOperationsInput | $Enums.LogicalOperator
  }

  export type RuleConditionUncheckedUpdateManyWithoutConditionInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameter?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    thresholdValue?: FloatFieldUpdateOperationsInput | number
    logicalOperator?: EnumLogicalOperatorFieldUpdateOperationsInput | $Enums.LogicalOperator
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaceCountOutputTypeDefaultArgs instead
     */
    export type PlaceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WellCountOutputTypeDefaultArgs instead
     */
    export type WellCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WellCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConditionCountOutputTypeDefaultArgs instead
     */
    export type ConditionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConditionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaceDefaultArgs instead
     */
    export type PlaceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WellDefaultArgs instead
     */
    export type WellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WellDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecordDefaultArgs instead
     */
    export type RecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConditionDefaultArgs instead
     */
    export type ConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConditionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RuleConditionDefaultArgs instead
     */
    export type RuleConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RuleConditionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}