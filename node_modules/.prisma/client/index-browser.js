
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  role: 'role',
  password: 'password',
  companyId: 'companyId'
};

exports.Prisma.PlaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  companyId: 'companyId'
};

exports.Prisma.WellScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  topic: 'topic',
  placeId: 'placeId'
};

exports.Prisma.RecordScalarFieldEnum = {
  id: 'id',
  dt: 'dt',
  wid: 'wid',
  sid: 'sid',
  recid: 'recid',
  seqid: 'seqid',
  date: 'date',
  time: 'time',
  actcode: 'actcode',
  blockpos: 'blockpos',
  bitdepth: 'bitdepth',
  deptbitv: 'deptbitv',
  md: 'md',
  tvd: 'tvd',
  logdepth: 'logdepth',
  speedup: 'speedup',
  speeddown: 'speeddown',
  rop: 'rop',
  ropi: 'ropi',
  timeropi: 'timeropi',
  hklda: 'hklda',
  hkldx: 'hkldx',
  hkldpu: 'hkldpu',
  hkldso: 'hkldso',
  woba: 'woba',
  wobx: 'wobx',
  torqa: 'torqa',
  torqx: 'torqx',
  torqp: 'torqp',
  torqb: 'torqb',
  rpm: 'rpm',
  rpmm: 'rpmm',
  totrpm: 'totrpm',
  stppress: 'stppress',
  csgpress: 'csgpress',
  mudflowine: 'mudflowine',
  mudflowin: 'mudflowin',
  mudflowoute: 'mudflowoute',
  mudflowout: 'mudflowout',
  mudflowoutp: 'mudflowoutp',
  diffflow: 'diffflow',
  klflow: 'klflow',
  muddensin: 'muddensin',
  muddensout: 'muddensout',
  mudtempin: 'mudtempin',
  mudtempout: 'mudtempout',
  mudcondin: 'mudcondin',
  mudcondout: 'mudcondout',
  mfiann: 'mfiann',
  mfianne: 'mfianne',
  surfrev: 'surfrev',
  drillrev: 'drillrev',
  reamrev: 'reamrev',
  circrev: 'circrev',
  totrev: 'totrev',
  drilltime: 'drilltime',
  reamtime: 'reamtime',
  circtime: 'circtime',
  pumptime: 'pumptime',
  rotatingtime: 'rotatingtime',
  drilldist: 'drilldist',
  stroke1: 'stroke1',
  stroke2: 'stroke2',
  stroke3: 'stroke3',
  stroke4: 'stroke4',
  totstks: 'totstks',
  totstksa: 'totstksa',
  spm1: 'spm1',
  spm2: 'spm2',
  spm3: 'spm3',
  spm4: 'spm4',
  spm5: 'spm5',
  totspm: 'totspm',
  totspma: 'totspma',
  totpumpede: 'totpumpede',
  totpumpvol: 'totpumpvol',
  totpumpvolan: 'totpumpvolan',
  totpumpedea: 'totpumpedea',
  tankvoltot: 'tankvoltot',
  tankvolact: 'tankvolact',
  tankvoltt: 'tankvoltt',
  tankvolchgtot: 'tankvolchgtot',
  tankvolchgact: 'tankvolchgact',
  tankvolchgtt: 'tankvolchgtt',
  plbit: 'plbit',
  plstr: 'plstr',
  plann: 'plann',
  plsurf: 'plsurf',
  plmtr: 'plmtr',
  plmwd: 'plmwd',
  bithydpwr: 'bithydpwr',
  bithydpwra: 'bithydpwra',
  jif: 'jif',
  jetvel: 'jetvel',
  annveln: 'annveln',
  annvelx: 'annvelx',
  ecddpt: 'ecddpt',
  ecdbit: 'ecdbit',
  ecdshoe: 'ecdshoe',
  phydpwr: 'phydpwr',
  deptretm: 'deptretm',
  lagstks: 'lagstks',
  lagtime: 'lagtime',
  dnhstroke: 'dnhstroke',
  dnhtime: 'dnhtime',
  mse: 'mse',
  doc: 'doc',
  gas: 'gas',
  dstrength: 'dstrength',
  mseds: 'mseds',
  clcontent: 'clcontent',
  in_slips: 'in_slips',
  bht: 'bht',
  scfm: 'scfm',
  airflin: 'airflin',
  airfline: 'airfline',
  airfloutp: 'airfloutp',
  airflout: 'airflout',
  airpress: 'airpress',
  airtemp: 'airtemp',
  whp: 'whp',
  wht: 'wht',
  h2s1: 'h2s1',
  h2s2: 'h2s2',
  h2s3: 'h2s3',
  h2s4: 'h2s4',
  co21: 'co21',
  co22: 'co22',
  co23: 'co23',
  co24: 'co24',
  bitsize: 'bitsize',
  foamrate: 'foamrate',
  spare_1: 'spare_1',
  spare_2: 'spare_2',
  spare_3: 'spare_3',
  spare_4: 'spare_4',
  spare_5: 'spare_5',
  spare_6: 'spare_6',
  spare_7: 'spare_7',
  spare_8: 'spare_8',
  spare_9: 'spare_9',
  spare_10: 'spare_10',
  spare_50: 'spare_50',
  spare_51: 'spare_51',
  spare_52: 'spare_52',
  spare_53: 'spare_53',
  spare_54: 'spare_54',
  spare_55: 'spare_55',
  spare_56: 'spare_56',
  label: 'label',
  posisiy: 'posisiy',
  tipenote: 'tipenote',
  idnote: 'idnote',
  wellId: 'wellId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  seen: 'seen',
  wellId: 'wellId',
  createdAt: 'createdAt'
};

exports.Prisma.ConditionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  wellId: 'wellId'
};

exports.Prisma.RuleConditionScalarFieldEnum = {
  id: 'id',
  conditionId: 'conditionId',
  parameter: 'parameter',
  operator: 'operator',
  thresholdValue: 'thresholdValue',
  logicalOperator: 'logicalOperator'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.LogicalOperator = exports.$Enums.LogicalOperator = {
  AND: 'AND',
  OR: 'OR'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  Employee: 'Employee',
  Place: 'Place',
  Well: 'Well',
  Record: 'Record',
  Notification: 'Notification',
  Condition: 'Condition',
  RuleCondition: 'RuleCondition'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
